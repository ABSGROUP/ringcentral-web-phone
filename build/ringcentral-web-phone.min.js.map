{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","ringcentral-web-phone.js","webpack:/webpack/bootstrap 9a07dc903d9c4c4a228c","webpack:///src/index.js","webpack:///~/sip.js/src/SIP.js","webpack:///~/sip.js/package.json","webpack:///~/sip.js/src/Utils.js","webpack:///~/sip.js/src/Logger.js","webpack:///~/sip.js/src/LoggerFactory.js","webpack:///~/sip.js/src/EventEmitter.js","webpack:///~/sip.js/src/Constants.js","webpack:///~/sip.js/src/Exceptions.js","webpack:///~/sip.js/src/Timers.js","webpack:///~/sip.js/src/Transport.js","webpack:///~/sip.js/src/Parser.js","webpack:///~/sip.js/src/SIPMessage.js","webpack:///~/sip.js/src/URI.js","webpack:///~/sip.js/src/NameAddrHeader.js","webpack:///~/sip.js/src/Transactions.js","webpack:///~/sip.js/src/Dialog/RequestSender.js","webpack:///~/sip.js/src/Dialogs.js","webpack:///~/sip.js/src/RequestSender.js","webpack:///~/sip.js/src/RegisterContext.js","webpack:///~/sip.js/src/MediaHandler.js","webpack:///~/sip.js/src/ClientContext.js","webpack:///~/sip.js/src/ServerContext.js","webpack:///~/sip.js/src/Session/DTMF.js","webpack:///~/sip.js/src/Session.js","webpack:///~/sip.js/src/Subscription.js","webpack:///~/sip.js/src/WebRTC/MediaHandler.js","webpack:///~/sip.js/src/WebRTC/MediaStreamManager.js","webpack:///~/sip.js/src/WebRTC.js","webpack:///~/sip.js/src/UA.js","webpack:///~/sip.js/src/Hacks.js","webpack:///~/sip.js/src/SanityCheck.js","webpack:///~/sip.js/src/DigestAuthentication.js","webpack:///~/sip.js/src/Grammar/dist/Grammar.js","webpack:///src/emitter.js","webpack:///src/userAgent.js","webpack:///src/phoneLine.js","webpack:///src/utils.js","webpack:///src/eventNames.js","webpack:///src/dom.js","webpack:///src/audioHelper.js","webpack:///src/audio.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","WebPhone","options","service","__registerDeferred","undefined","__unregisterDeferred","__callDeferred","__sipRegistered","__sipOutboundEnabled","uuid","localStorage","activeLine","onMute","onHold","onRecord","contact","ua","UserAgent","on","bind","username","isRegistered","isRegistering","isUnregistering","events","EVENT_NAMES","causes","SIP","C","reasons","REASON_PHRASE","sipIncomingCall","line","eventEmitter","emit","incomingCall","outgoingCall","isOnHold","setHold","resolve","callEnded","callFailed","response","cause","test","status_code","session","onTransportError","setTimeout","reregister","sipRegistered","e","isUnregistered","sipRegistrationFailed","sipConnectionFailed","reject","sipUnRegistered","window","addEventListener","hangup","unregister","_audioHelper","audioHelper","createAudioHelper","EventEmitter","PhoneLine","AudioHelper","defer","extend","mediaStreamManagerProto","Object","create","WebRTC","MediaStreamManager","prototype","release","value","stream","streamId","acquisitions","stop","getTracks","forEach","track","version","console","log","register","info","checkFlags","sipFlags","outboundCallsEnabled","Error","sipInfo","headers","endpointId","push","extraHeaders","warn","promise","wsServers","outboundProxy","transport","toLowerCase","domain","sipDomain","userName","Array","isArray","uri","password","authorizationUser","authorizationId","traceSip","stunServers","turnServers","level","autostart","iceGatheringTimeout","setSIPConfig","start","Promise","reconnect","forceDisconnect","toNumber","fromNumber","country","Boolean","answer","incomingLines","getIncomingLinesArray","activeLines","getActiveLinesArray","self","length","arr","promises","all","then","onCall","filter","getLine","sendDTMF","hold","unhold","isIncoming","mute","setMute","unmute","transfer","target","global","pkg","defineProperties","get","name","title","Logger","LoggerFactory","Exceptions","Timers","DialogRequestSender","MediaHandler","SessionDTMF","WebRTCMediaHandler","WebRTCMediaStreamManager","Utils","Hacks","DigestAuthentication","Grammar","_args","_from","_id","_inCache","_installable","_location","_npmUser","email","_npmVersion","_phantomChildren","_requested","raw","rawSpec","scope","spec","type","_requiredBy","_resolved","_shasum","_shrinkwrap","_spec","_where","author","bugs","url","contributors","dependencies","description","devDependencies","browserify","grunt","grunt-browserify","grunt-cli","grunt-contrib-copy","grunt-contrib-jasmine","grunt-contrib-jshint","grunt-contrib-uglify","grunt-peg","grunt-trimtrailingspaces","node-minify","pegjs","sdp-transform","directories","dist","shasum","tarball","engines","node","gitHead","homepage","keywords","license","main","maintainers","optionalDependencies","readme","repository","scripts","augment","object","constructor","args","override","idx","proto","apply","optionsOverride","winner","loser","isDeprecated","logger","defaultValue","desugarSessionOptions","HTMLMediaElement","media","constraints","audio","video","tagName","render","remote","str_utf8_length","string","encodeURIComponent","replace","getPrefixedProperty","capitalizedName","charAt","toUpperCase","slice","prefixedNames","i","property","generateFakeSDP","body","indexOf","end","isFunction","fn","toString","isDecimal","num","isNaN","parseFloat","parseInt","createRandomToken","size","base","r","token","Math","random","newTag","UA","TAG_LENGTH","newUUID","UUID","v","hostType","host","parse","host_type","normalizeTarget","target_array","target_user","target_domain","URI","split","join","escapeUser","user","decodeURIComponent","headerize","part","exceptions","Call-Id","Cseq","Rack","Rseq","Www-Authenticate","hname","parts","substring","sipErrorCause","SIP_ERROR_CAUSES","SIP_FAILURE_CODE","getRandomTestNetIP","getOctet","from","to","floor","getAllowedMethods","event","allowed","ALLOWED_METHODS","EVENT_METHODS","checkListener","calculateMD5","RotateLeft","lValue","iShiftBits","AddUnsigned","lX","lY","lX4","lY4","lX8","lY8","lResult","F","x","y","z","G","H","I","FF","a","b","d","s","ac","GG","HH","II","ConvertToWordArray","lWordCount","lMessageLength","lNumberOfWords_temp1","lNumberOfWords_temp2","lNumberOfWords","lWordArray","lBytePosition","lByteCount","charCodeAt","WordToHex","lByte","lCount","WordToHexValue","WordToHexValue_temp","substr","Utf8Encode","utftext","n","String","fromCharCode","k","AA","BB","CC","DD","S11","S12","S13","S14","S21","S22","S23","S24","S31","S32","S33","S34","S41","S42","S43","S44","temp","category","label","debug","content","error","levels","builtinEnabled","connector","loggers","getLogger","set","JSON","stringify","hasOwnProperty","print","prefix","Date","Event","MAX_LISTENERS","initEvents","initMoreEvents","maxListeners","checkEvent","listener","bindTarget","TypeError","listenerObj","once","listenOnce","arguments","off","splice","setMaxListeners","listeners","err","stack","sender","data","USER_AGENT","SIPS","CONNECTION_ERROR","REQUEST_TIMEOUT","INTERNAL_ERROR","BUSY","REJECTED","REDIRECTED","UNAVAILABLE","NOT_FOUND","ADDRESS_INCOMPLETE","INCOMPATIBLE_SDP","AUTHENTICATION_ERROR","DIALOG_ERROR","WEBRTC_NOT_SUPPORTED","WEBRTC_ERROR","CANCELED","NO_ANSWER","EXPIRES","NO_ACK","NO_PRACK","USER_DENIED_MEDIA_ACCESS","BAD_MEDIA_DESCRIPTION","RTP_TIMEOUT","supported","UNSUPPORTED","SUPPORTED","REQUIRED","ACK","BYE","CANCEL","INFO","INVITE","MESSAGE","NOTIFY","OPTIONS","REGISTER","UPDATE","SUBSCRIBE","REFER","PRACK",100,180,181,182,183,199,200,202,204,300,301,302,305,380,400,401,402,403,404,405,406,407,408,410,412,413,414,415,416,417,420,421,422,423,428,429,430,433,436,437,438,439,440,469,470,478,480,481,482,483,484,485,486,487,488,489,491,493,494,500,501,502,503,504,505,513,580,600,603,604,606,"ConfigurationError","exception","parameter","code","message","InvalidStateError","status","NotSupportedError","NotReadyError","T1","T2","T4","timers","TIMER_B","TIMER_D","TIMER_F","TIMER_H","TIMER_I","TIMER_J","TIMER_K","TIMER_L","TIMER_M","TIMER_N","PROVISIONAL_RESPONSE_INTERVAL","Transport","STATUS_READY","STATUS_DISCONNECTED","STATUS_ERROR","server","ws","reconnection_attempts","closed","connected","reconnectTimer","lastTransportError","connect","send","msg","readyState","WebSocket","OPEN","configuration","disconnect","clearTimeout","ws_uri","close","reason","CONNECTING","onTransportConnecting","binaryType","onopen","onOpen","onclose","onClose","onmessage","onMessage","onerror","onError","onTransportConnected","connected_before","wasClean","onTransportClosed","reConnect","transaction","Uint8Array","evt","Parser","parseMessage","STATUS_USER_CLOSED","IncomingRequest","sanityCheck","receiveRequest","IncomingResponse","method","transactions","ict","via_branch","receiveResponse","nict","wsServerMaxReconnection","wsServerReconnectionTimeout","getHeader","headerStart","partialEnd","match","parseHeader","headerEnd","header","parsed","hcolonIndex","headerName","trim","headerValue","addHeader","getHeaders","via","branch","setHeader","from_tag","getParam","to_tag","position","offset","call_id","cseq","refer_to","firstLine","contentLength","bodyStart","reason_phrase","ruri","hasHeader","OutgoingRequest","IncomingMessage","params","statusCode","reasonPhrase","route_set","usePreloadedRoute","sip_uri","MAX_FORWARDS","to_displayName","to_uri","NameAddrHeader","from_displayName","displayName","from_uri","sipjsId","regexp","RegExp","result","pub_gruu","temp_gruu","rel100","userAgentString","server_transaction","reply","onSuccess","onFailure","rr","vias","hasParam","reply_sl","scheme","port","parameters","param","setParam","key","deleteParam","clearParams","deleteHeader","clearHeaders","clone","name_addr_header","STATUS_TRYING","STATUS_PROCEEDING","STATUS_CALLING","STATUS_ACCEPTED","STATUS_COMPLETED","STATUS_TERMINATED","STATUS_CONFIRMED","NON_INVITE_CLIENT","NON_INVITE_SERVER","INVITE_CLIENT","INVITE_SERVER","NonInviteClientTransaction","request_sender","request","hackViaTcp","viaHost","newTransaction","stateChanged","state","tr","timer_F","K","destroyTransaction","onRequestTimeout","timer_K","InviteClientTransaction","cancel","cancel_request","B","timer_B","D","M","timer_M","timer_D","sendACK","ack","AckClientTransaction","NonInviteServerTransaction","last_response","timer_J","transportError","J","InviteServerTransaction","resendProvisionalTimer","timer_H","timer_I","timer_L","clearInterval","L","resend_provisional","setInterval","checkTransaction","ist","nist","Transactions","RequestSender","dialog","applicant","reattempt","reattemptTimer","owner","clientTransaction","uac_pending_reply","uas_pending_reply","onReadyToReinvite","onDialogError","local_seqnum","Session","getReattemptTimeout","Dialog","STATUS_EARLY","local_tag","remote_tag","remote_seqnum","local_uri","remote_uri","remote_target","invite_seqnum","pracked","reverse","hasOffer","mediaHandler","mediaHandlerFactory","dialogs","update","terminate","peerConnection","createRequest","checkInDialogRequest","retryAfter","sendRequest","credentials","challenged","staled","challenge","authorization_header_name","stale","authenticate","RegisterContext","regId","registrar","registrarServer","expires","registerExpires","instanceId","ClientContext","registrationTimer","registrationExpiredTimer","registered","contacts","unregistered","registrationFailure","registered_before","isReady","getDescription","mediaHint","setDescription","originalTarget","contentType","localIdentity","remoteIdentity","cancel_reason","applicants","ServerContext","progress","accept","DTMF","MIN_DURATION","MAX_DURATION","DEFAULT_DURATION","MIN_INTER_TONE_GAP","DEFAULT_INTER_TONE_GAP","tone","duration","interToneGap","direction","abs","STATUS_WAITING_FOR_ACK","originator","init_incoming","InviteServerContext","InviteClientContext","STATUS_NULL","STATUS_INVITE_SENT","STATUS_1XX_RECEIVED","STATUS_INVITE_RECEIVED","STATUS_WAITING_FOR_ANSWER","STATUS_ANSWERED","STATUS_WAITING_FOR_PRACK","STATUS_CANCELED","STATUS_ANSWERED_WAITING_FOR_PRACK","STATUS_EARLY_MEDIA","earlyDialogs","defaultFactory","hasAnswer","ackTimer","expiresTimer","invite2xxTimer","userNoAnswerTimer","rel1xxTimer","prackTimer","startTime","endTime","tones","local_hold","remote_hold","pending_actions","actions","isPending","shift","pop","early_sdp","dtmf","dtmfs","concat","timeout","bye","terminated","refer","followRefer","callback","targetString","open","Chrome","getsConfusedAboutGUM","referSession","invite","receiveNonInviteResponse","sessions","createDialog","early","early_dialog","failed","dia","isReadyToReinvite","ret","onmute","onunmute","onhold","sendReinvite","mangle","onunhold","local","receiveReinvite","setInvite2xxTimer","setACKTimer","eventHandlers","succeeded","reinviteSucceeded","reinviteFailed","receiveReinviteResponse","reg_tone","reg_duration","hasReferListener","notifyBody","acceptAndTerminate","invite2xxRetransmission","min","action","rejected","canceled","accepted","connecting","set100rel","h","fireNewSession","noAnswerTimeout","contentDisp","renderbody","rendertype","Firefox","cannotHandleExtraWhitespace","AllBrowsers","maskDtls","RTCConstraints","optional","DtlsSrtpKeyAgreement","getRemoteStreams","getLocalStreams","do100rel","isCanceled","rel1xxRetransmission","normalReply","sdpCreationSucceeded","replySucceeded","replyFailed","sdpCreationFailed","confirmSession","requestParams","iceServers","isMediaSupported","isSupported","inviteWithoutSdp","anonymous","outbound","received_100","receiveInviteResponse","configuration_check","offer","cancelReason","sdp","localMedia","hasMissingCLineInSDP","Subscription","N","sub_duration","errorCodes","subscribe","sub","timer_fire","createConfirmedDialog","subscriptions","INVALID_EXPIRES_HEADER","EXPIRES_HEADER_MISSING","unsubscribe","terminateDialog","setExpiresTimeout","sub_state","max","matchEvent","REASON_200","selfEmit","mh","mediaStreamManager","ready","audioMuted","videoMuted","servers","config","urls","credential","RTCPeerConnection","onaddstream","onremovestream","onicecandidate","candidate","onIceCompleted","callOnIceCompleted","onicegatheringstatechange","iceGatheringState","oniceconnectionstatechange","iceConnectionState","onstatechange","writable","signalingState","streamAdditionSucceeded","ondatachannel","dataChannel","channel","createDataChannel","createOfferOrAnswer","acquireSucceeded","addStream","acquire","rawDescription","RTCSessionDescription","setRemoteDescription","isMuted","getAudioTracks","getVideoTracks","toggleMuteAudio","toggleMuteVideo","audioUnMuted","videoUnMuted","pc","localStreams","remoteStreams","renderHint","streamGetters","keys","loc","streamGetter","streams","where","offerState","readySuccess","localDescription","needsExplicitlyInactiveSDP","unmaskDtls","hasIncompatibleCLineWithSomeSIPEndpoints","sdpWrapper","methodName","onSetLocalDescriptionSuccess","methodFailed","sessionDescription","setLocalDescription","toggleMuteHelper","trackGetter","enabled","defaultMediaHint","map","elements","attachAndPlay","element","attachMediaStream","ensureMediaPlaying","src","URL","revokeObjectURL","createObjectURL","srcObject","mozSrcObject","mediaElement","interval","ensurePlayingIntervalId","paused","play","volume","saveSuccess","isHintStream","emitThenCall","eventName","callbackArgs","newArgs","getUserMedia","_isSupported","MediaStream","navigator","STATUS_INIT","STATUS_NOT_READY","CONFIGURATION_ERROR","NETWORK_ERROR","ACCEPTED_BODY_TYPES","len","cache","transportRecoverAttempts","transportRecoveryTimer","transactionsCount","count","nictTransactionsCount","nistTransactionsCount","ictTransactionsCount","istTransactionsCount","loadConfig","registerContext","isConnected","context","mes","req","transactionsListener","subscription","getNextWsServer","hostportParams","saveCredentials","realm","getCredentials","client_transactions","closeSessionsOnTransportError","recoverTransport","attempts","ruriMatches","methodLower","content_type","findDialog","findSession","ws_server","candidates","weight","nextRetry","pow","connectionRecoveryMinInterval","connectionRecoveryMaxInterval","aliasUnderscored","underscored","hasParameter","checked_value","settings","hackIpInContact","hackWssInTransport","mandatory","emptyArraysAllowed","configuration_skeleton","skeleton","configurable","Number","stun_server","turn_server","Function","isFirefox","mozRTCPeerConnection","insertAt","mlines","search","index","rfc3261_8_2_2_1","rfc3261_16_3_4","rfc3261_18_3_request","rfc3261_8_2_2_2","fromTag","rfc3261_8_1_3_3","rfc3261_18_1_2","rfc3261_18_3_response","minimumHeaders","mandatoryHeaders","requests","responses","u","t","pass","cnonce","nc","ncHex","algorithm","nonce","opaque","qop","updateNcHex","calculateResponse","ha1","ha2","auth_params","hex","peg$subclass","child","parent","ctor","SyntaxError","expected","found","column","input","text","peg$reportedPos","peg$currPos","peg$computePosDetails","pos","advance","details","startPos","endPos","ch","seenCR","peg$cachedPos","peg$cachedPosDetails","peg$fail","peg$maxFailPos","peg$maxFailExpected","peg$buildException","cleanupExpected","sort","buildMessage","stringEscape","expectedDesc","foundDesc","expectedDescs","posDetails","peg$decode","bc","peg$parseRule","protect","peg$bytecode","ip","ips","ends","peg$consts","peg$FAILED","peg$silentFails","peg$result","peg$startRuleIndices","Contact","Name_Addr_Header","Record_Route","Request_Response","SIP_URI","Subscription_State","Via","absoluteURI","Call_ID","Content_Disposition","Content_Length","Content_Type","CSeq","From","Max_Forwards","Proxy_Authenticate","quoted_string","Refer_To","stun_URI","To","turn_URI","WWW_Authenticate","peg$startRuleIndex","escaped","contents","uri_params","uri_headers","startRule","uri_scheme","ttl","maddr","pname","pvalue","hvalue","sip_version","multi_header","q","delta_seconds","cseq_value","event_type","tag","forwards","min_expires","qop_value","rack_value","rseq_value","retry_after","via_ttl_value","via_maddr","via_received","received","response_port","rport","via_protocol","protocol","via_transport","via_sent_by_port","handlers","executeListener","list","__emit","utils","DomAudio","sipConfig","lines","userAgent","dom","checkConfig","enums","enumerable","defineProperty","useSecureConnection","document","location","__createLine","sipRTCSession","__clearInactiveLines","getActiveLines","el","isClosed","__disconnectCount","__registerExtraOptions","sipConnected","retryCount","sipDisconnected","newLine","replaces","callId","foundLine","getId","types","incoming","callReplaced","number","inviteOptions","localAudio","remoteAudio","outgoing","cb","isConnecting","setStreamMute","val","tracks","LOCAL_AUDIO","REMOTE_AUDIO","delay","onEnd","timeCallStarted","terminateCallOnDisconnected","sessionId","muted","bothMuted","responseTimeout","controlSender","messages","park","reqid","command","startRecord","stopRecord","flip","monitor","barge","whisper","takeover","onInfo","obj","__receiveRequest","localSDP","callConnecting","__hasEarlyMedia","__receiveInviteReponse","__waitingForIce","sessionSelf","hasEarlyMedia","ICECompleted","ICEFailed","callProgress","callStarted","callRejected","callTerminated","onStateChange","__doubleCompleted","ICEConnected","ICEDisconnected","__ignoreReinviteDuplicates","__sendReinvite","res","__reinviteSucceeded","__reinviteFailed","callReinviteSucceeded","callReinviteFailed","__receiveReinviteResponse","getSession","record","peer","dtmfSender","createDTMFSender","canInsertDTMF","insertDTMF","sendInfoDTMF","blindTransfer","onNotify","forward","onAnswered","onFail","callMute","callUnmute","setMuteBoth","__legacyHold","__hold","onSucceeded","onFailed","callHold","callUnhold","isOnMute","isOnRecord","getContact","getCallDuration","getTime","ms","deferred","dst","copy","sipConnecting","ICEChecking","ICEClosed","createElement","LOCAL_AUDIO_ID","REMOTE_AUDIO_ID","setAttribute","appendChild","localAudioId","remoteAudioId","rcSIPUA","_rcSIPUA","_incoming","_outgoing","_audio","playIncoming","playOutgoing","_playSound","reset","loop","emitter","Audio","currentTime","resumed","pause","resume","ceil","load","prop"],"mappings":"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","file":"ringcentral-web-phone.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"WebPhone\"] = factory();\n\telse\n\t\troot[\"RingCentral\"] = root[\"RingCentral\"] || {}, root[\"RingCentral\"][\"WebPhone\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"WebPhone\"] = factory();\n\telse\n\t\troot[\"RingCentral\"] = root[\"RingCentral\"] || {}, root[\"RingCentral\"][\"WebPhone\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__(1);\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\nvar SIP = __webpack_require__(2);\nvar EventEmitter = __webpack_require__(35);\nvar UserAgent = __webpack_require__(36);\nvar PhoneLine = __webpack_require__(37);\nvar AudioHelper = __webpack_require__(41);\nvar defer = __webpack_require__(38).defer;\nvar uuid = __webpack_require__(38).uuid;\nvar extend = __webpack_require__(38).extend;\nvar EVENT_NAMES = __webpack_require__(39);\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n/*--------------------------------------------------------------------------------------------------------------------*/\n\n//Patching proto because of https://developers.google.com/web/updates/2015/07/mediastream-deprecations\nvar mediaStreamManagerProto = Object.create(SIP.WebRTC.MediaStreamManager.prototype, {\n    'release': {\n        value: function release(stream) {\n            var streamId = SIP.WebRTC.MediaStreamManager.streamId(stream);\n            if (this.acquisitions[streamId] === false) {\n                //MediaStream.stop removed in M47\n                if (typeof (stream.stop) === 'function') {\n                    stream.stop();\n                }\n                else {\n                    stream.getTracks().forEach(function(track) {\n                        track.stop()\n                    });\n                }\n            }\n            delete this.acquisitions[streamId];\n        }\n    }\n});\n\nSIP.WebRTC.MediaStreamManager.prototype = mediaStreamManagerProto;\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n/*--------------------------------------------------------------------------------------------------------------------*/\n\n/**\n * @namespace RingCentral\n * @param {boolean} [options.audioHelper] Automatically create audio helper\n * @param {string} [options.uuid] Instance ID\n * @constructor\n */\nfunction WebPhone(options) {\n\n    options = options || {};\n\n    var service = this;\n\n    this.__registerDeferred = undefined;\n    this.__unregisterDeferred = undefined;\n    this.__callDeferred = undefined;\n    this.__sipRegistered = false;\n    this.__sipOutboundEnabled = false;\n\n    if (options.uuid) {\n        this.uuid = options.uuid;\n    } else {\n        localStorage['rc-webPhone-uuid'] = localStorage['rc-webPhone-uuid'] || uuid();\n        this.uuid = localStorage['rc-webPhone-uuid'];\n    }\n\n    this.activeLine = null;\n\n    this.onMute = false;\n    this.onHold = false;\n    this.onRecord = false;\n    this.contact = undefined;\n\n    var ua = new UserAgent();\n\n    this.ua = ua;\n    this.on = ua.on.bind(ua);\n\n    this.username = null;\n\n    this.isRegistered = false;\n    this.isRegistering = false;\n    this.isUnregistering = false;\n\n    this.events = EVENT_NAMES;\n\n    this.causes = SIP.C.causes;\n    this.reasons = SIP.C.REASON_PHRASE;\n\n    //naming convention: incoming or sipincoming?\n    service.on(EVENT_NAMES.sipIncomingCall, function(line) {\n        service.ua.eventEmitter.emit(EVENT_NAMES.incomingCall, line);\n    });\n\n    //naming convention: outgoing or sipoutgoing?\n    service.on(EVENT_NAMES.outgoingCall, function(line) {\n        if (service.activeLine && !service.activeLine.isOnHold()) {\n            service.activeLine.setHold();\n        }\n        service.__callDeferred && service.__callDeferred.resolve(line);\n        service.__callDeferred = null;\n    });\n\n    //naming convention: call or line?\n    service.on([EVENT_NAMES.callEnded, EVENT_NAMES.callFailed], function(call) {\n        //delete activeLine property if the call has ended on the other side\n        if (call && service.activeLine && call === service.activeLine) {\n            service.activeLine = null;\n        }\n    });\n\n    // On Call Failed due to 503 Invite Connection error reconnect the call\n    service.on(EVENT_NAMES.callFailed, function(call, response, cause) {\n        if (response) {\n            switch (true) {\n                //[WRTC-424] Should reconnect the websocket if received 503 on INVITE\n                case (/^503$/.test(response.status_code)):\n                    //This method will throw 'Connection Error', so we just remove it\n                    call.session.onTransportError = function() {};\n                    //Re-register after 500ms\n                    setTimeout(service.reregister.bind(service, true), 500);\n                    break;\n            }\n        }\n    });\n\n\n    // Setting flags for SIP Registration process\n    service.on(EVENT_NAMES.sipRegistered, function(e) {\n        service.__sipRegistered = true;\n        service.__registerDeferred && service.__registerDeferred.resolve(e);\n        service.isRegistered = true;\n        service.isRegistering = false;\n        service.isUnregistering = false;\n        service.isUnregistered = false;\n    });\n\n    service.on([EVENT_NAMES.sipRegistrationFailed, EVENT_NAMES.sipConnectionFailed], function(e) {\n        service.__sipRegistered = false;\n        service.__registerDeferred && service.__registerDeferred.reject(e);\n        service.isRegistered = false;\n        service.isRegistering = false;\n        service.isUnregistering = false;\n        service.isUnregistered = false;\n    });\n\n    service.on(EVENT_NAMES.sipUnRegistered, function(e) {\n        service.__sipRegistered = false;\n        service.__unregisterDeferred && service.__unregisterDeferred.resolve(e);\n        service.isRegistered = false;\n        service.isRegistering = false;\n        service.isUnregistered = true;\n        service.isUnregistering = false;\n    });\n\n    window.addEventListener('unload', function() {\n        service.hangup();\n        service.unregister();\n    });\n\n    this._audioHelper = null;\n    if (options.audioHelper) service.createAudioHelper();\n\n}\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nWebPhone.version = '0.1.0';\n\nWebPhone.PhoneLine = PhoneLine;\nWebPhone.EventEmitter = EventEmitter;\nWebPhone.UserAgent = UserAgent;\nWebPhone.AudioHelper = AudioHelper;\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\n/**\n * @param [options]\n * @return {AudioHelper}\n */\nWebPhone.prototype.createAudioHelper = function(options) {\n    if (!this._audioHelper) {\n        console.log('Helper Created');\n        this._audioHelper = new AudioHelper(this, options);\n    }\n    return this._audioHelper;\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nWebPhone.prototype.register = function(info, checkFlags) {\n\n    try {\n        var service = this;\n\n        // console.log(\"Sip Data\"+JSON.stringify(data));\n\n        if (!checkFlags || (\n            typeof(info.sipFlags) === 'object' &&\n                //checking for undefined for platform v7.3, which doesn't support this flag\n            (info.sipFlags.outboundCallsEnabled === undefined || info.sipFlags.outboundCallsEnabled === true))\n        ) {\n\n            // Access SIP flags\n            this.__sipOutboundEnabled = info.sipFlags.outboundCallsEnabled;\n\n            // console.log('SIP Provision data', data+'\\n');\n            info = info.sipInfo[0];\n\n        } else {\n            throw new Error('ERROR.sipOutboundNotAvailable'); //FIXME Better error reporting...\n        }\n\n        var headers = [];\n        var endpointId = this.uuid;\n        if (endpointId) {\n            headers.push('P-rc-endpoint-id: ' + endpointId);\n        }\n\n        extend(info, {\n            extraHeaders: headers\n        });\n\n        if (service.isRegistered) {\n            console.warn('Already registered, please unregister the UA first');\n            return service.__registerDeferred.promise;\n        }\n\n        if (service.isRegistering) {\n            console.warn('Already registering the UA');\n            return service.__registerDeferred.promise;\n        }\n\n        service.__registerDeferred = defer();\n        service.isRegistering = true;\n        service.isRegistered = false;\n\n        //compatability properties\n        info.wsServers = info.outboundProxy && info.transport\n            ? info.transport.toLowerCase() + '://' + info.outboundProxy\n            : info.wsServers;\n        info.domain = info.domain || info.sipDomain;\n        info.username = info.username || info.userName;\n        info.extraHeaders = Array.isArray(info.extraHeaders) ? info.extraHeaders : [];\n\n        var options = {\n            wsServers: info.wsServers,\n            uri: \"sip:\" + info.username + \"@\" + info.domain,\n            password: info.password,\n            authorizationUser: info.authorizationId,\n            traceSip: true,\n            stunServers: info.stunServers || ['stun:74.125.194.127:19302'],\n            turnServers: [],\n            log: {\n                level: 1 //FIXME LOG LEVEL 3\n            },\n            domain: info.domain,\n            autostart: false,   //turn off autostart on UA creation\n            register: false,     //turn off auto register on UA creation,\n            iceGatheringTimeout: info.iceGatheringTimeout || 3000\n        };\n\n        service.username = info.userName;\n        service.ua.setSIPConfig(options);\n        service.ua.start({\n            extraHeaders: info.extraHeaders\n        });\n    }\n    catch (e) {\n        service.isRegistering = false;\n        service.isRegistered = false;\n        return Promise.reject(e);\n    }\n\n    return service.__registerDeferred.promise;\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nWebPhone.prototype.reregister = function(reconnect) {\n    var service = this;\n    if (service.isRegistering) return service.__registerDeferred;\n    service.__registerDeferred = defer();\n    service.isRegistering = true;\n    service.ua.reregister({}, !!reconnect);\n    return service.__registerDeferred.promise;\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nWebPhone.prototype.unregister = function() {\n    var service = this;\n    if (service.isRegistering) {\n        service.ua.forceDisconnect();\n        service.isRegistering = false;\n        service.isUnregistering = false;\n        service.isRegistered = false;\n        service.isUnregistered = true;\n    }\n\n    if (service.isUnregistered || service.isUnregistering) return service.__unregisterDeferred;\n\n    service.isUnregistering = true;\n    service.isUnregistered = false;\n\n    service.__unregisterDeferred = defer();\n    if (service.__sipRegistered) {\n        service.ua.stop();\n    }\n    else {\n        service.__unregisterDeferred.resolve(null);\n    }\n    return service.__unregisterDeferred.promise.catch(function() {\n        return null;\n    });\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nWebPhone.prototype.forceDisconnect = function() {\n    this.ua.forceDisconnect();\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nWebPhone.prototype.call = function(toNumber, fromNumber, country) {\n\n    var service = this;\n    if(!this.__sipOutboundEnabled || false === Boolean(this.__sipOutboundEnabled)) {\n        throw new Error('Outbound calling is disabled'); // TODO: Fix this to be more robust error messaging\n    }\n\n    if(!toNumber)\n        throw new Error('Invalid or undefined [toNumber]');\n\n    if (!service.__callDeferred) {\n        service.__callDeferred = defer();\n        this.activeLine = service.ua.call.call(service.ua, toNumber, {\n            fromNumber: fromNumber,\n            country: country\n        });\n    }\n    return service.__callDeferred;\n};\n\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nWebPhone.prototype.answer = function(line) {\n        var incomingLines = this.ua.getIncomingLinesArray();\n        var activeLines = this.ua.getActiveLinesArray();\n        var self = this;\n\n        if (!line) {\n            line = incomingLines.length > 0 && arr[0];\n        }\n\n        if (line) {\n            var promises = [];\n            activeLines.forEach(function(activeLine) {\n                if (activeLine !== line) {\n                    !activeLine.isOnHold() && promises.push(activeLine.setHold(true));\n                }\n            });\n            Promise.all(promises).then(function() {\n                self.activeLine = line;\n                self.ua.answer(line);\n            }, function(e) {\n                self.hangup(line);\n            });\n        }\n\n        return Promise.resolve(null);\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nWebPhone.prototype.onCall = function() {\n    return this.ua.getActiveLinesArray().filter(function(line) {\n            return line.onCall;\n        }).length > 0;\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n/***\n * deprecated\n * @param line\n * @returns {*}\n */\nWebPhone.prototype.hangup = function(line) {\n    var self = this;\n    return new Promise(function(resolve, reject){\n        line = self.getLine(line);\n        self.ua.hangup(line);\n        if (line === self.activeLine) self.activeLine = null;\n        return null;\n    });\n};\n\nWebPhone.prototype.getLine = function(line) {\n    if (!line) line = this.activeLine;\n    if (!line) throw new Error('No line or no active line');\n    return line;\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\n//FIXME: Check if we can replace this with  SIPJS dtmf(tone,[options]) ref: http://sipjs.com/api/0.7.0/session/#dtmftone-options\n/***\n * deprecated\n * @param value\n * @param line\n * @returns {*}\n */\nWebPhone.prototype.sendDTMF = function(value, line) {\n    var self = this;\n    return new Promise(function(resolve, reject){\n        line = self.getLine(line);\n        line && line.sendDTMF.call(line, value);\n        return null;\n    });\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n/***\n * deprecated\n * @param line\n * @returns {*}\n */\nWebPhone.prototype.hold = function(line) {\n    var self = this;\n    return new Promise(function(resolve, reject){\n        line = self.getLine(line);\n        line && line.setHold(true);\n        if (line === self.activeLine) self.activeLine = null;\n        return null;\n    });\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n/***\n * deprecated\n * @param line\n * @returns {*}\n */\nWebPhone.prototype.unhold = function(line) {\n    var self = this;\n    return new Promise(function(resolve, reject){\n        line = self.getLine(line);\n        if (line) {\n            self.ua.getActiveLinesArray().forEach(function (activeLine) {\n                if (activeLine !== line && !activeLine.isIncoming() && !activeLine.isOnHold()) {\n                    activeLine.setHold(true);\n                }\n            });\n            line.setHold(false);\n            self.activeLine = line;\n        }\n        return null;\n    });\n};\n\n////FIXME: Use SIPJS mute() and unmute() ref:http://sipjs.com/api/0.7.0/session/#muteoptions\n/*--------------------------------------------------------------------------------------------------------------------*/\n/***\n * deprecated\n * @param line\n * @returns {*}\n */\nWebPhone.prototype.mute = function(line) {\n    var self = this;\n    return new Promise(function(resolve, reject){\n        line = self.getLine(line);\n        line && line.setMute(true);\n        return null;\n    });\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n/***\n * deprecated\n * @param line\n * @returns {*}\n */\nWebPhone.prototype.unmute = function(line) {\n    var self = this;\n    return new Promise(function(resolve, reject){\n        line = self.getLine(line);\n        line && line.setMute(false);\n        return null;\n    });\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n/***\n * deprecated\n * @param line\n * @param target\n * @param options\n * @returns {*}\n */\n//Phone-line->transfer->blindTransfer\nWebPhone.prototype.transfer = function(line, target, options) {\n    var self = this;\n    return new Promise(function(resolve, reject){\n        line = self.getLine(line);\n        line && line.transfer(target, options);\n        if (line === self.activeLine) self.activeLine = null;\n        return null;\n    });\n};\n\nmodule.exports = WebPhone;\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n/* WEBPACK VAR INJECTION */(function(global) {/**\n * @name SIP\n * @namespace\n */\nmodule.exports = (function(window) {\n  \"use strict\";\n\n  var SIP = {};\n\n  var pkg = __webpack_require__(3);\n\n  Object.defineProperties(SIP, {\n    version: {\n      get: function(){ return pkg.version; }\n    },\n    name: {\n      get: function(){ return pkg.title; }\n    }\n  });\n\n  __webpack_require__(4)(SIP);\n  var Logger = __webpack_require__(5);\n  SIP.LoggerFactory = __webpack_require__(6)(window, Logger);\n  __webpack_require__(7)(SIP);\n  SIP.C = __webpack_require__(8)(SIP.name, SIP.version);\n  SIP.Exceptions = __webpack_require__(9);\n  SIP.Timers = __webpack_require__(10)(window);\n  __webpack_require__(11)(SIP, window);\n  __webpack_require__(12)(SIP);\n  __webpack_require__(13)(SIP);\n  __webpack_require__(14)(SIP);\n  __webpack_require__(15)(SIP);\n  __webpack_require__(16)(SIP, window);\n  var DialogRequestSender = __webpack_require__(17)(SIP, window);\n  __webpack_require__(18)(SIP, DialogRequestSender);\n  __webpack_require__(19)(SIP);\n  __webpack_require__(20)(SIP, window);\n  SIP.MediaHandler = __webpack_require__(21)(SIP.EventEmitter);\n  __webpack_require__(22)(SIP);\n  __webpack_require__(23)(SIP);\n  var SessionDTMF = __webpack_require__(24)(SIP);\n  __webpack_require__(25)(SIP, window, SessionDTMF);\n  __webpack_require__(26)(SIP, window);\n  var WebRTCMediaHandler = __webpack_require__(27)(SIP);\n  var WebRTCMediaStreamManager = __webpack_require__(28)(SIP);\n  SIP.WebRTC = __webpack_require__(29)(SIP.Utils, window, WebRTCMediaHandler, WebRTCMediaStreamManager);\n  __webpack_require__(30)(SIP, window);\n  SIP.Hacks = __webpack_require__(31)(SIP);\n  __webpack_require__(32)(SIP);\n  SIP.DigestAuthentication = __webpack_require__(33)(SIP.Utils);\n  SIP.Grammar = __webpack_require__(34)(SIP);\n\n  return SIP;\n})((typeof window !== 'undefined') ? window : global);\n\n/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))\n\n/***/ },\n/* 3 */\n/***/ function(module, exports) {\n\nmodule.exports = {\n\t\"_args\": [\n\t\t[\n\t\t\t\"sip.js@0.6.4\",\n\t\t\t\"/Users/vyshakh.babji/Desktop/WebRTC/kirill-webphone/web-phone-1\"\n\t\t]\n\t],\n\t\"_from\": \"sip.js@0.6.4\",\n\t\"_id\": \"sip.js@0.6.4\",\n\t\"_inCache\": true,\n\t\"_installable\": true,\n\t\"_location\": \"/sip.js\",\n\t\"_npmUser\": {\n\t\t\"email\": \"eric.green@onsip.com\",\n\t\t\"name\": \"egreen_onsip\"\n\t},\n\t\"_npmVersion\": \"1.4.13\",\n\t\"_phantomChildren\": {},\n\t\"_requested\": {\n\t\t\"name\": \"sip.js\",\n\t\t\"raw\": \"sip.js@0.6.4\",\n\t\t\"rawSpec\": \"0.6.4\",\n\t\t\"scope\": null,\n\t\t\"spec\": \"0.6.4\",\n\t\t\"type\": \"version\"\n\t},\n\t\"_requiredBy\": [\n\t\t\"/\"\n\t],\n\t\"_resolved\": \"https://registry.npmjs.org/sip.js/-/sip.js-0.6.4.tgz\",\n\t\"_shasum\": \"e080d4b0fa1a7dd803741d6bca6d32c29ae37380\",\n\t\"_shrinkwrap\": null,\n\t\"_spec\": \"sip.js@0.6.4\",\n\t\"_where\": \"/Users/vyshakh.babji/Desktop/WebRTC/kirill-webphone/web-phone-1\",\n\t\"author\": {\n\t\t\"email\": \"will@onsip.com\",\n\t\t\"name\": \"Will Mitchell\"\n\t},\n\t\"bugs\": {\n\t\t\"url\": \"https://github.com/onsip/SIP.js/issues\"\n\t},\n\t\"contributors\": [\n\t\t{\n\t\t\t\"url\": \"http://sipjs.com/authors/\"\n\t\t}\n\t],\n\t\"dependencies\": {},\n\t\"description\": \"A simple, intuitive, and powerful JavaScript signaling library\",\n\t\"devDependencies\": {\n\t\t\"browserify\": \"^4.1.8\",\n\t\t\"grunt\": \"~0.4.0\",\n\t\t\"grunt-browserify\": \"^2.1.0\",\n\t\t\"grunt-cli\": \"~0.1.6\",\n\t\t\"grunt-contrib-copy\": \"^0.5.0\",\n\t\t\"grunt-contrib-jasmine\": \"~0.6.0\",\n\t\t\"grunt-contrib-jshint\": \">0.5.0\",\n\t\t\"grunt-contrib-uglify\": \"~0.2.0\",\n\t\t\"grunt-peg\": \"~1.3.1\",\n\t\t\"grunt-trimtrailingspaces\": \"^0.4.0\",\n\t\t\"node-minify\": \"~0.7.2\",\n\t\t\"pegjs\": \"0.8.0\",\n\t\t\"sdp-transform\": \"~0.4.0\"\n\t},\n\t\"directories\": {},\n\t\"dist\": {\n\t\t\"shasum\": \"e080d4b0fa1a7dd803741d6bca6d32c29ae37380\",\n\t\t\"tarball\": \"http://registry.npmjs.org/sip.js/-/sip.js-0.6.4.tgz\"\n\t},\n\t\"engines\": {\n\t\t\"node\": \">=0.8\"\n\t},\n\t\"gitHead\": \"209fb9bb50f1918522d37a002b83f21abd6946ab\",\n\t\"homepage\": \"http://sipjs.com\",\n\t\"keywords\": [\n\t\t\"javascript\",\n\t\t\"library\",\n\t\t\"sip\",\n\t\t\"webrtc\",\n\t\t\"websocket\"\n\t],\n\t\"license\": \"MIT\",\n\t\"main\": \"src/SIP.js\",\n\t\"maintainers\": [\n\t\t{\n\t\t\t\"name\": \"joseph-onsip\",\n\t\t\t\"email\": \"joseph@onsip.com\"\n\t\t},\n\t\t{\n\t\t\t\"name\": \"egreen_onsip\",\n\t\t\t\"email\": \"eric.green@onsip.com\"\n\t\t}\n\t],\n\t\"name\": \"sip.js\",\n\t\"optionalDependencies\": {},\n\t\"readme\": \"ERROR: No README data found!\",\n\t\"repository\": {\n\t\t\"type\": \"git\",\n\t\t\"url\": \"git+https://github.com/onsip/SIP.js.git\"\n\t},\n\t\"scripts\": {\n\t\t\"test\": \"grunt travis --verbose\"\n\t},\n\t\"title\": \"SIP.js\",\n\t\"version\": \"0.6.4\"\n};\n\n/***/ },\n/* 4 */\n/***/ function(module, exports) {\n\n/* WEBPACK VAR INJECTION */(function(global) {/**\n * @fileoverview Utils\n */\n\nmodule.exports = function (SIP) {\nvar Utils;\n\nUtils= {\n\n  augment: function (object, constructor, args, override) {\n    var idx, proto;\n\n    // Add public properties from constructor's prototype onto object\n    proto = constructor.prototype;\n    for (idx in proto) {\n      if (override || object[idx] === undefined) {\n        object[idx] = proto[idx];\n      }\n    }\n\n    // Construct the object as though it were just created by constructor\n    constructor.apply(object, args);\n  },\n\n  optionsOverride: function (options, winner, loser, isDeprecated, logger, defaultValue) {\n    if (isDeprecated && options[loser]) {\n      logger.warn(loser + ' is deprecated, please use ' + winner + ' instead');\n    }\n\n    if (options[winner] && options[loser]) {\n      logger.warn(winner + ' overriding ' + loser);\n    }\n\n    options[winner] = options[winner] || options[loser] || defaultValue;\n  },\n\n  desugarSessionOptions: function desugarSessionOptions (options) {\n    if (global.HTMLMediaElement && options instanceof global.HTMLMediaElement) {\n      options = {\n        media: {\n          constraints: {\n            audio: true,\n            video: options.tagName === 'VIDEO'\n          },\n          render: {\n            remote: {\n              video: options\n            }\n          }\n        }\n      };\n    }\n    return options;\n  },\n\n  str_utf8_length: function(string) {\n    return encodeURIComponent(string).replace(/%[A-F\\d]{2}/g, 'U').length;\n  },\n\n  getPrefixedProperty: function (object, name) {\n    if (object == null) {\n      return;\n    }\n    var capitalizedName = name.charAt(0).toUpperCase() + name.slice(1);\n    var prefixedNames = [name, 'webkit' + capitalizedName, 'moz' + capitalizedName];\n    for (var i in prefixedNames) {\n      var property = object[prefixedNames[i]];\n      if (property) {\n        return property;\n      }\n    }\n  },\n\n  generateFakeSDP: function(body) {\n    if (!body) {\n      return;\n    }\n\n    var start = body.indexOf('o=');\n    var end = body.indexOf('\\r\\n', start);\n\n    return 'v=0\\r\\n' + body.slice(start, end) + '\\r\\ns=-\\r\\nt=0 0\\r\\nc=IN IP4 0.0.0.0';\n  },\n\n  isFunction: function(fn) {\n    if (fn !== undefined) {\n      return Object.prototype.toString.call(fn) === '[object Function]';\n    } else {\n      return false;\n    }\n  },\n\n  isDecimal: function (num) {\n    return !isNaN(num) && (parseFloat(num) === parseInt(num,10));\n  },\n\n  createRandomToken: function(size, base) {\n    var i, r,\n      token = '';\n\n    base = base || 32;\n\n    for( i=0; i < size; i++ ) {\n      r = Math.random() * base|0;\n      token += r.toString(base);\n    }\n\n    return token;\n  },\n\n  newTag: function() {\n    return SIP.Utils.createRandomToken(SIP.UA.C.TAG_LENGTH);\n  },\n\n  // http://stackoverflow.com/users/109538/broofa\n  newUUID: function() {\n    var UUID =  'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n      var r = Math.random()*16|0, v = c === 'x' ? r : (r&0x3|0x8);\n      return v.toString(16);\n    });\n\n    return UUID;\n  },\n\n  hostType: function(host) {\n    if (!host) {\n      return;\n    } else {\n      host = SIP.Grammar.parse(host,'host');\n      if (host !== -1) {\n        return host.host_type;\n      }\n    }\n  },\n\n  /**\n  * Normalize SIP URI.\n  * NOTE: It does not allow a SIP URI without username.\n  * Accepts 'sip', 'sips' and 'tel' URIs and convert them into 'sip'.\n  * Detects the domain part (if given) and properly hex-escapes the user portion.\n  * If the user portion has only 'tel' number symbols the user portion is clean of 'tel' visual separators.\n  * @private\n  * @param {String} target\n  * @param {String} [domain]\n  */\n  normalizeTarget: function(target, domain) {\n    var uri, target_array, target_user, target_domain;\n\n    // If no target is given then raise an error.\n    if (!target) {\n      return;\n    // If a SIP.URI instance is given then return it.\n    } else if (target instanceof SIP.URI) {\n      return target;\n\n    // If a string is given split it by '@':\n    // - Last fragment is the desired domain.\n    // - Otherwise append the given domain argument.\n    } else if (typeof target === 'string') {\n      target_array = target.split('@');\n\n      switch(target_array.length) {\n        case 1:\n          if (!domain) {\n            return;\n          }\n          target_user = target;\n          target_domain = domain;\n          break;\n        case 2:\n          target_user = target_array[0];\n          target_domain = target_array[1];\n          break;\n        default:\n          target_user = target_array.slice(0, target_array.length-1).join('@');\n          target_domain = target_array[target_array.length-1];\n      }\n\n      // Remove the URI scheme (if present).\n      target_user = target_user.replace(/^(sips?|tel):/i, '');\n\n      // Remove 'tel' visual separators if the user portion just contains 'tel' number symbols.\n      if (/^[\\-\\.\\(\\)]*\\+?[0-9\\-\\.\\(\\)]+$/.test(target_user)) {\n        target_user = target_user.replace(/[\\-\\.\\(\\)]/g, '');\n      }\n\n      // Build the complete SIP URI.\n      target = SIP.C.SIP + ':' + SIP.Utils.escapeUser(target_user) + '@' + target_domain;\n\n      // Finally parse the resulting URI.\n      if (uri = SIP.URI.parse(target)) {\n        return uri;\n      } else {\n        return;\n      }\n    } else {\n      return;\n    }\n  },\n\n  /**\n  * Hex-escape a SIP URI user.\n  * @private\n  * @param {String} user\n  */\n  escapeUser: function(user) {\n    // Don't hex-escape ':' (%3A), '+' (%2B), '?' (%3F\"), '/' (%2F).\n    return encodeURIComponent(decodeURIComponent(user)).replace(/%3A/ig, ':').replace(/%2B/ig, '+').replace(/%3F/ig, '?').replace(/%2F/ig, '/');\n  },\n\n  headerize: function(string) {\n    var exceptions = {\n      'Call-Id': 'Call-ID',\n      'Cseq': 'CSeq',\n      'Rack': 'RAck',\n      'Rseq': 'RSeq',\n      'Www-Authenticate': 'WWW-Authenticate'\n      },\n      name = string.toLowerCase().replace(/_/g,'-').split('-'),\n      hname = '',\n      parts = name.length, part;\n\n    for (part = 0; part < parts; part++) {\n      if (part !== 0) {\n        hname +='-';\n      }\n      hname += name[part].charAt(0).toUpperCase()+name[part].substring(1);\n    }\n    if (exceptions[hname]) {\n      hname = exceptions[hname];\n    }\n    return hname;\n  },\n\n  sipErrorCause: function(status_code) {\n    var cause;\n\n    for (cause in SIP.C.SIP_ERROR_CAUSES) {\n      if (SIP.C.SIP_ERROR_CAUSES[cause].indexOf(status_code) !== -1) {\n        return SIP.C.causes[cause];\n      }\n    }\n\n    return SIP.C.causes.SIP_FAILURE_CODE;\n  },\n\n  /**\n  * Generate a random Test-Net IP (http://tools.ietf.org/html/rfc5735)\n  * @private\n  */\n  getRandomTestNetIP: function() {\n    function getOctet(from,to) {\n      return Math.floor(Math.random()*(to-from+1)+from);\n    }\n    return '192.0.2.' + getOctet(1, 254);\n  },\n\n  getAllowedMethods: function(ua) {\n    var event,\n      allowed = SIP.UA.C.ALLOWED_METHODS.toString();\n\n    for (event in SIP.UA.C.EVENT_METHODS) {\n      if (ua.checkListener(event)) {\n        allowed += ','+ SIP.UA.C.EVENT_METHODS[event];\n      }\n    }\n\n    return allowed;\n  },\n\n  // MD5 (Message-Digest Algorithm) http://www.webtoolkit.info\n  calculateMD5: function(string) {\n    function RotateLeft(lValue, iShiftBits) {\n      return (lValue<<iShiftBits) | (lValue>>>(32-iShiftBits));\n    }\n\n    function AddUnsigned(lX,lY) {\n      var lX4,lY4,lX8,lY8,lResult;\n      lX8 = (lX & 0x80000000);\n      lY8 = (lY & 0x80000000);\n      lX4 = (lX & 0x40000000);\n      lY4 = (lY & 0x40000000);\n      lResult = (lX & 0x3FFFFFFF)+(lY & 0x3FFFFFFF);\n      if (lX4 & lY4) {\n        return (lResult ^ 0x80000000 ^ lX8 ^ lY8);\n      }\n      if (lX4 | lY4) {\n        if (lResult & 0x40000000) {\n          return (lResult ^ 0xC0000000 ^ lX8 ^ lY8);\n        } else {\n          return (lResult ^ 0x40000000 ^ lX8 ^ lY8);\n        }\n      } else {\n        return (lResult ^ lX8 ^ lY8);\n      }\n    }\n\n    function F(x,y,z) {\n      return (x & y) | ((~x) & z);\n    }\n\n    function G(x,y,z) {\n      return (x & z) | (y & (~z));\n    }\n\n    function H(x,y,z) {\n      return (x ^ y ^ z);\n    }\n\n    function I(x,y,z) {\n      return (y ^ (x | (~z)));\n    }\n\n    function FF(a,b,c,d,x,s,ac) {\n      a = AddUnsigned(a, AddUnsigned(AddUnsigned(F(b, c, d), x), ac));\n      return AddUnsigned(RotateLeft(a, s), b);\n    }\n\n    function GG(a,b,c,d,x,s,ac) {\n      a = AddUnsigned(a, AddUnsigned(AddUnsigned(G(b, c, d), x), ac));\n      return AddUnsigned(RotateLeft(a, s), b);\n    }\n\n    function HH(a,b,c,d,x,s,ac) {\n      a = AddUnsigned(a, AddUnsigned(AddUnsigned(H(b, c, d), x), ac));\n      return AddUnsigned(RotateLeft(a, s), b);\n    }\n\n    function II(a,b,c,d,x,s,ac) {\n      a = AddUnsigned(a, AddUnsigned(AddUnsigned(I(b, c, d), x), ac));\n      return AddUnsigned(RotateLeft(a, s), b);\n    }\n\n    function ConvertToWordArray(string) {\n      var lWordCount;\n      var lMessageLength = string.length;\n      var lNumberOfWords_temp1=lMessageLength + 8;\n      var lNumberOfWords_temp2=(lNumberOfWords_temp1-(lNumberOfWords_temp1 % 64))/64;\n      var lNumberOfWords = (lNumberOfWords_temp2+1)*16;\n      var lWordArray=Array(lNumberOfWords-1);\n      var lBytePosition = 0;\n      var lByteCount = 0;\n      while ( lByteCount < lMessageLength ) {\n        lWordCount = (lByteCount-(lByteCount % 4))/4;\n        lBytePosition = (lByteCount % 4)*8;\n        lWordArray[lWordCount] = (lWordArray[lWordCount] | (string.charCodeAt(lByteCount)<<lBytePosition));\n        lByteCount++;\n      }\n      lWordCount = (lByteCount-(lByteCount % 4))/4;\n      lBytePosition = (lByteCount % 4)*8;\n      lWordArray[lWordCount] = lWordArray[lWordCount] | (0x80<<lBytePosition);\n      lWordArray[lNumberOfWords-2] = lMessageLength<<3;\n      lWordArray[lNumberOfWords-1] = lMessageLength>>>29;\n      return lWordArray;\n    }\n\n    function WordToHex(lValue) {\n      var WordToHexValue=\"\",WordToHexValue_temp=\"\",lByte,lCount;\n      for (lCount = 0;lCount<=3;lCount++) {\n        lByte = (lValue>>>(lCount*8)) & 255;\n        WordToHexValue_temp = \"0\" + lByte.toString(16);\n        WordToHexValue = WordToHexValue + WordToHexValue_temp.substr(WordToHexValue_temp.length-2,2);\n      }\n      return WordToHexValue;\n    }\n\n    function Utf8Encode(string) {\n      string = string.replace(/\\r\\n/g,\"\\n\");\n      var utftext = \"\";\n\n      for (var n = 0; n < string.length; n++) {\n        var c = string.charCodeAt(n);\n\n        if (c < 128) {\n          utftext += String.fromCharCode(c);\n        }\n        else if((c > 127) && (c < 2048)) {\n          utftext += String.fromCharCode((c >> 6) | 192);\n          utftext += String.fromCharCode((c & 63) | 128);\n        }\n        else {\n          utftext += String.fromCharCode((c >> 12) | 224);\n          utftext += String.fromCharCode(((c >> 6) & 63) | 128);\n          utftext += String.fromCharCode((c & 63) | 128);\n        }\n      }\n      return utftext;\n    }\n\n    var x=[];\n    var k,AA,BB,CC,DD,a,b,c,d;\n    var S11=7, S12=12, S13=17, S14=22;\n    var S21=5, S22=9 , S23=14, S24=20;\n    var S31=4, S32=11, S33=16, S34=23;\n    var S41=6, S42=10, S43=15, S44=21;\n\n    string = Utf8Encode(string);\n\n    x = ConvertToWordArray(string);\n\n    a = 0x67452301; b = 0xEFCDAB89; c = 0x98BADCFE; d = 0x10325476;\n\n    for (k=0;k<x.length;k+=16) {\n      AA=a; BB=b; CC=c; DD=d;\n      a=FF(a,b,c,d,x[k+0], S11,0xD76AA478);\n      d=FF(d,a,b,c,x[k+1], S12,0xE8C7B756);\n      c=FF(c,d,a,b,x[k+2], S13,0x242070DB);\n      b=FF(b,c,d,a,x[k+3], S14,0xC1BDCEEE);\n      a=FF(a,b,c,d,x[k+4], S11,0xF57C0FAF);\n      d=FF(d,a,b,c,x[k+5], S12,0x4787C62A);\n      c=FF(c,d,a,b,x[k+6], S13,0xA8304613);\n      b=FF(b,c,d,a,x[k+7], S14,0xFD469501);\n      a=FF(a,b,c,d,x[k+8], S11,0x698098D8);\n      d=FF(d,a,b,c,x[k+9], S12,0x8B44F7AF);\n      c=FF(c,d,a,b,x[k+10],S13,0xFFFF5BB1);\n      b=FF(b,c,d,a,x[k+11],S14,0x895CD7BE);\n      a=FF(a,b,c,d,x[k+12],S11,0x6B901122);\n      d=FF(d,a,b,c,x[k+13],S12,0xFD987193);\n      c=FF(c,d,a,b,x[k+14],S13,0xA679438E);\n      b=FF(b,c,d,a,x[k+15],S14,0x49B40821);\n      a=GG(a,b,c,d,x[k+1], S21,0xF61E2562);\n      d=GG(d,a,b,c,x[k+6], S22,0xC040B340);\n      c=GG(c,d,a,b,x[k+11],S23,0x265E5A51);\n      b=GG(b,c,d,a,x[k+0], S24,0xE9B6C7AA);\n      a=GG(a,b,c,d,x[k+5], S21,0xD62F105D);\n      d=GG(d,a,b,c,x[k+10],S22,0x2441453);\n      c=GG(c,d,a,b,x[k+15],S23,0xD8A1E681);\n      b=GG(b,c,d,a,x[k+4], S24,0xE7D3FBC8);\n      a=GG(a,b,c,d,x[k+9], S21,0x21E1CDE6);\n      d=GG(d,a,b,c,x[k+14],S22,0xC33707D6);\n      c=GG(c,d,a,b,x[k+3], S23,0xF4D50D87);\n      b=GG(b,c,d,a,x[k+8], S24,0x455A14ED);\n      a=GG(a,b,c,d,x[k+13],S21,0xA9E3E905);\n      d=GG(d,a,b,c,x[k+2], S22,0xFCEFA3F8);\n      c=GG(c,d,a,b,x[k+7], S23,0x676F02D9);\n      b=GG(b,c,d,a,x[k+12],S24,0x8D2A4C8A);\n      a=HH(a,b,c,d,x[k+5], S31,0xFFFA3942);\n      d=HH(d,a,b,c,x[k+8], S32,0x8771F681);\n      c=HH(c,d,a,b,x[k+11],S33,0x6D9D6122);\n      b=HH(b,c,d,a,x[k+14],S34,0xFDE5380C);\n      a=HH(a,b,c,d,x[k+1], S31,0xA4BEEA44);\n      d=HH(d,a,b,c,x[k+4], S32,0x4BDECFA9);\n      c=HH(c,d,a,b,x[k+7], S33,0xF6BB4B60);\n      b=HH(b,c,d,a,x[k+10],S34,0xBEBFBC70);\n      a=HH(a,b,c,d,x[k+13],S31,0x289B7EC6);\n      d=HH(d,a,b,c,x[k+0], S32,0xEAA127FA);\n      c=HH(c,d,a,b,x[k+3], S33,0xD4EF3085);\n      b=HH(b,c,d,a,x[k+6], S34,0x4881D05);\n      a=HH(a,b,c,d,x[k+9], S31,0xD9D4D039);\n      d=HH(d,a,b,c,x[k+12],S32,0xE6DB99E5);\n      c=HH(c,d,a,b,x[k+15],S33,0x1FA27CF8);\n      b=HH(b,c,d,a,x[k+2], S34,0xC4AC5665);\n      a=II(a,b,c,d,x[k+0], S41,0xF4292244);\n      d=II(d,a,b,c,x[k+7], S42,0x432AFF97);\n      c=II(c,d,a,b,x[k+14],S43,0xAB9423A7);\n      b=II(b,c,d,a,x[k+5], S44,0xFC93A039);\n      a=II(a,b,c,d,x[k+12],S41,0x655B59C3);\n      d=II(d,a,b,c,x[k+3], S42,0x8F0CCC92);\n      c=II(c,d,a,b,x[k+10],S43,0xFFEFF47D);\n      b=II(b,c,d,a,x[k+1], S44,0x85845DD1);\n      a=II(a,b,c,d,x[k+8], S41,0x6FA87E4F);\n      d=II(d,a,b,c,x[k+15],S42,0xFE2CE6E0);\n      c=II(c,d,a,b,x[k+6], S43,0xA3014314);\n      b=II(b,c,d,a,x[k+13],S44,0x4E0811A1);\n      a=II(a,b,c,d,x[k+4], S41,0xF7537E82);\n      d=II(d,a,b,c,x[k+11],S42,0xBD3AF235);\n      c=II(c,d,a,b,x[k+2], S43,0x2AD7D2BB);\n      b=II(b,c,d,a,x[k+9], S44,0xEB86D391);\n      a=AddUnsigned(a,AA);\n      b=AddUnsigned(b,BB);\n      c=AddUnsigned(c,CC);\n      d=AddUnsigned(d,DD);\n    }\n\n    var temp = WordToHex(a)+WordToHex(b)+WordToHex(c)+WordToHex(d);\n\n    return temp.toLowerCase();\n  }\n};\n\nSIP.Utils = Utils;\n};\n\n/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))\n\n/***/ },\n/* 5 */\n/***/ function(module, exports) {\n\n\nmodule.exports = (function() {\n\nvar Logger = function(logger, category, label) {\n  this.logger = logger;\n  this.category = category;\n  this.label = label;\n};\n\n\nLogger.prototype.debug = function(content) {\n  this.logger.debug(this.category, this.label, content);\n};\n\nLogger.prototype.log = function(content) {\n  this.logger.log(this.category, this.label, content);\n};\n\nLogger.prototype.warn = function(content) {\n  this.logger.warn(this.category, this.label, content);\n};\n\nLogger.prototype.error = function(content) {\n  this.logger.error(this.category, this.label, content);\n};\n\nreturn Logger;\n})();\n\n\n/***/ },\n/* 6 */\n/***/ function(module, exports) {\n\n\nmodule.exports = function (window, Logger) {\n\n// Console is not defined in ECMAScript, so just in case...\nvar console = window.console || {\n  debug: function () {},\n  log: function () {},\n  warn: function () {},\n  error: function () {}\n};\n\nvar LoggerFactory = function() {\n  var logger,\n    levels = {\n    'error': 0,\n    'warn': 1,\n    'log': 2,\n    'debug': 3\n    },\n\n    level = 2,\n    builtinEnabled = true,\n    connector = null;\n\n    this.loggers = {};\n\n    logger = this.getLogger('sip.loggerfactory');\n\n\n  Object.defineProperties(this, {\n    builtinEnabled: {\n      get: function(){ return builtinEnabled; },\n      set: function(value){\n        if (typeof value === 'boolean') {\n          builtinEnabled = value;\n        } else {\n          logger.error('invalid \"builtinEnabled\" parameter value: '+ JSON.stringify(value));\n        }\n      }\n    },\n\n    level: {\n      get: function() {return level; },\n      set: function(value) {\n        if (value >= 0 && value <=3) {\n          level = value;\n        } else if (value > 3) {\n          level = 3;\n        } else if (levels.hasOwnProperty(value)) {\n          level = levels[value];\n        } else {\n          logger.error('invalid \"level\" parameter value: '+ JSON.stringify(value));\n        }\n      }\n    },\n\n    connector: {\n      get: function() {return connector; },\n      set: function(value){\n        if(value === null || value === \"\" || value === undefined) {\n          connector = null;\n        } else if (typeof value === 'function') {\n          connector = value;\n        } else {\n          logger.error('invalid \"connector\" parameter value: '+ JSON.stringify(value));\n        }\n      }\n    }\n  });\n};\n\nLoggerFactory.prototype.print = function(target, category, label, content) {\n  var prefix = [];\n\n  prefix.push(new Date());\n\n  prefix.push(category);\n\n  if (label) {\n    prefix.push(label);\n  }\n\n  prefix.push('');\n\n  if (typeof content === 'string') {\n    target.call(console, prefix.join(' | ') + content);\n  } else {\n    target.call(console, content);\n  }\n};\n\nLoggerFactory.prototype.debug = function(category, label, content) {\n  if (this.level === 3) {\n    if (this.builtinEnabled) {\n      this.print(console.debug, category, label, content);\n    }\n\n    if (this.connector) {\n      this.connector('debug', category, label, content);\n    }\n  }\n};\n\nLoggerFactory.prototype.log = function(category, label, content) {\n  if (this.level >= 2) {\n    if (this.builtinEnabled) {\n      this.print(console.log, category, label, content);\n    }\n\n    if (this.connector) {\n      this.connector('log', category, label, content);\n    }\n  }\n};\n\nLoggerFactory.prototype.warn = function(category, label, content) {\n  if (this.level >= 1) {\n    if (this.builtinEnabled) {\n      this.print(console.warn, category, label, content);\n    }\n\n    if (this.connector) {\n      this.connector('warn', category, label, content);\n    }\n  }\n};\n\nLoggerFactory.prototype.error = function(category, label, content) {\n  if (this.builtinEnabled) {\n    this.print(console.error,category, label, content);\n  }\n\n  if (this.connector) {\n    this.connector('error', category, label, content);\n  }\n};\n\nLoggerFactory.prototype.getLogger = function(category, label) {\n  var logger;\n\n  if (label && this.level === 3) {\n    return new Logger(this, category, label);\n  } else if (this.loggers[category]) {\n    return this.loggers[category];\n  } else {\n    logger = new Logger(this, category);\n    this.loggers[category] = logger;\n    return logger;\n  }\n};\n\nreturn LoggerFactory;\n};\n\n\n/***/ },\n/* 7 */\n/***/ function(module, exports) {\n\n/**\n * @fileoverview EventEmitter\n */\n\n/**\n * @augments SIP\n * @class Class creating an event emitter.\n */\nmodule.exports = function (SIP) {\nvar\n  EventEmitter,\n  Event,\n  logger = new SIP.LoggerFactory().getLogger('sip.eventemitter'),\n  C = {\n    MAX_LISTENERS: 10\n  };\n\nEventEmitter = function(){};\nEventEmitter.prototype = {\n  /**\n   * Initialize events dictionaries.\n   * @param {Array} events\n   */\n  initEvents: function(events) {\n    this.events = {};\n\n    return this.initMoreEvents(events);\n  },\n\n  initMoreEvents: function(events) {\n    var idx;\n\n    if (!this.logger) {\n      this.logger = logger;\n    }\n\n    this.maxListeners = C.MAX_LISTENERS;\n\n    for (idx = 0; idx < events.length; idx++) {\n      if (!this.events[events[idx]]) {\n        this.logger.log('adding event '+ events[idx]);\n        this.events[events[idx]] = [];\n      } else {\n        this.logger.log('skipping event '+ events[idx]+ ' - Event exists');\n      }\n    }\n\n    return this;\n  },\n\n  /**\n  * Check whether an event exists or not.\n  * @param {String} event\n  * @returns {Boolean}\n  */\n  checkEvent: function(event) {\n    return !!(this.events && this.events[event]);\n  },\n\n  /**\n  * Check whether an event exists and has at least one listener or not.\n  * @param {String} event\n  * @returns {Boolean}\n  */\n  checkListener: function(event) {\n    return this.checkEvent(event) && this.events[event].length > 0;\n  },\n\n  /**\n  * Add a listener to the end of the listeners array for the specified event.\n  * @param {String} event\n  * @param {Function} listener\n  */\n  on: function(event, listener, bindTarget) {\n    if (listener === undefined) {\n      return this;\n    } else if (typeof listener !== 'function') {\n      this.logger.error('listener must be a function');\n      return this;\n    } else if (!this.checkEvent(event)) {\n      this.logger.error('unable to add a listener to a nonexistent event '+ event);\n      throw new TypeError('Invalid or uninitialized event: ' + event);\n    }\n\n    var listenerObj = { listener: listener };\n    if (bindTarget) {\n      listenerObj.bindTarget = bindTarget;\n    }\n\n    if (this.events[event].length >= this.maxListeners) {\n      this.logger.warn('max listeners exceeded for event '+ event);\n      return this;\n    }\n\n    this.events[event].push(listenerObj);\n    this.logger.log('new listener added to event '+ event);\n    return this;\n  },\n\n  /**\n  * Add a one time listener for the specified event.\n  * The listener is invoked only the next time the event is fired, then it is removed.\n  * @param {String} event\n  * @param {Function} listener\n  */\n  once: function(event, listener, bindTarget) {\n    var self = this;\n    function listenOnce () {\n      listener.apply(this, arguments);\n      self.off(event, listenOnce, bindTarget);\n    }\n\n    return this.on(event, listenOnce, bindTarget);\n  },\n\n  /**\n  * Remove a listener from the listener array for the specified event.\n  * Note that the order of the array elements will change after removing the listener\n  * @param {String} event\n  * @param {Function} listener\n  */\n  off: function(event, listener, bindTarget) {\n    var events, length,\n      idx = 0;\n\n    if (listener && typeof listener !== 'function') {\n      this.logger.error('listener must be a function');\n      return this;\n    } else if (!event) {\n      for (idx in this.events) {\n        this.events[idx] = [];\n      }\n      return this;\n    } else if (!this.checkEvent(event)) {\n      this.logger.error('unable to remove a listener from a nonexistent event '+ event);\n      throw new TypeError('Invalid or uninitialized event: ' + event);\n    }\n\n    events = this.events[event];\n    length = events.length;\n\n    while (idx < length) {\n      if (events[idx] &&\n          (!listener || events[idx].listener === listener) &&\n          (!bindTarget || events[idx].bindTarget === bindTarget)) {\n        events.splice(idx,1);\n      } else {\n        idx ++;\n      }\n    }\n\n    return this;\n  },\n\n  /**\n  * By default EventEmitter will print a warning\n  * if more than C.MAX_LISTENERS listeners are added for a particular event.\n  * This function allows that limit to be modified.\n  * @param {Number} listeners\n  */\n  setMaxListeners: function(listeners) {\n    if (typeof listeners !== 'number' || listeners < 0) {\n      this.logger.error('listeners must be a positive number');\n      return this;\n    }\n\n    this.maxListeners = listeners;\n    return this;\n  },\n\n  /**\n  * Execute each of the listeners in order with the supplied arguments.\n  * @param {String} events\n  * @param {Array} args\n  */\n  emit: function(event) {\n    if (!this.checkEvent(event)) {\n      this.logger.error('unable to emit a nonexistent event '+ event);\n      throw new TypeError('Invalid or uninitialized event: ' + event);\n    }\n\n    this.logger.log('emitting event '+ event);\n\n    // Fire event listeners\n    var args = Array.prototype.slice.call(arguments, 1);\n    this.events[event].slice().forEach(function (listener) {\n      try {\n        listener.listener.apply(listener.bindTarget || this, args);\n      } catch(err) {\n        this.logger.error(err.stack);\n      }\n    }, this);\n\n    return this;\n  }\n};\n\nEvent = function(type, sender, data) {\n  this.type = type;\n  this.sender= sender;\n  this.data = data;\n};\n\nEventEmitter.C = C;\n\nSIP.EventEmitter = EventEmitter;\nSIP.Event = Event;\n};\n\n\n/***/ },\n/* 8 */\n/***/ function(module, exports) {\n\n/**\n * @fileoverview SIP Constants\n */\n\n/**\n * SIP Constants.\n * @augments SIP\n */\n\nmodule.exports = function (name, version) {\nreturn {\n  USER_AGENT: name +'/'+ version,\n\n  // SIP scheme\n  SIP:  'sip',\n  SIPS: 'sips',\n\n  // End and Failure causes\n  causes: {\n    // Generic error causes\n    CONNECTION_ERROR:         'Connection Error',\n    REQUEST_TIMEOUT:          'Request Timeout',\n    SIP_FAILURE_CODE:         'SIP Failure Code',\n    INTERNAL_ERROR:           'Internal Error',\n\n    // SIP error causes\n    BUSY:                     'Busy',\n    REJECTED:                 'Rejected',\n    REDIRECTED:               'Redirected',\n    UNAVAILABLE:              'Unavailable',\n    NOT_FOUND:                'Not Found',\n    ADDRESS_INCOMPLETE:       'Address Incomplete',\n    INCOMPATIBLE_SDP:         'Incompatible SDP',\n    AUTHENTICATION_ERROR:     'Authentication Error',\n    DIALOG_ERROR:             'Dialog Error',\n\n    // Session error causes\n    WEBRTC_NOT_SUPPORTED:     'WebRTC Not Supported',\n    WEBRTC_ERROR:             'WebRTC Error',\n    CANCELED:                 'Canceled',\n    NO_ANSWER:                'No Answer',\n    EXPIRES:                  'Expires',\n    NO_ACK:                   'No ACK',\n    NO_PRACK:                 'No PRACK',\n    USER_DENIED_MEDIA_ACCESS: 'User Denied Media Access',\n    BAD_MEDIA_DESCRIPTION:    'Bad Media Description',\n    RTP_TIMEOUT:              'RTP Timeout'\n  },\n\n  supported: {\n    UNSUPPORTED:        'none',\n    SUPPORTED:          'supported',\n    REQUIRED:           'required'\n  },\n\n  SIP_ERROR_CAUSES: {\n    REDIRECTED: [300,301,302,305,380],\n    BUSY: [486,600],\n    REJECTED: [403,603],\n    NOT_FOUND: [404,604],\n    UNAVAILABLE: [480,410,408,430],\n    ADDRESS_INCOMPLETE: [484],\n    INCOMPATIBLE_SDP: [488,606],\n    AUTHENTICATION_ERROR:[401,407]\n  },\n\n  // SIP Methods\n  ACK:        'ACK',\n  BYE:        'BYE',\n  CANCEL:     'CANCEL',\n  INFO:       'INFO',\n  INVITE:     'INVITE',\n  MESSAGE:    'MESSAGE',\n  NOTIFY:     'NOTIFY',\n  OPTIONS:    'OPTIONS',\n  REGISTER:   'REGISTER',\n  UPDATE:     'UPDATE',\n  SUBSCRIBE:  'SUBSCRIBE',\n  REFER:      'REFER',\n  PRACK:      'PRACK',\n\n  /* SIP Response Reasons\n   * DOC: http://www.iana.org/assignments/sip-parameters\n   * Copied from https://github.com/versatica/OverSIP/blob/master/lib/oversip/sip/constants.rb#L7\n   */\n  REASON_PHRASE: {\n    100: 'Trying',\n    180: 'Ringing',\n    181: 'Call Is Being Forwarded',\n    182: 'Queued',\n    183: 'Session Progress',\n    199: 'Early Dialog Terminated',  // draft-ietf-sipcore-199\n    200: 'OK',\n    202: 'Accepted',  // RFC 3265\n    204: 'No Notification',  //RFC 5839\n    300: 'Multiple Choices',\n    301: 'Moved Permanently',\n    302: 'Moved Temporarily',\n    305: 'Use Proxy',\n    380: 'Alternative Service',\n    400: 'Bad Request',\n    401: 'Unauthorized',\n    402: 'Payment Required',\n    403: 'Forbidden',\n    404: 'Not Found',\n    405: 'Method Not Allowed',\n    406: 'Not Acceptable',\n    407: 'Proxy Authentication Required',\n    408: 'Request Timeout',\n    410: 'Gone',\n    412: 'Conditional Request Failed',  // RFC 3903\n    413: 'Request Entity Too Large',\n    414: 'Request-URI Too Long',\n    415: 'Unsupported Media Type',\n    416: 'Unsupported URI Scheme',\n    417: 'Unknown Resource-Priority',  // RFC 4412\n    420: 'Bad Extension',\n    421: 'Extension Required',\n    422: 'Session Interval Too Small',  // RFC 4028\n    423: 'Interval Too Brief',\n    428: 'Use Identity Header',  // RFC 4474\n    429: 'Provide Referrer Identity',  // RFC 3892\n    430: 'Flow Failed',  // RFC 5626\n    433: 'Anonymity Disallowed',  // RFC 5079\n    436: 'Bad Identity-Info',  // RFC 4474\n    437: 'Unsupported Certificate',  // RFC 4744\n    438: 'Invalid Identity Header',  // RFC 4744\n    439: 'First Hop Lacks Outbound Support',  // RFC 5626\n    440: 'Max-Breadth Exceeded',  // RFC 5393\n    469: 'Bad Info Package',  // draft-ietf-sipcore-info-events\n    470: 'Consent Needed',  // RFC 5360\n    478: 'Unresolvable Destination',  // Custom code copied from Kamailio.\n    480: 'Temporarily Unavailable',\n    481: 'Call/Transaction Does Not Exist',\n    482: 'Loop Detected',\n    483: 'Too Many Hops',\n    484: 'Address Incomplete',\n    485: 'Ambiguous',\n    486: 'Busy Here',\n    487: 'Request Terminated',\n    488: 'Not Acceptable Here',\n    489: 'Bad Event',  // RFC 3265\n    491: 'Request Pending',\n    493: 'Undecipherable',\n    494: 'Security Agreement Required',  // RFC 3329\n    500: 'Internal Server Error',\n    501: 'Not Implemented',\n    502: 'Bad Gateway',\n    503: 'Service Unavailable',\n    504: 'Server Time-out',\n    505: 'Version Not Supported',\n    513: 'Message Too Large',\n    580: 'Precondition Failure',  // RFC 3312\n    600: 'Busy Everywhere',\n    603: 'Decline',\n    604: 'Does Not Exist Anywhere',\n    606: 'Not Acceptable'\n  }\n};\n};\n\n\n/***/ },\n/* 9 */\n/***/ function(module, exports) {\n\n/**\n * @fileoverview Exceptions\n */\n\n/**\n * SIP Exceptions.\n * @augments SIP\n */\nmodule.exports = {\n  ConfigurationError: (function(){\n    var exception = function(parameter, value) {\n      this.code = 1;\n      this.name = 'CONFIGURATION_ERROR';\n      this.parameter = parameter;\n      this.value = value;\n      this.message = (!this.value)? 'Missing parameter: '+ this.parameter : 'Invalid value '+ JSON.stringify(this.value) +' for parameter \"'+ this.parameter +'\"';\n    };\n    exception.prototype = new Error();\n    return exception;\n  }()),\n\n  InvalidStateError: (function(){\n    var exception = function(status) {\n      this.code = 2;\n      this.name = 'INVALID_STATE_ERROR';\n      this.status = status;\n      this.message = 'Invalid status: ' + status;\n    };\n    exception.prototype = new Error();\n    return exception;\n  }()),\n\n  NotSupportedError: (function(){\n    var exception = function(message) {\n      this.code = 3;\n      this.name = 'NOT_SUPPORTED_ERROR';\n      this.message = message;\n    };\n    exception.prototype = new Error();\n    return exception;\n  }()),\n\n  NotReadyError: (function(){\n    var exception = function(message) {\n      this.code = 4;\n      this.name = 'NOT_READY_ERROR';\n      this.message = message;\n    };\n    exception.prototype = new Error();\n    return exception;\n  }())\n};\n\n\n/***/ },\n/* 10 */\n/***/ function(module, exports) {\n\n/**\n * @fileoverview SIP TIMERS\n */\n\n/**\n * @augments SIP\n */\nvar\n  T1 = 500,\n  T2 = 4000,\n  T4 = 5000;\nmodule.exports = function (timers) {\n  var exports = {\n    T1: T1,\n    T2: T2,\n    T4: T4,\n    TIMER_B: 64 * T1,\n    TIMER_D: 0  * T1,\n    TIMER_F: 64 * T1,\n    TIMER_H: 64 * T1,\n    TIMER_I: 0  * T1,\n    TIMER_J: 0  * T1,\n    TIMER_K: 0  * T4,\n    TIMER_L: 64 * T1,\n    TIMER_M: 64 * T1,\n    TIMER_N: 64 * T1,\n    PROVISIONAL_RESPONSE_INTERVAL: 60000  // See RFC 3261 Section 13.3.1.1\n  };\n\n  ['setTimeout', 'clearTimeout', 'setInterval', 'clearInterval']\n  .forEach(function (name) {\n    // can't just use timers[name].bind(timers) since it bypasses jasmine's\n    // clock-mocking\n    exports[name] = function () {\n      return timers[name].apply(timers, arguments);\n    };\n  });\n\n  return exports;\n};\n\n\n/***/ },\n/* 11 */\n/***/ function(module, exports) {\n\n/**\n * @fileoverview Transport\n */\n\n/**\n * @augments SIP\n * @class Transport\n * @param {SIP.UA} ua\n * @param {Object} server ws_server Object\n */\nmodule.exports = function (SIP, window) {\nvar Transport,\n  C = {\n    // Transport status codes\n    STATUS_READY:        0,\n    STATUS_DISCONNECTED: 1,\n    STATUS_ERROR:        2\n  };\n\nTransport = function(ua, server) {\n\n  this.logger = ua.getLogger('sip.transport');\n  this.ua = ua;\n  this.ws = null;\n  this.server = server;\n  this.reconnection_attempts = 0;\n  this.closed = false;\n  this.connected = false;\n  this.reconnectTimer = null;\n  this.lastTransportError = {};\n\n  this.ua.transport = this;\n\n  // Connect\n  this.connect();\n};\n\nTransport.prototype = {\n  /**\n   * Send a message.\n   * @param {SIP.OutgoingRequest|String} msg\n   * @returns {Boolean}\n   */\n  send: function(msg) {\n    var message = msg.toString();\n\n    if(this.ws && this.ws.readyState === window.WebSocket.OPEN) {\n      if (this.ua.configuration.traceSip === true) {\n        this.logger.log('sending WebSocket message:\\n\\n' + message + '\\n');\n      }\n      this.ws.send(message);\n      return true;\n    } else {\n      this.logger.warn('unable to send message, WebSocket is not open');\n      return false;\n    }\n  },\n\n  /**\n  * Disconnect socket.\n  */\n  disconnect: function() {\n    if(this.ws) {\n      // Clear reconnectTimer\n      SIP.Timers.clearTimeout(this.reconnectTimer);\n\n      this.closed = true;\n      this.logger.log('closing WebSocket ' + this.server.ws_uri);\n      this.ws.close();\n    }\n\n    if (this.reconnectTimer !== null) {\n      SIP.Timers.clearTimeout(this.reconnectTimer);\n      this.reconnectTimer = null;\n      this.ua.emit('disconnected', {\n        transport: this,\n        code: this.lastTransportError.code,\n        reason: this.lastTransportError.reason\n      });\n    }\n  },\n\n  /**\n  * Connect socket.\n  */\n  connect: function() {\n    var transport = this;\n\n    if(this.ws && (this.ws.readyState === WebSocket.OPEN || this.ws.readyState === WebSocket.CONNECTING)) {\n      this.logger.log('WebSocket ' + this.server.ws_uri + ' is already connected');\n      return false;\n    }\n\n    if(this.ws) {\n      this.ws.close();\n    }\n\n    this.logger.log('connecting to WebSocket ' + this.server.ws_uri);\n    this.ua.onTransportConnecting(this,\n      (this.reconnection_attempts === 0)?1:this.reconnection_attempts);\n\n    try {\n      this.ws = new window.WebSocket(this.server.ws_uri, 'sip');\n    } catch(e) {\n      this.logger.warn('error connecting to WebSocket ' + this.server.ws_uri + ': ' + e);\n    }\n\n    this.ws.binaryType = 'arraybuffer';\n\n    this.ws.onopen = function() {\n      transport.onOpen();\n    };\n\n    this.ws.onclose = function(e) {\n      transport.onClose(e);\n    };\n\n    this.ws.onmessage = function(e) {\n      transport.onMessage(e);\n    };\n\n    this.ws.onerror = function(e) {\n      transport.onError(e);\n    };\n  },\n\n  // Transport Event Handlers\n\n  /**\n  * @event\n  * @param {event} e\n  */\n  onOpen: function() {\n    this.connected = true;\n\n    this.logger.log('WebSocket ' + this.server.ws_uri + ' connected');\n    // Clear reconnectTimer since we are not disconnected\n    if (this.reconnectTimer !== null) {\n      SIP.Timers.clearTimeout(this.reconnectTimer);\n      this.reconnectTimer = null;\n    }\n    // Reset reconnection_attempts\n    this.reconnection_attempts = 0;\n    // Disable closed\n    this.closed = false;\n    // Trigger onTransportConnected callback\n    this.ua.onTransportConnected(this);\n  },\n\n  /**\n  * @event\n  * @param {event} e\n  */\n  onClose: function(e) {\n    var connected_before = this.connected;\n\n    this.connected = false;\n    this.lastTransportError.code = e.code;\n    this.lastTransportError.reason = e.reason;\n    this.logger.log('WebSocket disconnected (code: ' + e.code + (e.reason? '| reason: ' + e.reason : '') +')');\n\n    if(e.wasClean === false) {\n      this.logger.warn('WebSocket abrupt disconnection');\n    }\n    // Transport was connected\n    if(connected_before === true) {\n      this.ua.onTransportClosed(this);\n      // Check whether the user requested to close.\n      if(!this.closed) {\n        this.reConnect();\n      } else {\n        this.ua.emit('disconnected', {\n          transport: this,\n          code: this.lastTransportError.code,\n          reason: this.lastTransportError.reason\n        });\n      }\n    } else {\n      // This is the first connection attempt\n      //Network error\n      this.ua.onTransportError(this);\n    }\n  },\n\n  /**\n  * @event\n  * @param {event} e\n  */\n  onMessage: function(e) {\n    var message, transaction,\n      data = e.data;\n\n    // CRLF Keep Alive response from server. Ignore it.\n    if(data === '\\r\\n') {\n      if (this.ua.configuration.traceSip === true) {\n        this.logger.log('received WebSocket message with CRLF Keep Alive response');\n      }\n      return;\n    }\n\n    // WebSocket binary message.\n    else if (typeof data !== 'string') {\n      try {\n        data = String.fromCharCode.apply(null, new Uint8Array(data));\n      } catch(evt) {\n        this.logger.warn('received WebSocket binary message failed to be converted into string, message discarded');\n        return;\n      }\n\n      if (this.ua.configuration.traceSip === true) {\n        this.logger.log('received WebSocket binary message:\\n\\n' + data + '\\n');\n      }\n    }\n\n    // WebSocket text message.\n    else {\n      if (this.ua.configuration.traceSip === true) {\n        this.logger.log('received WebSocket text message:\\n\\n' + data + '\\n');\n      }\n    }\n\n    message = SIP.Parser.parseMessage(data, this.ua);\n\n    if (!message) {\n      return;\n    }\n\n    if(this.ua.status === SIP.UA.C.STATUS_USER_CLOSED && message instanceof SIP.IncomingRequest) {\n      return;\n    }\n\n    // Do some sanity check\n    if(SIP.sanityCheck(message, this.ua, this)) {\n      if(message instanceof SIP.IncomingRequest) {\n        message.transport = this;\n        this.ua.receiveRequest(message);\n      } else if(message instanceof SIP.IncomingResponse) {\n        /* Unike stated in 18.1.2, if a response does not match\n        * any transaction, it is discarded here and no passed to the core\n        * in order to be discarded there.\n        */\n        switch(message.method) {\n          case SIP.C.INVITE:\n            transaction = this.ua.transactions.ict[message.via_branch];\n            if(transaction) {\n              transaction.receiveResponse(message);\n            }\n            break;\n          case SIP.C.ACK:\n            // Just in case ;-)\n            break;\n          default:\n            transaction = this.ua.transactions.nict[message.via_branch];\n            if(transaction) {\n              transaction.receiveResponse(message);\n            }\n            break;\n        }\n      }\n    }\n  },\n\n  /**\n  * @event\n  * @param {event} e\n  */\n  onError: function(e) {\n    this.logger.warn('WebSocket connection error: ' + e);\n  },\n\n  /**\n  * Reconnection attempt logic.\n  * @private\n  */\n  reConnect: function() {\n    var transport = this;\n\n    this.reconnection_attempts += 1;\n\n    if(this.reconnection_attempts > this.ua.configuration.wsServerMaxReconnection) {\n      this.logger.warn('maximum reconnection attempts for WebSocket ' + this.server.ws_uri);\n      this.ua.onTransportError(this);\n    } else {\n      this.logger.log('trying to reconnect to WebSocket ' + this.server.ws_uri + ' (reconnection attempt ' + this.reconnection_attempts + ')');\n\n      this.reconnectTimer = SIP.Timers.setTimeout(function() {\n        transport.connect();\n        transport.reconnectTimer = null;\n      }, this.ua.configuration.wsServerReconnectionTimeout * 1000);\n    }\n  }\n};\n\nTransport.C = C;\nSIP.Transport = Transport;\n};\n\n\n/***/ },\n/* 12 */\n/***/ function(module, exports) {\n\n/**\n * @fileoverview SIP Message Parser\n */\n\n/**\n * Extract and parse every header of a SIP message.\n * @augments SIP\n * @namespace\n */\nmodule.exports = function (SIP) {\nvar Parser;\n\nfunction getHeader(data, headerStart) {\n  var\n    // 'start' position of the header.\n    start = headerStart,\n    // 'end' position of the header.\n    end = 0,\n    // 'partial end' position of the header.\n    partialEnd = 0;\n\n  //End of message.\n  if (data.substring(start, start + 2).match(/(^\\r\\n)/)) {\n    return -2;\n  }\n\n  while(end === 0) {\n    // Partial End of Header.\n    partialEnd = data.indexOf('\\r\\n', start);\n\n    // 'indexOf' returns -1 if the value to be found never occurs.\n    if (partialEnd === -1) {\n      return partialEnd;\n    }\n\n    if(!data.substring(partialEnd + 2, partialEnd + 4).match(/(^\\r\\n)/) && data.charAt(partialEnd + 2).match(/(^\\s+)/)) {\n      // Not the end of the message. Continue from the next position.\n      start = partialEnd + 2;\n    } else {\n      end = partialEnd;\n    }\n  }\n\n  return end;\n}\n\nfunction parseHeader(message, data, headerStart, headerEnd) {\n  var header, idx, length, parsed,\n    hcolonIndex = data.indexOf(':', headerStart),\n    headerName = data.substring(headerStart, hcolonIndex).trim(),\n    headerValue = data.substring(hcolonIndex + 1, headerEnd).trim();\n\n  // If header-field is well-known, parse it.\n  switch(headerName.toLowerCase()) {\n    case 'via':\n    case 'v':\n      message.addHeader('via', headerValue);\n      if(message.getHeaders('via').length === 1) {\n        parsed = message.parseHeader('Via');\n        if(parsed) {\n          message.via = parsed;\n          message.via_branch = parsed.branch;\n        }\n      } else {\n        parsed = 0;\n      }\n      break;\n    case 'from':\n    case 'f':\n      message.setHeader('from', headerValue);\n      parsed = message.parseHeader('from');\n      if(parsed) {\n        message.from = parsed;\n        message.from_tag = parsed.getParam('tag');\n      }\n      break;\n    case 'to':\n    case 't':\n      message.setHeader('to', headerValue);\n      parsed = message.parseHeader('to');\n      if(parsed) {\n        message.to = parsed;\n        message.to_tag = parsed.getParam('tag');\n      }\n      break;\n    case 'record-route':\n      parsed = SIP.Grammar.parse(headerValue, 'Record_Route');\n\n      if (parsed === -1) {\n        parsed = undefined;\n        break;\n      }\n\n      length = parsed.length;\n      for (idx = 0; idx < length; idx++) {\n        header = parsed[idx];\n        message.addHeader('record-route', headerValue.substring(header.position, header.offset));\n        message.headers['Record-Route'][message.getHeaders('record-route').length - 1].parsed = header.parsed;\n      }\n      break;\n    case 'call-id':\n    case 'i':\n      message.setHeader('call-id', headerValue);\n      parsed = message.parseHeader('call-id');\n      if(parsed) {\n        message.call_id = headerValue;\n      }\n      break;\n    case 'contact':\n    case 'm':\n      parsed = SIP.Grammar.parse(headerValue, 'Contact');\n\n      if (parsed === -1) {\n        parsed = undefined;\n        break;\n      }\n\n      length = parsed.length;\n      for (idx = 0; idx < length; idx++) {\n        header = parsed[idx];\n        message.addHeader('contact', headerValue.substring(header.position, header.offset));\n        message.headers['Contact'][message.getHeaders('contact').length - 1].parsed = header.parsed;\n      }\n      break;\n    case 'content-length':\n    case 'l':\n      message.setHeader('content-length', headerValue);\n      parsed = message.parseHeader('content-length');\n      break;\n    case 'content-type':\n    case 'c':\n      message.setHeader('content-type', headerValue);\n      parsed = message.parseHeader('content-type');\n      break;\n    case 'cseq':\n      message.setHeader('cseq', headerValue);\n      parsed = message.parseHeader('cseq');\n      if(parsed) {\n        message.cseq = parsed.value;\n      }\n      if(message instanceof SIP.IncomingResponse) {\n        message.method = parsed.method;\n      }\n      break;\n    case 'max-forwards':\n      message.setHeader('max-forwards', headerValue);\n      parsed = message.parseHeader('max-forwards');\n      break;\n    case 'www-authenticate':\n      message.setHeader('www-authenticate', headerValue);\n      parsed = message.parseHeader('www-authenticate');\n      break;\n    case 'proxy-authenticate':\n      message.setHeader('proxy-authenticate', headerValue);\n      parsed = message.parseHeader('proxy-authenticate');\n      break;\n    case 'refer-to':\n    case 'r':\n      message.setHeader('refer-to', headerValue);\n      parsed = message.parseHeader('refer-to');\n      if (parsed) {\n        message.refer_to = parsed;\n      }\n      break;\n    default:\n      // Do not parse this header.\n      message.setHeader(headerName, headerValue);\n      parsed = 0;\n  }\n\n  if (parsed === undefined) {\n    return {\n      error: 'error parsing header \"'+ headerName +'\"'\n    };\n  } else {\n    return true;\n  }\n}\n\n/** Parse SIP Message\n * @function\n * @param {String} message SIP message.\n * @param {Object} logger object.\n * @returns {SIP.IncomingRequest|SIP.IncomingResponse|undefined}\n */\nParser = {};\nParser.parseMessage = function(data, ua) {\n  var message, firstLine, contentLength, bodyStart, parsed,\n    headerStart = 0,\n    headerEnd = data.indexOf('\\r\\n'),\n    logger = ua.getLogger('sip.parser');\n\n  if(headerEnd === -1) {\n    logger.warn('no CRLF found, not a SIP message, discarded');\n    return;\n  }\n\n  // Parse first line. Check if it is a Request or a Reply.\n  firstLine = data.substring(0, headerEnd);\n  parsed = SIP.Grammar.parse(firstLine, 'Request_Response');\n\n  if(parsed === -1) {\n    logger.warn('error parsing first line of SIP message: \"' + firstLine + '\"');\n    return;\n  } else if(!parsed.status_code) {\n    message = new SIP.IncomingRequest(ua);\n    message.method = parsed.method;\n    message.ruri = parsed.uri;\n  } else {\n    message = new SIP.IncomingResponse(ua);\n    message.status_code = parsed.status_code;\n    message.reason_phrase = parsed.reason_phrase;\n  }\n\n  message.data = data;\n  headerStart = headerEnd + 2;\n\n  /* Loop over every line in data. Detect the end of each header and parse\n  * it or simply add to the headers collection.\n  */\n  while(true) {\n    headerEnd = getHeader(data, headerStart);\n\n    // The SIP message has normally finished.\n    if(headerEnd === -2) {\n      bodyStart = headerStart + 2;\n      break;\n    }\n    // data.indexOf returned -1 due to a malformed message.\n    else if(headerEnd === -1) {\n      logger.error('malformed message');\n      return;\n    }\n\n    parsed = parseHeader(message, data, headerStart, headerEnd);\n\n    if(parsed !== true) {\n      logger.error(parsed.error);\n      return;\n    }\n\n    headerStart = headerEnd + 2;\n  }\n\n  /* RFC3261 18.3.\n   * If there are additional bytes in the transport packet\n   * beyond the end of the body, they MUST be discarded.\n   */\n  if(message.hasHeader('content-length')) {\n    contentLength = message.getHeader('content-length');\n    message.body = data.substr(bodyStart, contentLength);\n  } else {\n    message.body = data.substring(bodyStart);\n  }\n\n  return message;\n};\n\nSIP.Parser = Parser;\n};\n\n\n/***/ },\n/* 13 */\n/***/ function(module, exports) {\n\n/**\n * @fileoverview SIP Message\n */\n\nmodule.exports = function (SIP) {\nvar\n  OutgoingRequest,\n  IncomingMessage,\n  IncomingRequest,\n  IncomingResponse;\n\n/**\n * @augments SIP\n * @class Class for outgoing SIP request.\n * @param {String} method request method\n * @param {String} ruri request uri\n * @param {SIP.UA} ua\n * @param {Object} params parameters that will have priority over ua.configuration parameters:\n * <br>\n *  - cseq, call_id, from_tag, from_uri, from_displayName, to_uri, to_tag, route_set\n * @param {Object} [headers] extra headers\n * @param {String} [body]\n */\nOutgoingRequest = function(method, ruri, ua, params, extraHeaders, body) {\n  var\n    to,\n    from,\n    call_id,\n    cseq;\n\n  params = params || {};\n\n  // Mandatory parameters check\n  if(!method || !ruri || !ua) {\n    return null;\n  }\n\n  this.logger = ua.getLogger('sip.sipmessage');\n  this.ua = ua;\n  this.headers = {};\n  this.method = method;\n  this.ruri = ruri;\n  this.body = body;\n  this.extraHeaders = (extraHeaders || []).slice();\n  this.statusCode = params.status_code;\n  this.reasonPhrase = params.reason_phrase;\n\n  // Fill the Common SIP Request Headers\n\n  // Route\n  if (params.route_set) {\n    this.setHeader('route', params.route_set);\n  } else if (ua.configuration.usePreloadedRoute){\n    this.setHeader('route', ua.transport.server.sip_uri);\n  }\n\n  // Via\n  // Empty Via header. Will be filled by the client transaction.\n  this.setHeader('via', '');\n\n  // Max-Forwards\n  this.setHeader('max-forwards', SIP.UA.C.MAX_FORWARDS);\n\n  // To\n  to = (params.to_displayName || params.to_displayName === 0) ? '\"' + params.to_displayName + '\" ' : '';\n  to += '<' + (params.to_uri || ruri) + '>';\n  to += params.to_tag ? ';tag=' + params.to_tag : '';\n  this.to = new SIP.NameAddrHeader.parse(to);\n  this.setHeader('to', to);\n\n  // From\n  if (params.from_displayName || params.from_displayName === 0) {\n    from = '\"' + params.from_displayName + '\" ';\n  } else if (ua.configuration.displayName) {\n    from = '\"' + ua.configuration.displayName + '\" ';\n  } else {\n    from = '';\n  }\n  from += '<' + (params.from_uri || ua.configuration.uri) + '>;tag=';\n  from += params.from_tag || SIP.Utils.newTag();\n  this.from = new SIP.NameAddrHeader.parse(from);\n  this.setHeader('from', from);\n\n  // Call-ID\n  call_id = params.call_id || (ua.configuration.sipjsId + SIP.Utils.createRandomToken(15));\n  this.call_id = call_id;\n  this.setHeader('call-id', call_id);\n\n  // CSeq\n  cseq = params.cseq || Math.floor(Math.random() * 10000);\n  this.cseq = cseq;\n  this.setHeader('cseq', cseq + ' ' + method);\n};\n\nOutgoingRequest.prototype = {\n  /**\n   * Replace the the given header by the given value.\n   * @param {String} name header name\n   * @param {String | Array} value header value\n   */\n  setHeader: function(name, value) {\n    this.headers[SIP.Utils.headerize(name)] = (value instanceof Array) ? value : [value];\n  },\n\n  /**\n   * Get the value of the given header name at the given position.\n   * @param {String} name header name\n   * @returns {String|undefined} Returns the specified header, undefined if header doesn't exist.\n   */\n  getHeader: function(name) {\n    var regexp, idx,\n      length = this.extraHeaders.length,\n      header = this.headers[SIP.Utils.headerize(name)];\n\n    if(header) {\n      if(header[0]) {\n        return header[0];\n      }\n    } else {\n      regexp = new RegExp('^\\\\s*' + name + '\\\\s*:','i');\n      for (idx = 0; idx < length; idx++) {\n        header = this.extraHeaders[idx];\n        if (regexp.test(header)) {\n          return header.substring(header.indexOf(':')+1).trim();\n        }\n      }\n    }\n\n    return;\n  },\n\n  /**\n   * Get the header/s of the given name.\n   * @param {String} name header name\n   * @returns {Array} Array with all the headers of the specified name.\n   */\n  getHeaders: function(name) {\n    var idx, length, regexp,\n      header = this.headers[SIP.Utils.headerize(name)],\n      result = [];\n\n    if(header) {\n      length = header.length;\n      for (idx = 0; idx < length; idx++) {\n        result.push(header[idx]);\n      }\n      return result;\n    } else {\n      length = this.extraHeaders.length;\n      regexp = new RegExp('^\\\\s*' + name + '\\\\s*:','i');\n      for (idx = 0; idx < length; idx++) {\n        header = this.extraHeaders[idx];\n        if (regexp.test(header)) {\n          result.push(header.substring(header.indexOf(':')+1).trim());\n        }\n      }\n      return result;\n    }\n  },\n\n  /**\n   * Verify the existence of the given header.\n   * @param {String} name header name\n   * @returns {boolean} true if header with given name exists, false otherwise\n   */\n  hasHeader: function(name) {\n    var regexp, idx,\n      length = this.extraHeaders.length;\n\n    if (this.headers[SIP.Utils.headerize(name)]) {\n      return true;\n    } else {\n      regexp = new RegExp('^\\\\s*' + name + '\\\\s*:','i');\n      for (idx = 0; idx < length; idx++) {\n        if (regexp.test(this.extraHeaders[idx])) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  },\n\n  toString: function() {\n    var msg = '', header, length, idx, supported = [];\n\n    msg += this.method + ' ' + this.ruri + ' SIP/2.0\\r\\n';\n\n    for (header in this.headers) {\n      length = this.headers[header].length;\n      for (idx = 0; idx < length; idx++) {\n        msg += header + ': ' + this.headers[header][idx] + '\\r\\n';\n      }\n    }\n\n    length = this.extraHeaders.length;\n    for (idx = 0; idx < length; idx++) {\n      msg += this.extraHeaders[idx].trim() +'\\r\\n';\n    }\n\n    //Supported\n    if (this.method === SIP.C.REGISTER) {\n      supported.push('path', 'gruu');\n    } else if (this.method === SIP.C.INVITE &&\n               (this.ua.contact.pub_gruu || this.ua.contact.temp_gruu)) {\n      supported.push('gruu');\n    }\n\n    if (this.ua.configuration.rel100 === SIP.C.supported.SUPPORTED) {\n      supported.push('100rel');\n    }\n\n    supported.push('outbound');\n\n    msg += 'Supported: ' +  supported +'\\r\\n';\n    msg += 'User-Agent: ' + this.ua.configuration.userAgentString +'\\r\\n';\n\n    if(this.body) {\n      length = SIP.Utils.str_utf8_length(this.body);\n      msg += 'Content-Length: ' + length + '\\r\\n\\r\\n';\n      msg += this.body;\n    } else {\n      msg += 'Content-Length: 0\\r\\n\\r\\n';\n    }\n\n    return msg;\n  }\n};\n\n/**\n * @augments SIP\n * @class Class for incoming SIP message.\n */\nIncomingMessage = function(){\n  this.data = null;\n  this.headers = null;\n  this.method =  null;\n  this.via = null;\n  this.via_branch = null;\n  this.call_id = null;\n  this.cseq = null;\n  this.from = null;\n  this.from_tag = null;\n  this.to = null;\n  this.to_tag = null;\n  this.body = null;\n};\n\nIncomingMessage.prototype = {\n  /**\n  * Insert a header of the given name and value into the last position of the\n  * header array.\n  * @param {String} name header name\n  * @param {String} value header value\n  */\n  addHeader: function(name, value) {\n    var header = { raw: value };\n\n    name = SIP.Utils.headerize(name);\n\n    if(this.headers[name]) {\n      this.headers[name].push(header);\n    } else {\n      this.headers[name] = [header];\n    }\n  },\n\n  /**\n   * Get the value of the given header name at the given position.\n   * @param {String} name header name\n   * @returns {String|undefined} Returns the specified header, null if header doesn't exist.\n   */\n  getHeader: function(name) {\n    var header = this.headers[SIP.Utils.headerize(name)];\n\n    if(header) {\n      if(header[0]) {\n        return header[0].raw;\n      }\n    } else {\n      return;\n    }\n  },\n\n  /**\n   * Get the header/s of the given name.\n   * @param {String} name header name\n   * @returns {Array} Array with all the headers of the specified name.\n   */\n  getHeaders: function(name) {\n    var idx, length,\n      header = this.headers[SIP.Utils.headerize(name)],\n      result = [];\n\n    if(!header) {\n      return [];\n    }\n\n    length = header.length;\n    for (idx = 0; idx < length; idx++) {\n      result.push(header[idx].raw);\n    }\n\n    return result;\n  },\n\n  /**\n   * Verify the existence of the given header.\n   * @param {String} name header name\n   * @returns {boolean} true if header with given name exists, false otherwise\n   */\n  hasHeader: function(name) {\n    return(this.headers[SIP.Utils.headerize(name)]) ? true : false;\n  },\n\n  /**\n  * Parse the given header on the given index.\n  * @param {String} name header name\n  * @param {Number} [idx=0] header index\n  * @returns {Object|undefined} Parsed header object, undefined if the header is not present or in case of a parsing error.\n  */\n  parseHeader: function(name, idx) {\n    var header, value, parsed;\n\n    name = SIP.Utils.headerize(name);\n\n    idx = idx || 0;\n\n    if(!this.headers[name]) {\n      this.logger.log('header \"' + name + '\" not present');\n      return;\n    } else if(idx >= this.headers[name].length) {\n      this.logger.log('not so many \"' + name + '\" headers present');\n      return;\n    }\n\n    header = this.headers[name][idx];\n    value = header.raw;\n\n    if(header.parsed) {\n      return header.parsed;\n    }\n\n    //substitute '-' by '_' for grammar rule matching.\n    parsed = SIP.Grammar.parse(value, name.replace(/-/g, '_'));\n\n    if(parsed === -1) {\n      this.headers[name].splice(idx, 1); //delete from headers\n      this.logger.warn('error parsing \"' + name + '\" header field with value \"' + value + '\"');\n      return;\n    } else {\n      header.parsed = parsed;\n      return parsed;\n    }\n  },\n\n  /**\n   * Message Header attribute selector. Alias of parseHeader.\n   * @param {String} name header name\n   * @param {Number} [idx=0] header index\n   * @returns {Object|undefined} Parsed header object, undefined if the header is not present or in case of a parsing error.\n   *\n   * @example\n   * message.s('via',3).port\n   */\n  s: function(name, idx) {\n    return this.parseHeader(name, idx);\n  },\n\n  /**\n  * Replace the value of the given header by the value.\n  * @param {String} name header name\n  * @param {String} value header value\n  */\n  setHeader: function(name, value) {\n    var header = { raw: value };\n    this.headers[SIP.Utils.headerize(name)] = [header];\n  },\n\n  toString: function() {\n    return this.data;\n  }\n};\n\n/**\n * @augments IncomingMessage\n * @class Class for incoming SIP request.\n */\nIncomingRequest = function(ua) {\n  this.logger = ua.getLogger('sip.sipmessage');\n  this.ua = ua;\n  this.headers = {};\n  this.ruri = null;\n  this.transport = null;\n  this.server_transaction = null;\n};\nIncomingRequest.prototype = new IncomingMessage();\n\n/**\n* Stateful reply.\n* @param {Number} code status code\n* @param {String} reason reason phrase\n* @param {Object} headers extra headers\n* @param {String} body body\n* @param {Function} [onSuccess] onSuccess callback\n* @param {Function} [onFailure] onFailure callback\n*/\nIncomingRequest.prototype.reply = function(code, reason, extraHeaders, body, onSuccess, onFailure) {\n  var rr, vias, length, idx, response,\n  supported = [],\n    to = this.getHeader('To'),\n    r = 0,\n    v = 0;\n\n  code = code || null;\n  reason = reason || null;\n\n  // Validate code and reason values\n  if (!code || (code < 100 || code > 699)) {\n    throw new TypeError('Invalid status_code: '+ code);\n  } else if (reason && typeof reason !== 'string' && !(reason instanceof String)) {\n    throw new TypeError('Invalid reason_phrase: '+ reason);\n  }\n\n  reason = reason || SIP.C.REASON_PHRASE[code] || '';\n  extraHeaders = (extraHeaders || []).slice();\n\n  response = 'SIP/2.0 ' + code + ' ' + reason + '\\r\\n';\n\n  if(this.method === SIP.C.INVITE && code > 100 && code <= 200) {\n    rr = this.getHeaders('record-route');\n    length = rr.length;\n\n    for(r; r < length; r++) {\n      response += 'Record-Route: ' + rr[r] + '\\r\\n';\n    }\n  }\n\n  vias = this.getHeaders('via');\n  length = vias.length;\n\n  for(v; v < length; v++) {\n    response += 'Via: ' + vias[v] + '\\r\\n';\n  }\n\n  if(!this.to_tag && code > 100) {\n    to += ';tag=' + SIP.Utils.newTag();\n  } else if(this.to_tag && !this.s('to').hasParam('tag')) {\n    to += ';tag=' + this.to_tag;\n  }\n\n  response += 'To: ' + to + '\\r\\n';\n  response += 'From: ' + this.getHeader('From') + '\\r\\n';\n  response += 'Call-ID: ' + this.call_id + '\\r\\n';\n  response += 'CSeq: ' + this.cseq + ' ' + this.method + '\\r\\n';\n\n  length = extraHeaders.length;\n  for (idx = 0; idx < length; idx++) {\n    response += extraHeaders[idx].trim() +'\\r\\n';\n  }\n\n  //Supported\n  if (this.method === SIP.C.INVITE &&\n               (this.ua.contact.pub_gruu || this.ua.contact.temp_gruu)) {\n    supported.push('gruu');\n  }\n\n  if (this.ua.configuration.rel100 === SIP.C.supported.SUPPORTED) {\n    supported.push('100rel');\n  }\n\n  supported.push('outbound');\n\n  response += 'Supported: ' + supported + '\\r\\n';\n\n  if(body) {\n    length = SIP.Utils.str_utf8_length(body);\n    response += 'Content-Type: application/sdp\\r\\n';\n    response += 'Content-Length: ' + length + '\\r\\n\\r\\n';\n    response += body;\n  } else {\n    response += 'Content-Length: ' + 0 + '\\r\\n\\r\\n';\n  }\n\n  this.server_transaction.receiveResponse(code, response, onSuccess, onFailure);\n\n  return response;\n};\n\n/**\n* Stateless reply.\n* @param {Number} code status code\n* @param {String} reason reason phrase\n*/\nIncomingRequest.prototype.reply_sl = function(code, reason) {\n  var to, response,\n    v = 0,\n    vias = this.getHeaders('via'),\n    length = vias.length;\n\n  code = code || null;\n  reason = reason || null;\n\n  // Validate code and reason values\n  if (!code || (code < 100 || code > 699)) {\n    throw new TypeError('Invalid status_code: '+ code);\n  } else if (reason && typeof reason !== 'string' && !(reason instanceof String)) {\n    throw new TypeError('Invalid reason_phrase: '+ reason);\n  }\n\n  reason = reason || SIP.C.REASON_PHRASE[code] || '';\n\n  response = 'SIP/2.0 ' + code + ' ' + reason + '\\r\\n';\n\n  for(v; v < length; v++) {\n    response += 'Via: ' + vias[v] + '\\r\\n';\n  }\n\n  to = this.getHeader('To');\n\n  if(!this.to_tag && code > 100) {\n    to += ';tag=' + SIP.Utils.newTag();\n  } else if(this.to_tag && !this.s('to').hasParam('tag')) {\n    to += ';tag=' + this.to_tag;\n  }\n\n  response += 'To: ' + to + '\\r\\n';\n  response += 'From: ' + this.getHeader('From') + '\\r\\n';\n  response += 'Call-ID: ' + this.call_id + '\\r\\n';\n  response += 'CSeq: ' + this.cseq + ' ' + this.method + '\\r\\n';\n  response += 'Content-Length: ' + 0 + '\\r\\n\\r\\n';\n\n  this.transport.send(response);\n};\n\n\n/**\n * @augments IncomingMessage\n * @class Class for incoming SIP response.\n */\nIncomingResponse = function(ua) {\n  this.logger = ua.getLogger('sip.sipmessage');\n  this.headers = {};\n  this.status_code = null;\n  this.reason_phrase = null;\n};\nIncomingResponse.prototype = new IncomingMessage();\n\nSIP.OutgoingRequest = OutgoingRequest;\nSIP.IncomingRequest = IncomingRequest;\nSIP.IncomingResponse = IncomingResponse;\n};\n\n\n/***/ },\n/* 14 */\n/***/ function(module, exports) {\n\n/**\n * @fileoverview SIP URI\n */\n\n/**\n * @augments SIP\n * @class Class creating a SIP URI.\n *\n * @param {String} [scheme]\n * @param {String} [user]\n * @param {String} host\n * @param {String} [port]\n * @param {Object} [parameters]\n * @param {Object} [headers]\n *\n */\nmodule.exports = function (SIP) {\nvar URI;\n\nURI = function(scheme, user, host, port, parameters, headers) {\n  var param, header;\n\n  // Checks\n  if(!host) {\n    throw new TypeError('missing or invalid \"host\" parameter');\n  }\n\n  // Initialize parameters\n  scheme = scheme || SIP.C.SIP;\n  this.parameters = {};\n  this.headers = {};\n\n  for (param in parameters) {\n    this.setParam(param, parameters[param]);\n  }\n\n  for (header in headers) {\n    this.setHeader(header, headers[header]);\n  }\n\n  Object.defineProperties(this, {\n    scheme: {\n      get: function(){ return scheme; },\n      set: function(value){\n        scheme = value.toLowerCase();\n      }\n    },\n\n    user: {\n      get: function(){ return user; },\n      set: function(value){\n        user = value;\n      }\n    },\n\n    host: {\n      get: function(){ return host; },\n      set: function(value){\n        host = value.toLowerCase();\n      }\n    },\n\n    port: {\n      get: function(){ return port; },\n      set: function(value){\n        port = value === 0 ? value : (parseInt(value,10) || null);\n      }\n    }\n  });\n};\nURI.prototype = {\n  setParam: function(key, value) {\n    if(key) {\n      this.parameters[key.toLowerCase()] = (typeof value === 'undefined' || value === null) ? null : value.toString().toLowerCase();\n    }\n  },\n\n  getParam: function(key) {\n    if(key) {\n      return this.parameters[key.toLowerCase()];\n    }\n  },\n\n  hasParam: function(key) {\n    if(key) {\n      return (this.parameters.hasOwnProperty(key.toLowerCase()) && true) || false;\n    }\n  },\n\n  deleteParam: function(parameter) {\n    var value;\n    parameter = parameter.toLowerCase();\n    if (this.parameters.hasOwnProperty(parameter)) {\n      value = this.parameters[parameter];\n      delete this.parameters[parameter];\n      return value;\n    }\n  },\n\n  clearParams: function() {\n    this.parameters = {};\n  },\n\n  setHeader: function(name, value) {\n    this.headers[SIP.Utils.headerize(name)] = (value instanceof Array) ? value : [value];\n  },\n\n  getHeader: function(name) {\n    if(name) {\n      return this.headers[SIP.Utils.headerize(name)];\n    }\n  },\n\n  hasHeader: function(name) {\n    if(name) {\n      return (this.headers.hasOwnProperty(SIP.Utils.headerize(name)) && true) || false;\n    }\n  },\n\n  deleteHeader: function(header) {\n    var value;\n    header = SIP.Utils.headerize(header);\n    if(this.headers.hasOwnProperty(header)) {\n      value = this.headers[header];\n      delete this.headers[header];\n      return value;\n    }\n  },\n\n  clearHeaders: function() {\n    this.headers = {};\n  },\n\n  clone: function() {\n    return new URI(\n      this.scheme,\n      this.user,\n      this.host,\n      this.port,\n      JSON.parse(JSON.stringify(this.parameters)),\n      JSON.parse(JSON.stringify(this.headers)));\n  },\n\n  toString: function(){\n    var header, parameter, idx, uri,\n      headers = [];\n\n    uri  = this.scheme + ':';\n    // add slashes if it's not a sip(s) URI\n    if (!this.scheme.match(\"^sips?$\")) {\n      uri += \"//\";\n    }\n    if (this.user) {\n      uri += SIP.Utils.escapeUser(this.user) + '@';\n    }\n    uri += this.host;\n    if (this.port || this.port === 0) {\n      uri += ':' + this.port;\n    }\n\n    for (parameter in this.parameters) {\n      uri += ';' + parameter;\n\n      if (this.parameters[parameter] !== null) {\n        uri += '='+ this.parameters[parameter];\n      }\n    }\n\n    for(header in this.headers) {\n      for(idx in this.headers[header]) {\n        headers.push(header + '=' + this.headers[header][idx]);\n      }\n    }\n\n    if (headers.length > 0) {\n      uri += '?' + headers.join('&');\n    }\n\n    return uri;\n  }\n};\n\n\n/**\n  * Parse the given string and returns a SIP.URI instance or undefined if\n  * it is an invalid URI.\n  * @public\n  * @param {String} uri\n  */\nURI.parse = function(uri) {\n  uri = SIP.Grammar.parse(uri,'SIP_URI');\n\n  if (uri !== -1) {\n    return uri;\n  } else {\n    return undefined;\n  }\n};\n\nSIP.URI = URI;\n};\n\n\n/***/ },\n/* 15 */\n/***/ function(module, exports) {\n\n/**\n * @fileoverview SIP NameAddrHeader\n */\n\n/**\n * @augments SIP\n * @class Class creating a Name Address SIP header.\n *\n * @param {SIP.URI} uri\n * @param {String} [displayName]\n * @param {Object} [parameters]\n *\n */\nmodule.exports = function (SIP) {\nvar NameAddrHeader;\n\nNameAddrHeader = function(uri, displayName, parameters) {\n  var param;\n\n  // Checks\n  if(!uri || !(uri instanceof SIP.URI)) {\n    throw new TypeError('missing or invalid \"uri\" parameter');\n  }\n\n  // Initialize parameters\n  this.uri = uri;\n  this.parameters = {};\n\n  for (param in parameters) {\n    this.setParam(param, parameters[param]);\n  }\n\n  Object.defineProperties(this, {\n    displayName: {\n      get: function() { return displayName; },\n      set: function(value) {\n        displayName = (value === 0) ? '0' : value;\n      }\n    }\n  });\n};\nNameAddrHeader.prototype = {\n  setParam: function (key, value) {\n    if(key) {\n      this.parameters[key.toLowerCase()] = (typeof value === 'undefined' || value === null) ? null : value.toString();\n    }\n  },\n  getParam: SIP.URI.prototype.getParam,\n  hasParam: SIP.URI.prototype.hasParam,\n  deleteParam: SIP.URI.prototype.deleteParam,\n  clearParams: SIP.URI.prototype.clearParams,\n\n  clone: function() {\n    return new NameAddrHeader(\n      this.uri.clone(),\n      this.displayName,\n      JSON.parse(JSON.stringify(this.parameters)));\n  },\n\n  toString: function() {\n    var body, parameter;\n\n    body  = (this.displayName || this.displayName === 0) ? '\"' + this.displayName + '\" ' : '';\n    body += '<' + this.uri.toString() + '>';\n\n    for (parameter in this.parameters) {\n      body += ';' + parameter;\n\n      if (this.parameters[parameter] !== null) {\n        body += '='+ this.parameters[parameter];\n      }\n    }\n\n    return body;\n  }\n};\n\n\n/**\n  * Parse the given string and returns a SIP.NameAddrHeader instance or undefined if\n  * it is an invalid NameAddrHeader.\n  * @public\n  * @param {String} name_addr_header\n  */\nNameAddrHeader.parse = function(name_addr_header) {\n  name_addr_header = SIP.Grammar.parse(name_addr_header,'Name_Addr_Header');\n\n  if (name_addr_header !== -1) {\n    return name_addr_header;\n  } else {\n    return undefined;\n  }\n};\n\nSIP.NameAddrHeader = NameAddrHeader;\n};\n\n\n/***/ },\n/* 16 */\n/***/ function(module, exports) {\n\n/**\n * @fileoverview SIP Transactions\n */\n\n/**\n * SIP Transactions module.\n * @augments SIP\n */\nmodule.exports = function (SIP) {\nvar\n  C = {\n    // Transaction states\n    STATUS_TRYING:     1,\n    STATUS_PROCEEDING: 2,\n    STATUS_CALLING:    3,\n    STATUS_ACCEPTED:   4,\n    STATUS_COMPLETED:  5,\n    STATUS_TERMINATED: 6,\n    STATUS_CONFIRMED:  7,\n\n    // Transaction types\n    NON_INVITE_CLIENT: 'nict',\n    NON_INVITE_SERVER: 'nist',\n    INVITE_CLIENT: 'ict',\n    INVITE_SERVER: 'ist'\n  };\n\n/**\n* @augments SIP.Transactions\n* @class Non Invite Client Transaction\n* @param {SIP.RequestSender} request_sender\n* @param {SIP.OutgoingRequest} request\n* @param {SIP.Transport} transport\n*/\nvar NonInviteClientTransaction = function(request_sender, request, transport) {\n  var via,\n    events = ['stateChanged'];\n\n  this.type = C.NON_INVITE_CLIENT;\n  this.transport = transport;\n  this.id = 'z9hG4bK' + Math.floor(Math.random() * 10000000);\n  this.request_sender = request_sender;\n  this.request = request;\n\n  this.logger = request_sender.ua.getLogger('sip.transaction.nict', this.id);\n\n  via = 'SIP/2.0/' + (request_sender.ua.configuration.hackViaTcp ? 'TCP' : transport.server.scheme);\n  via += ' ' + request_sender.ua.configuration.viaHost + ';branch=' + this.id;\n\n  this.request.setHeader('via', via);\n\n  this.request_sender.ua.newTransaction(this);\n\n  this.initEvents(events);\n};\nNonInviteClientTransaction.prototype = new SIP.EventEmitter();\n\nNonInviteClientTransaction.prototype.stateChanged = function(state) {\n  this.state = state;\n  this.emit('stateChanged');\n};\n\nNonInviteClientTransaction.prototype.send = function() {\n  var tr = this;\n\n  this.stateChanged(C.STATUS_TRYING);\n  this.F = SIP.Timers.setTimeout(tr.timer_F.bind(tr), SIP.Timers.TIMER_F);\n\n  if(!this.transport.send(this.request)) {\n    this.onTransportError();\n  }\n};\n\nNonInviteClientTransaction.prototype.onTransportError = function() {\n  this.logger.log('transport error occurred, deleting non-INVITE client transaction ' + this.id);\n  SIP.Timers.clearTimeout(this.F);\n  SIP.Timers.clearTimeout(this.K);\n  this.stateChanged(C.STATUS_TERMINATED);\n  this.request_sender.ua.destroyTransaction(this);\n  this.request_sender.onTransportError();\n};\n\nNonInviteClientTransaction.prototype.timer_F = function() {\n  this.logger.log('Timer F expired for non-INVITE client transaction ' + this.id);\n  this.stateChanged(C.STATUS_TERMINATED);\n  this.request_sender.ua.destroyTransaction(this);\n  this.request_sender.onRequestTimeout();\n};\n\nNonInviteClientTransaction.prototype.timer_K = function() {\n  this.stateChanged(C.STATUS_TERMINATED);\n  this.request_sender.ua.destroyTransaction(this);\n};\n\nNonInviteClientTransaction.prototype.receiveResponse = function(response) {\n  var\n    tr = this,\n    status_code = response.status_code;\n\n  if(status_code < 200) {\n    switch(this.state) {\n      case C.STATUS_TRYING:\n      case C.STATUS_PROCEEDING:\n        this.stateChanged(C.STATUS_PROCEEDING);\n        this.request_sender.receiveResponse(response);\n        break;\n    }\n  } else {\n    switch(this.state) {\n      case C.STATUS_TRYING:\n      case C.STATUS_PROCEEDING:\n        this.stateChanged(C.STATUS_COMPLETED);\n        SIP.Timers.clearTimeout(this.F);\n\n        if(status_code === 408) {\n          this.request_sender.onRequestTimeout();\n        } else {\n          this.request_sender.receiveResponse(response);\n        }\n\n        this.K = SIP.Timers.setTimeout(tr.timer_K.bind(tr), SIP.Timers.TIMER_K);\n        break;\n      case C.STATUS_COMPLETED:\n        break;\n    }\n  }\n};\n\n\n\n/**\n* @augments SIP.Transactions\n* @class Invite Client Transaction\n* @param {SIP.RequestSender} request_sender\n* @param {SIP.OutgoingRequest} request\n* @param {SIP.Transport} transport\n*/\nvar InviteClientTransaction = function(request_sender, request, transport) {\n  var via,\n    tr = this,\n    events = ['stateChanged'];\n\n  this.type = C.INVITE_CLIENT;\n  this.transport = transport;\n  this.id = 'z9hG4bK' + Math.floor(Math.random() * 10000000);\n  this.request_sender = request_sender;\n  this.request = request;\n\n  this.logger = request_sender.ua.getLogger('sip.transaction.ict', this.id);\n\n  via = 'SIP/2.0/' + (request_sender.ua.configuration.hackViaTcp ? 'TCP' : transport.server.scheme);\n  via += ' ' + request_sender.ua.configuration.viaHost + ';branch=' + this.id;\n\n  this.request.setHeader('via', via);\n\n  this.request_sender.ua.newTransaction(this);\n\n  // Add the cancel property to the request.\n  //Will be called from the request instance, not the transaction itself.\n  this.request.cancel = function(reason) {\n    tr.cancel_request(tr, reason);\n  };\n\n  this.initEvents(events);\n};\nInviteClientTransaction.prototype = new SIP.EventEmitter();\n\nInviteClientTransaction.prototype.stateChanged = function(state) {\n  this.state = state;\n  this.emit('stateChanged');\n};\n\nInviteClientTransaction.prototype.send = function() {\n  var tr = this;\n  this.stateChanged(C.STATUS_CALLING);\n  this.B = SIP.Timers.setTimeout(tr.timer_B.bind(tr), SIP.Timers.TIMER_B);\n\n  if(!this.transport.send(this.request)) {\n    this.onTransportError();\n  }\n};\n\nInviteClientTransaction.prototype.onTransportError = function() {\n  this.logger.log('transport error occurred, deleting INVITE client transaction ' + this.id);\n  SIP.Timers.clearTimeout(this.B);\n  SIP.Timers.clearTimeout(this.D);\n  SIP.Timers.clearTimeout(this.M);\n  this.stateChanged(C.STATUS_TERMINATED);\n  this.request_sender.ua.destroyTransaction(this);\n\n  if (this.state !== C.STATUS_ACCEPTED) {\n    this.request_sender.onTransportError();\n  }\n};\n\n// RFC 6026 7.2\nInviteClientTransaction.prototype.timer_M = function() {\n  this.logger.log('Timer M expired for INVITE client transaction ' + this.id);\n\n  if(this.state === C.STATUS_ACCEPTED) {\n    SIP.Timers.clearTimeout(this.B);\n    this.stateChanged(C.STATUS_TERMINATED);\n    this.request_sender.ua.destroyTransaction(this);\n  }\n};\n\n// RFC 3261 17.1.1\nInviteClientTransaction.prototype.timer_B = function() {\n  this.logger.log('Timer B expired for INVITE client transaction ' + this.id);\n  if(this.state === C.STATUS_CALLING) {\n    this.stateChanged(C.STATUS_TERMINATED);\n    this.request_sender.ua.destroyTransaction(this);\n    this.request_sender.onRequestTimeout();\n  }\n};\n\nInviteClientTransaction.prototype.timer_D = function() {\n  this.logger.log('Timer D expired for INVITE client transaction ' + this.id);\n  SIP.Timers.clearTimeout(this.B);\n  this.stateChanged(C.STATUS_TERMINATED);\n  this.request_sender.ua.destroyTransaction(this);\n};\n\nInviteClientTransaction.prototype.sendACK = function(response) {\n  var tr = this;\n\n  this.ack = 'ACK ' + this.request.ruri + ' SIP/2.0\\r\\n';\n  this.ack += 'Via: ' + this.request.headers['Via'].toString() + '\\r\\n';\n\n  if(this.request.headers['Route']) {\n    this.ack += 'Route: ' + this.request.headers['Route'].toString() + '\\r\\n';\n  }\n\n  this.ack += 'To: ' + response.getHeader('to') + '\\r\\n';\n  this.ack += 'From: ' + this.request.headers['From'].toString() + '\\r\\n';\n  this.ack += 'Call-ID: ' + this.request.headers['Call-ID'].toString() + '\\r\\n';\n  this.ack += 'CSeq: ' + this.request.headers['CSeq'].toString().split(' ')[0];\n  this.ack += ' ACK\\r\\n\\r\\n';\n\n  this.D = SIP.Timers.setTimeout(tr.timer_D.bind(tr), SIP.Timers.TIMER_D);\n\n  this.transport.send(this.ack);\n};\n\nInviteClientTransaction.prototype.cancel_request = function(tr, reason) {\n  var request = tr.request;\n\n  this.cancel = SIP.C.CANCEL + ' ' + request.ruri + ' SIP/2.0\\r\\n';\n  this.cancel += 'Via: ' + request.headers['Via'].toString() + '\\r\\n';\n\n  if(this.request.headers['Route']) {\n    this.cancel += 'Route: ' + request.headers['Route'].toString() + '\\r\\n';\n  }\n\n  this.cancel += 'To: ' + request.headers['To'].toString() + '\\r\\n';\n  this.cancel += 'From: ' + request.headers['From'].toString() + '\\r\\n';\n  this.cancel += 'Call-ID: ' + request.headers['Call-ID'].toString() + '\\r\\n';\n  this.cancel += 'CSeq: ' + request.headers['CSeq'].toString().split(' ')[0] +\n  ' CANCEL\\r\\n';\n\n  if(reason) {\n    this.cancel += 'Reason: ' + reason + '\\r\\n';\n  }\n\n  this.cancel += 'Content-Length: 0\\r\\n\\r\\n';\n\n  // Send only if a provisional response (>100) has been received.\n  if(this.state === C.STATUS_PROCEEDING) {\n    this.transport.send(this.cancel);\n  }\n};\n\nInviteClientTransaction.prototype.receiveResponse = function(response) {\n  var\n  tr = this,\n  status_code = response.status_code;\n\n  if(status_code >= 100 && status_code <= 199) {\n    switch(this.state) {\n      case C.STATUS_CALLING:\n        this.stateChanged(C.STATUS_PROCEEDING);\n        this.request_sender.receiveResponse(response);\n        if(this.cancel) {\n          this.transport.send(this.cancel);\n        }\n        break;\n      case C.STATUS_PROCEEDING:\n        this.request_sender.receiveResponse(response);\n        break;\n    }\n  } else if(status_code >= 200 && status_code <= 299) {\n    switch(this.state) {\n      case C.STATUS_CALLING:\n      case C.STATUS_PROCEEDING:\n        this.stateChanged(C.STATUS_ACCEPTED);\n        this.M = SIP.Timers.setTimeout(tr.timer_M.bind(tr), SIP.Timers.TIMER_M);\n        this.request_sender.receiveResponse(response);\n        break;\n      case C.STATUS_ACCEPTED:\n        this.request_sender.receiveResponse(response);\n        break;\n    }\n  } else if(status_code >= 300 && status_code <= 699) {\n    switch(this.state) {\n      case C.STATUS_CALLING:\n      case C.STATUS_PROCEEDING:\n        this.stateChanged(C.STATUS_COMPLETED);\n        this.sendACK(response);\n        this.request_sender.receiveResponse(response);\n        break;\n      case C.STATUS_COMPLETED:\n        this.sendACK(response);\n        break;\n    }\n  }\n};\n\n\n/**\n * @augments SIP.Transactions\n * @class ACK Client Transaction\n * @param {SIP.RequestSender} request_sender\n * @param {SIP.OutgoingRequest} request\n * @param {SIP.Transport} transport\n */\nvar AckClientTransaction = function(request_sender, request, transport) {\n  var via;\n\n  this.transport = transport;\n  this.id = 'z9hG4bK' + Math.floor(Math.random() * 10000000);\n  this.request_sender = request_sender;\n  this.request = request;\n\n  this.logger = request_sender.ua.getLogger('sip.transaction.nict', this.id);\n\n  via = 'SIP/2.0/' + (request_sender.ua.configuration.hackViaTcp ? 'TCP' : transport.server.scheme);\n  via += ' ' + request_sender.ua.configuration.viaHost + ';branch=' + this.id;\n\n  this.request.setHeader('via', via);\n};\nAckClientTransaction.prototype = new SIP.EventEmitter();\n\nAckClientTransaction.prototype.send = function() {\n  if(!this.transport.send(this.request)) {\n    this.onTransportError();\n  }\n};\n\nAckClientTransaction.prototype.onTransportError = function() {\n  this.logger.log('transport error occurred, for an ACK client transaction ' + this.id);\n  this.request_sender.onTransportError();\n};\n\n\n/**\n* @augments SIP.Transactions\n* @class Non Invite Server Transaction\n* @param {SIP.IncomingRequest} request\n* @param {SIP.UA} ua\n*/\nvar NonInviteServerTransaction = function(request, ua) {\n  var events = ['stateChanged'];\n\n  this.type = C.NON_INVITE_SERVER;\n  this.id = request.via_branch;\n  this.request = request;\n  this.transport = request.transport;\n  this.ua = ua;\n  this.last_response = '';\n  request.server_transaction = this;\n\n  this.logger = ua.getLogger('sip.transaction.nist', this.id);\n\n  this.state = C.STATUS_TRYING;\n\n  ua.newTransaction(this);\n\n  this.initEvents(events);\n};\nNonInviteServerTransaction.prototype = new SIP.EventEmitter();\n\nNonInviteServerTransaction.prototype.stateChanged = function(state) {\n  this.state = state;\n  this.emit('stateChanged');\n};\n\nNonInviteServerTransaction.prototype.timer_J = function() {\n  this.logger.log('Timer J expired for non-INVITE server transaction ' + this.id);\n  this.stateChanged(C.STATUS_TERMINATED);\n  this.ua.destroyTransaction(this);\n};\n\nNonInviteServerTransaction.prototype.onTransportError = function() {\n  if (!this.transportError) {\n    this.transportError = true;\n\n    this.logger.log('transport error occurred, deleting non-INVITE server transaction ' + this.id);\n\n    SIP.Timers.clearTimeout(this.J);\n    this.stateChanged(C.STATUS_TERMINATED);\n    this.ua.destroyTransaction(this);\n  }\n};\n\nNonInviteServerTransaction.prototype.receiveResponse = function(status_code, response, onSuccess, onFailure) {\n  var tr = this;\n\n  if(status_code === 100) {\n    /* RFC 4320 4.1\n     * 'A SIP element MUST NOT\n     * send any provisional response with a\n     * Status-Code other than 100 to a non-INVITE request.'\n     */\n    switch(this.state) {\n      case C.STATUS_TRYING:\n        this.stateChanged(C.STATUS_PROCEEDING);\n        if(!this.transport.send(response))  {\n          this.onTransportError();\n        }\n        break;\n      case C.STATUS_PROCEEDING:\n        this.last_response = response;\n        if(!this.transport.send(response)) {\n          this.onTransportError();\n          if (onFailure) {\n            onFailure();\n          }\n        } else if (onSuccess) {\n          onSuccess();\n        }\n        break;\n    }\n  } else if(status_code >= 200 && status_code <= 699) {\n    switch(this.state) {\n      case C.STATUS_TRYING:\n      case C.STATUS_PROCEEDING:\n        this.stateChanged(C.STATUS_COMPLETED);\n        this.last_response = response;\n        this.J = SIP.Timers.setTimeout(tr.timer_J.bind(tr), SIP.Timers.TIMER_J);\n        if(!this.transport.send(response)) {\n          this.onTransportError();\n          if (onFailure) {\n            onFailure();\n          }\n        } else if (onSuccess) {\n          onSuccess();\n        }\n        break;\n      case C.STATUS_COMPLETED:\n        break;\n    }\n  }\n};\n\n/**\n* @augments SIP.Transactions\n* @class Invite Server Transaction\n* @param {SIP.IncomingRequest} request\n* @param {SIP.UA} ua\n*/\nvar InviteServerTransaction = function(request, ua) {\n  var events = ['stateChanged'];\n\n  this.type = C.INVITE_SERVER;\n  this.id = request.via_branch;\n  this.request = request;\n  this.transport = request.transport;\n  this.ua = ua;\n  this.last_response = '';\n  request.server_transaction = this;\n\n  this.logger = ua.getLogger('sip.transaction.ist', this.id);\n\n  this.state = C.STATUS_PROCEEDING;\n\n  ua.newTransaction(this);\n\n  this.resendProvisionalTimer = null;\n\n  request.reply(100);\n\n  this.initEvents(events);\n};\nInviteServerTransaction.prototype = new SIP.EventEmitter();\n\nInviteServerTransaction.prototype.stateChanged = function(state) {\n  this.state = state;\n  this.emit('stateChanged');\n};\n\nInviteServerTransaction.prototype.timer_H = function() {\n  this.logger.log('Timer H expired for INVITE server transaction ' + this.id);\n\n  if(this.state === C.STATUS_COMPLETED) {\n    this.logger.warn('transactions', 'ACK for INVITE server transaction was never received, call will be terminated');\n  }\n\n  this.stateChanged(C.STATUS_TERMINATED);\n  this.ua.destroyTransaction(this);\n};\n\nInviteServerTransaction.prototype.timer_I = function() {\n  this.stateChanged(C.STATUS_TERMINATED);\n  this.ua.destroyTransaction(this);\n};\n\n// RFC 6026 7.1\nInviteServerTransaction.prototype.timer_L = function() {\n  this.logger.log('Timer L expired for INVITE server transaction ' + this.id);\n\n  if(this.state === C.STATUS_ACCEPTED) {\n    this.stateChanged(C.STATUS_TERMINATED);\n    this.ua.destroyTransaction(this);\n  }\n};\n\nInviteServerTransaction.prototype.onTransportError = function() {\n  if (!this.transportError) {\n    this.transportError = true;\n\n    this.logger.log('transport error occurred, deleting INVITE server transaction ' + this.id);\n\n    if (this.resendProvisionalTimer !== null) {\n      SIP.Timers.clearInterval(this.resendProvisionalTimer);\n      this.resendProvisionalTimer = null;\n    }\n\n    SIP.Timers.clearTimeout(this.L);\n    SIP.Timers.clearTimeout(this.H);\n    SIP.Timers.clearTimeout(this.I);\n\n    this.stateChanged(C.STATUS_TERMINATED);\n    this.ua.destroyTransaction(this);\n  }\n};\n\nInviteServerTransaction.prototype.resend_provisional = function() {\n  if(!this.transport.send(this.last_response)) {\n    this.onTransportError();\n  }\n};\n\n// INVITE Server Transaction RFC 3261 17.2.1\nInviteServerTransaction.prototype.receiveResponse = function(status_code, response, onSuccess, onFailure) {\n  var tr = this;\n\n  if(status_code >= 100 && status_code <= 199) {\n    switch(this.state) {\n      case C.STATUS_PROCEEDING:\n        if(!this.transport.send(response)) {\n          this.onTransportError();\n        }\n        this.last_response = response;\n        break;\n    }\n  }\n\n  if(status_code > 100 && status_code <= 199 && this.state === C.STATUS_PROCEEDING) {\n    // Trigger the resendProvisionalTimer only for the first non 100 provisional response.\n    if(this.resendProvisionalTimer === null) {\n      this.resendProvisionalTimer = SIP.Timers.setInterval(tr.resend_provisional.bind(tr),\n        SIP.Timers.PROVISIONAL_RESPONSE_INTERVAL);\n    }\n  } else if(status_code >= 200 && status_code <= 299) {\n    switch(this.state) {\n      case C.STATUS_PROCEEDING:\n        this.stateChanged(C.STATUS_ACCEPTED);\n        this.last_response = response;\n        this.L = SIP.Timers.setTimeout(tr.timer_L.bind(tr), SIP.Timers.TIMER_L);\n\n        if (this.resendProvisionalTimer !== null) {\n          SIP.Timers.clearInterval(this.resendProvisionalTimer);\n          this.resendProvisionalTimer = null;\n        }\n        /* falls through */\n        case C.STATUS_ACCEPTED:\n          // Note that this point will be reached for proceeding tr.state also.\n          if(!this.transport.send(response)) {\n            this.onTransportError();\n            if (onFailure) {\n              onFailure();\n            }\n          } else if (onSuccess) {\n            onSuccess();\n          }\n          break;\n    }\n  } else if(status_code >= 300 && status_code <= 699) {\n    switch(this.state) {\n      case C.STATUS_PROCEEDING:\n        if (this.resendProvisionalTimer !== null) {\n          SIP.Timers.clearInterval(this.resendProvisionalTimer);\n          this.resendProvisionalTimer = null;\n        }\n\n        if(!this.transport.send(response)) {\n          this.onTransportError();\n          if (onFailure) {\n            onFailure();\n          }\n        } else {\n          this.stateChanged(C.STATUS_COMPLETED);\n          this.H = SIP.Timers.setTimeout(tr.timer_H.bind(tr), SIP.Timers.TIMER_H);\n          if (onSuccess) {\n            onSuccess();\n          }\n        }\n        break;\n    }\n  }\n};\n\n/**\n * @function\n * @param {SIP.UA} ua\n * @param {SIP.IncomingRequest} request\n *\n * @return {boolean}\n * INVITE:\n *  _true_ if retransmission\n *  _false_ new request\n *\n * ACK:\n *  _true_  ACK to non2xx response\n *  _false_ ACK must be passed to TU (accepted state)\n *          ACK to 2xx response\n *\n * CANCEL:\n *  _true_  no matching invite transaction\n *  _false_ matching invite transaction and no final response sent\n *\n * OTHER:\n *  _true_  retransmission\n *  _false_ new request\n */\nvar checkTransaction = function(ua, request) {\n  var tr;\n\n  switch(request.method) {\n    case SIP.C.INVITE:\n      tr = ua.transactions.ist[request.via_branch];\n      if(tr) {\n        switch(tr.state) {\n          case C.STATUS_PROCEEDING:\n            tr.transport.send(tr.last_response);\n            break;\n\n            // RFC 6026 7.1 Invite retransmission\n            //received while in C.STATUS_ACCEPTED state. Absorb it.\n          case C.STATUS_ACCEPTED:\n            break;\n        }\n        return true;\n      }\n      break;\n    case SIP.C.ACK:\n      tr = ua.transactions.ist[request.via_branch];\n\n      // RFC 6026 7.1\n      if(tr) {\n        if(tr.state === C.STATUS_ACCEPTED) {\n          return false;\n        } else if(tr.state === C.STATUS_COMPLETED) {\n          tr.state = C.STATUS_CONFIRMED;\n          tr.I = SIP.Timers.setTimeout(tr.timer_I.bind(tr), SIP.Timers.TIMER_I);\n          return true;\n        }\n      }\n\n      // ACK to 2XX Response.\n      else {\n        return false;\n      }\n      break;\n    case SIP.C.CANCEL:\n      tr = ua.transactions.ist[request.via_branch];\n      if(tr) {\n        request.reply_sl(200);\n        if(tr.state === C.STATUS_PROCEEDING) {\n          return false;\n        } else {\n          return true;\n        }\n      } else {\n        request.reply_sl(481);\n        return true;\n      }\n      break;\n    default:\n\n      // Non-INVITE Server Transaction RFC 3261 17.2.2\n      tr = ua.transactions.nist[request.via_branch];\n      if(tr) {\n        switch(tr.state) {\n          case C.STATUS_TRYING:\n            break;\n          case C.STATUS_PROCEEDING:\n          case C.STATUS_COMPLETED:\n            tr.transport.send(tr.last_response);\n            break;\n        }\n        return true;\n      }\n      break;\n  }\n};\n\nSIP.Transactions = {\n  C: C,\n  checkTransaction: checkTransaction,\n  NonInviteClientTransaction: NonInviteClientTransaction,\n  InviteClientTransaction: InviteClientTransaction,\n  AckClientTransaction: AckClientTransaction,\n  NonInviteServerTransaction: NonInviteServerTransaction,\n  InviteServerTransaction: InviteServerTransaction\n};\n\n};\n\n\n/***/ },\n/* 17 */\n/***/ function(module, exports) {\n\n\n/**\n * @fileoverview In-Dialog Request Sender\n */\n\n/**\n * @augments SIP.Dialog\n * @class Class creating an In-dialog request sender.\n * @param {SIP.Dialog} dialog\n * @param {Object} applicant\n * @param {SIP.OutgoingRequest} request\n */\n/**\n * @fileoverview in-Dialog Request Sender\n */\n\nmodule.exports = function (SIP) {\nvar RequestSender;\n\nRequestSender = function(dialog, applicant, request) {\n\n  this.dialog = dialog;\n  this.applicant = applicant;\n  this.request = request;\n\n  // RFC3261 14.1 Modifying an Existing Session. UAC Behavior.\n  this.reattempt = false;\n  this.reattemptTimer = null;\n};\n\nRequestSender.prototype = {\n  send: function() {\n    var self = this,\n      request_sender = new SIP.RequestSender(this, this.dialog.owner.ua);\n\n      request_sender.send();\n\n    // RFC3261 14.2 Modifying an Existing Session -UAC BEHAVIOR-\n    if (this.request.method === SIP.C.INVITE && request_sender.clientTransaction.state !== SIP.Transactions.C.STATUS_TERMINATED) {\n      this.dialog.uac_pending_reply = true;\n      request_sender.clientTransaction.on('stateChanged', function stateChanged(){\n        if (this.state === SIP.Transactions.C.STATUS_ACCEPTED ||\n            this.state === SIP.Transactions.C.STATUS_COMPLETED ||\n            this.state === SIP.Transactions.C.STATUS_TERMINATED) {\n\n          this.off('stateChanged', stateChanged);\n          self.dialog.uac_pending_reply = false;\n\n          if (self.dialog.uas_pending_reply === false) {\n            self.dialog.owner.onReadyToReinvite();\n          }\n        }\n      });\n    }\n  },\n\n  onRequestTimeout: function() {\n    this.applicant.onRequestTimeout();\n  },\n\n  onTransportError: function() {\n    this.applicant.onTransportError();\n  },\n\n  receiveResponse: function(response) {\n    var self = this;\n\n    // RFC3261 12.2.1.2 408 or 481 is received for a request within a dialog.\n    if (response.status_code === 408 || response.status_code === 481) {\n      this.applicant.onDialogError(response);\n    } else if (response.method === SIP.C.INVITE && response.status_code === 491) {\n      if (this.reattempt) {\n        this.applicant.receiveResponse(response);\n      } else {\n        this.request.cseq.value = this.dialog.local_seqnum += 1;\n        this.reattemptTimer = SIP.Timers.setTimeout(\n          function() {\n            if (self.applicant.owner.status !== SIP.Session.C.STATUS_TERMINATED) {\n              self.reattempt = true;\n              self.request_sender.send();\n            }\n          },\n          this.getReattemptTimeout()\n        );\n      }\n    } else {\n      this.applicant.receiveResponse(response);\n    }\n  }\n};\n\nreturn RequestSender;\n};\n\n\n/***/ },\n/* 18 */\n/***/ function(module, exports) {\n\n/**\n * @fileoverview SIP Dialog\n */\n\n/**\n * @augments SIP\n * @class Class creating a SIP dialog.\n * @param {SIP.RTCSession} owner\n * @param {SIP.IncomingRequest|SIP.IncomingResponse} message\n * @param {Enum} type UAC / UAS\n * @param {Enum} state SIP.Dialog.C.STATUS_EARLY / SIP.Dialog.C.STATUS_CONFIRMED\n */\nmodule.exports = function (SIP, RequestSender) {\n\nvar Dialog,\n  C = {\n    // Dialog states\n    STATUS_EARLY:       1,\n    STATUS_CONFIRMED:   2\n  };\n\n// RFC 3261 12.1\nDialog = function(owner, message, type, state) {\n  var contact;\n\n  this.uac_pending_reply = false;\n  this.uas_pending_reply = false;\n\n  if(!message.hasHeader('contact')) {\n    return {\n      error: 'unable to create a Dialog without Contact header field'\n    };\n  }\n\n  if(message instanceof SIP.IncomingResponse) {\n    state = (message.status_code < 200) ? C.STATUS_EARLY : C.STATUS_CONFIRMED;\n  } else {\n    // Create confirmed dialog if state is not defined\n    state = state || C.STATUS_CONFIRMED;\n  }\n\n  contact = message.parseHeader('contact');\n\n  // RFC 3261 12.1.1\n  if(type === 'UAS') {\n    this.id = {\n      call_id: message.call_id,\n      local_tag: message.to_tag,\n      remote_tag: message.from_tag,\n      toString: function() {\n        return this.call_id + this.local_tag + this.remote_tag;\n      }\n    };\n    this.state = state;\n    this.remote_seqnum = message.cseq;\n    this.local_uri = message.parseHeader('to').uri;\n    this.remote_uri = message.parseHeader('from').uri;\n    this.remote_target = contact.uri;\n    this.route_set = message.getHeaders('record-route');\n    this.invite_seqnum = message.cseq;\n    this.local_seqnum = message.cseq;\n  }\n  // RFC 3261 12.1.2\n  else if(type === 'UAC') {\n    this.id = {\n      call_id: message.call_id,\n      local_tag: message.from_tag,\n      remote_tag: message.to_tag,\n      toString: function() {\n        return this.call_id + this.local_tag + this.remote_tag;\n      }\n    };\n    this.state = state;\n    this.invite_seqnum = message.cseq;\n    this.local_seqnum = message.cseq;\n    this.local_uri = message.parseHeader('from').uri;\n    this.pracked = [];\n    this.remote_uri = message.parseHeader('to').uri;\n    this.remote_target = contact.uri;\n    this.route_set = message.getHeaders('record-route').reverse();\n\n    //RENDERBODY\n    if (this.state === C.STATUS_EARLY && (!owner.hasOffer)) {\n      this.mediaHandler = owner.mediaHandlerFactory(owner);\n    }\n  }\n\n  this.logger = owner.ua.getLogger('sip.dialog', this.id.toString());\n  this.owner = owner;\n  owner.ua.dialogs[this.id.toString()] = this;\n  this.logger.log('new ' + type + ' dialog created with status ' + (this.state === C.STATUS_EARLY ? 'EARLY': 'CONFIRMED'));\n};\n\nDialog.prototype = {\n  /**\n   * @param {SIP.IncomingMessage} message\n   * @param {Enum} UAC/UAS\n   */\n  update: function(message, type) {\n    this.state = C.STATUS_CONFIRMED;\n\n    this.logger.log('dialog '+ this.id.toString() +'  changed to CONFIRMED state');\n\n    if(type === 'UAC') {\n      // RFC 3261 13.2.2.4\n      this.route_set = message.getHeaders('record-route').reverse();\n    }\n  },\n\n  terminate: function() {\n    this.logger.log('dialog ' + this.id.toString() + ' deleted');\n    if (this.mediaHandler && this.state !== C.STATUS_CONFIRMED) {\n      this.mediaHandler.peerConnection.close();\n    }\n    delete this.owner.ua.dialogs[this.id.toString()];\n  },\n\n  /**\n  * @param {String} method request method\n  * @param {Object} extraHeaders extra headers\n  * @returns {SIP.OutgoingRequest}\n  */\n\n  // RFC 3261 12.2.1.1\n  createRequest: function(method, extraHeaders, body) {\n    var cseq, request;\n    extraHeaders = (extraHeaders || []).slice();\n\n    if(!this.local_seqnum) { this.local_seqnum = Math.floor(Math.random() * 10000); }\n\n    cseq = (method === SIP.C.CANCEL || method === SIP.C.ACK) ? this.invite_seqnum : this.local_seqnum += 1;\n\n    request = new SIP.OutgoingRequest(\n      method,\n      this.remote_target,\n      this.owner.ua, {\n        'cseq': cseq,\n        'call_id': this.id.call_id,\n        'from_uri': this.local_uri,\n        'from_tag': this.id.local_tag,\n        'to_uri': this.remote_uri,\n        'to_tag': this.id.remote_tag,\n        'route_set': this.route_set\n      }, extraHeaders, body);\n\n    request.dialog = this;\n\n    return request;\n  },\n\n  /**\n  * @param {SIP.IncomingRequest} request\n  * @returns {Boolean}\n  */\n\n  // RFC 3261 12.2.2\n  checkInDialogRequest: function(request) {\n    var self = this;\n\n    if(!this.remote_seqnum) {\n      this.remote_seqnum = request.cseq;\n    } else if(request.cseq < this.remote_seqnum) {\n        //Do not try to reply to an ACK request.\n        if (request.method !== SIP.C.ACK) {\n          request.reply(500);\n        }\n        if (request.cseq === this.invite_seqnum) {\n          return true;\n        }\n        return false;\n    } else if(request.cseq > this.remote_seqnum) {\n      this.remote_seqnum = request.cseq;\n    }\n\n    switch(request.method) {\n      // RFC3261 14.2 Modifying an Existing Session -UAS BEHAVIOR-\n      case SIP.C.INVITE:\n        if (this.uac_pending_reply === true) {\n          request.reply(491);\n        } else if (this.uas_pending_reply === true) {\n          var retryAfter = (Math.random() * 10 | 0) + 1;\n          request.reply(500, null, ['Retry-After:' + retryAfter]);\n          return false;\n        } else {\n          this.uas_pending_reply = true;\n          request.server_transaction.on('stateChanged', function stateChanged(){\n            if (this.state === SIP.Transactions.C.STATUS_ACCEPTED ||\n                this.state === SIP.Transactions.C.STATUS_COMPLETED ||\n                this.state === SIP.Transactions.C.STATUS_TERMINATED) {\n\n              this.off('stateChanged', stateChanged);\n              self.uas_pending_reply = false;\n\n              if (self.uac_pending_reply === false) {\n                self.owner.onReadyToReinvite();\n              }\n            }\n          });\n        }\n\n        // RFC3261 12.2.2 Replace the dialog`s remote target URI if the request is accepted\n        if(request.hasHeader('contact')) {\n          request.server_transaction.on('stateChanged', function(){\n            if (this.state === SIP.Transactions.C.STATUS_ACCEPTED) {\n              self.remote_target = request.parseHeader('contact').uri;\n            }\n          });\n        }\n        break;\n      case SIP.C.NOTIFY:\n        // RFC6665 3.2 Replace the dialog`s remote target URI if the request is accepted\n        if(request.hasHeader('contact')) {\n          request.server_transaction.on('stateChanged', function(){\n            if (this.state === SIP.Transactions.C.STATUS_COMPLETED) {\n              self.remote_target = request.parseHeader('contact').uri;\n            }\n          });\n        }\n        break;\n    }\n\n    return true;\n  },\n\n  sendRequest: function(applicant, method, options) {\n    options = options || {};\n\n    var\n      extraHeaders = (options.extraHeaders || []).slice(),\n      body = options.body || null,\n      request = this.createRequest(method, extraHeaders, body),\n      request_sender = new RequestSender(this, applicant, request);\n\n    request_sender.send();\n\n    return request;\n  },\n\n  /**\n  * @param {SIP.IncomingRequest} request\n  */\n  receiveRequest: function(request) {\n    //Check in-dialog request\n    if(!this.checkInDialogRequest(request)) {\n      return;\n    }\n\n    this.owner.receiveRequest(request);\n  }\n};\n\nDialog.C = C;\nSIP.Dialog = Dialog;\n};\n\n\n/***/ },\n/* 19 */\n/***/ function(module, exports) {\n\n\n/**\n * @fileoverview Request Sender\n */\n\n/**\n * @augments SIP\n * @class Class creating a request sender.\n * @param {Object} applicant\n * @param {SIP.UA} ua\n */\nmodule.exports = function (SIP) {\nvar RequestSender;\n\nRequestSender = function(applicant, ua) {\n  this.logger = ua.getLogger('sip.requestsender');\n  this.ua = ua;\n  this.applicant = applicant;\n  this.method = applicant.request.method;\n  this.request = applicant.request;\n  this.credentials = null;\n  this.challenged = false;\n  this.staled = false;\n\n  // If ua is in closing process or even closed just allow sending Bye and ACK\n  if (ua.status === SIP.UA.C.STATUS_USER_CLOSED && (this.method !== SIP.C.BYE || this.method !== SIP.C.ACK)) {\n    this.onTransportError();\n  }\n};\n\n/**\n* Create the client transaction and send the message.\n*/\nRequestSender.prototype = {\n  send: function() {\n    switch(this.method) {\n      case \"INVITE\":\n        this.clientTransaction = new SIP.Transactions.InviteClientTransaction(this, this.request, this.ua.transport);\n        break;\n      case \"ACK\":\n        this.clientTransaction = new SIP.Transactions.AckClientTransaction(this, this.request, this.ua.transport);\n        break;\n      default:\n        this.clientTransaction = new SIP.Transactions.NonInviteClientTransaction(this, this.request, this.ua.transport);\n    }\n    this.clientTransaction.send();\n\n    return this.clientTransaction;\n  },\n\n  /**\n  * Callback fired when receiving a request timeout error from the client transaction.\n  * To be re-defined by the applicant.\n  * @event\n  */\n  onRequestTimeout: function() {\n    this.applicant.onRequestTimeout();\n  },\n\n  /**\n  * Callback fired when receiving a transport error from the client transaction.\n  * To be re-defined by the applicant.\n  * @event\n  */\n  onTransportError: function() {\n    this.applicant.onTransportError();\n  },\n\n  /**\n  * Called from client transaction when receiving a correct response to the request.\n  * Authenticate request if needed or pass the response back to the applicant.\n  * @param {SIP.IncomingResponse} response\n  */\n  receiveResponse: function(response) {\n    var cseq, challenge, authorization_header_name,\n      status_code = response.status_code;\n\n    /*\n    * Authentication\n    * Authenticate once. _challenged_ flag used to avoid infinite authentications.\n    */\n    if ((status_code === 401 || status_code === 407) && this.ua.configuration.password !== null) {\n\n      // Get and parse the appropriate WWW-Authenticate or Proxy-Authenticate header.\n      if (response.status_code === 401) {\n        challenge = response.parseHeader('www-authenticate');\n        authorization_header_name = 'authorization';\n      } else {\n        challenge = response.parseHeader('proxy-authenticate');\n        authorization_header_name = 'proxy-authorization';\n      }\n\n      // Verify it seems a valid challenge.\n      if (! challenge) {\n        this.logger.warn(response.status_code + ' with wrong or missing challenge, cannot authenticate');\n        this.applicant.receiveResponse(response);\n        return;\n      }\n\n      if (!this.challenged || (!this.staled && challenge.stale === true)) {\n        if (!this.credentials) {\n          this.credentials = new SIP.DigestAuthentication(this.ua);\n        }\n\n        // Verify that the challenge is really valid.\n        if (!this.credentials.authenticate(this.request, challenge)) {\n          this.applicant.receiveResponse(response);\n          return;\n        }\n        this.challenged = true;\n\n        if (challenge.stale) {\n          this.staled = true;\n        }\n\n        if (response.method === SIP.C.REGISTER) {\n          cseq = this.applicant.cseq += 1;\n        } else if (this.request.dialog){\n          cseq = this.request.dialog.local_seqnum += 1;\n        } else {\n          cseq = this.request.cseq + 1;\n          this.request.cseq = cseq;\n        }\n        this.request.setHeader('cseq', cseq +' '+ this.method);\n\n        this.request.setHeader(authorization_header_name, this.credentials.toString());\n        this.send();\n      } else {\n        this.applicant.receiveResponse(response);\n      }\n    } else {\n      this.applicant.receiveResponse(response);\n    }\n  }\n};\n\nSIP.RequestSender = RequestSender;\n};\n\n\n/***/ },\n/* 20 */\n/***/ function(module, exports) {\n\nmodule.exports = function (SIP) {\n\nvar RegisterContext;\n\nRegisterContext = function (ua) {\n  var params = {},\n      regId = 1,\n      events = [\n        'registered',\n        'unregistered'\n      ];\n\n  this.registrar = ua.configuration.registrarServer;\n  this.expires = ua.configuration.registerExpires;\n\n\n  // Contact header\n  this.contact = ua.contact.toString();\n\n  if(regId) {\n    this.contact += ';reg-id='+ regId;\n    this.contact += ';+sip.instance=\"<urn:uuid:'+ ua.configuration.instanceId+'>\"';\n  }\n\n  // Call-ID and CSeq values RFC3261 10.2\n  this.call_id = SIP.Utils.createRandomToken(22);\n  this.cseq = 80;\n\n  this.to_uri = ua.configuration.uri;\n\n  params.to_uri = this.to_uri;\n  params.call_id = this.call_id;\n  params.cseq = this.cseq;\n\n  // Extends ClientContext\n  SIP.Utils.augment(this, SIP.ClientContext, [ua, 'REGISTER', this.registrar, {params: params}]);\n\n  this.registrationTimer = null;\n  this.registrationExpiredTimer = null;\n\n  // Set status\n  this.registered = false;\n\n  this.logger = ua.getLogger('sip.registercontext');\n  this.initMoreEvents(events);\n};\n\nRegisterContext.prototype = {\n  register: function (options) {\n    var self = this, extraHeaders;\n\n    // Handle Options\n    options = options || {};\n    extraHeaders = (options.extraHeaders || []).slice();\n    extraHeaders.push('Contact: ' + this.contact + ';expires=' + this.expires);\n    extraHeaders.push('Allow: ' + SIP.Utils.getAllowedMethods(this.ua));\n\n    this.receiveResponse = function(response) {\n      var contact, expires,\n        contacts = response.getHeaders('contact').length,\n        cause;\n\n      // Discard responses to older REGISTER/un-REGISTER requests.\n      if(response.cseq !== this.cseq) {\n        return;\n      }\n\n      // Clear registration timer\n      if (this.registrationTimer !== null) {\n        SIP.Timers.clearTimeout(this.registrationTimer);\n        this.registrationTimer = null;\n      }\n\n      switch(true) {\n        case /^1[0-9]{2}$/.test(response.status_code):\n          this.emit('progress', response);\n          break;\n        case /^2[0-9]{2}$/.test(response.status_code):\n          this.emit('accepted', response);\n\n          if(response.hasHeader('expires')) {\n            expires = response.getHeader('expires');\n          }\n\n          if (this.registrationExpiredTimer !== null) {\n            SIP.Timers.clearTimeout(this.registrationExpiredTimer);\n            this.registrationExpiredTimer = null;\n          }\n\n          // Search the Contact pointing to us and update the expires value accordingly.\n          if (!contacts) {\n            this.logger.warn('no Contact header in response to REGISTER, response ignored');\n            break;\n          }\n\n          while(contacts--) {\n            contact = response.parseHeader('contact', contacts);\n            if(contact.uri.user === this.ua.contact.uri.user) {\n              expires = contact.getParam('expires');\n              break;\n            } else {\n              contact = null;\n            }\n          }\n\n          if (!contact) {\n            this.logger.warn('no Contact header pointing to us, response ignored');\n            break;\n          }\n\n          if(!expires) {\n            expires = this.expires;\n          }\n\n          // Re-Register before the expiration interval has elapsed.\n          // For that, decrease the expires value. ie: 3 seconds\n          this.registrationTimer = SIP.Timers.setTimeout(function() {\n            self.registrationTimer = null;\n            self.register(options);\n          }, (expires * 1000) - 3000);\n          this.registrationExpiredTimer = SIP.Timers.setTimeout(function () {\n            self.logger.warn('registration expired');\n            if (self.registered) {\n              self.unregistered(null, SIP.C.causes.EXPIRES);\n            }\n          }, expires * 1000);\n\n          //Save gruu values\n          if (contact.hasParam('temp-gruu')) {\n            this.ua.contact.temp_gruu = SIP.URI.parse(contact.getParam('temp-gruu').replace(/\"/g,''));\n          }\n          if (contact.hasParam('pub-gruu')) {\n            this.ua.contact.pub_gruu = SIP.URI.parse(contact.getParam('pub-gruu').replace(/\"/g,''));\n          }\n\n          this.registered = true;\n          this.emit('registered', response || null);\n          break;\n        // Interval too brief RFC3261 10.2.8\n        case /^423$/.test(response.status_code):\n          if(response.hasHeader('min-expires')) {\n            // Increase our registration interval to the suggested minimum\n            this.expires = response.getHeader('min-expires');\n            // Attempt the registration again immediately\n            this.register(options);\n          } else { //This response MUST contain a Min-Expires header field\n            this.logger.warn('423 response received for REGISTER without Min-Expires');\n            this.registrationFailure(response, SIP.C.causes.SIP_FAILURE_CODE);\n          }\n          break;\n        default:\n          cause = SIP.Utils.sipErrorCause(response.status_code);\n          this.registrationFailure(response, cause);\n      }\n    };\n\n    this.onRequestTimeout = function() {\n      this.registrationFailure(null, SIP.C.causes.REQUEST_TIMEOUT);\n    };\n\n    this.onTransportError = function() {\n      this.registrationFailure(null, SIP.C.causes.CONNECTION_ERROR);\n    };\n\n    this.cseq++;\n    this.request.cseq = this.cseq;\n    this.request.setHeader('cseq', this.cseq + ' REGISTER');\n    this.request.extraHeaders = extraHeaders;\n    this.send();\n  },\n\n  registrationFailure: function (response, cause) {\n    this.emit('failed', response || null, cause || null);\n  },\n\n  onTransportClosed: function() {\n    this.registered_before = this.registered;\n    if (this.registrationTimer !== null) {\n      SIP.Timers.clearTimeout(this.registrationTimer);\n      this.registrationTimer = null;\n    }\n\n    if (this.registrationExpiredTimer !== null) {\n      SIP.Timers.clearTimeout(this.registrationExpiredTimer);\n      this.registrationExpiredTimer = null;\n    }\n\n    if(this.registered) {\n      this.unregistered(null, SIP.C.causes.CONNECTION_ERROR);\n    }\n  },\n\n  onTransportConnected: function() {\n    this.register();\n  },\n\n  close: function() {\n    this.registered_before = this.registered;\n    this.unregister();\n  },\n\n  unregister: function(options) {\n    var extraHeaders;\n\n    if(!this.registered) {\n      this.logger.warn('already unregistered');\n      return;\n    }\n\n    options = options || {};\n    extraHeaders = (options.extraHeaders || []).slice();\n\n    this.registered = false;\n\n    // Clear the registration timer.\n    if (this.registrationTimer !== null) {\n      SIP.Timers.clearTimeout(this.registrationTimer);\n      this.registrationTimer = null;\n    }\n\n    if(options.all) {\n      extraHeaders.push('Contact: *');\n      extraHeaders.push('Expires: 0');\n    } else {\n      extraHeaders.push('Contact: '+ this.contact + ';expires=0');\n    }\n\n\n    this.receiveResponse = function(response) {\n      var cause;\n\n      switch(true) {\n        case /^1[0-9]{2}$/.test(response.status_code):\n          this.emit('progress', response);\n          break;\n        case /^2[0-9]{2}$/.test(response.status_code):\n          this.emit('accepted', response);\n          if (this.registrationExpiredTimer !== null) {\n            SIP.Timers.clearTimeout(this.registrationExpiredTimer);\n            this.registrationExpiredTimer = null;\n          }\n          this.unregistered(response);\n          break;\n        default:\n          cause = SIP.Utils.sipErrorCause(response.status_code);\n          this.unregistered(response,cause);\n      }\n    };\n\n    this.onRequestTimeout = function() {\n      // Not actually unregistered...\n      //this.unregistered(null, SIP.C.causes.REQUEST_TIMEOUT);\n    };\n\n    this.onTransportError = function() {\n      // Not actually unregistered...\n      //this.unregistered(null, SIP.C.causes.CONNECTION_ERROR);\n    };\n\n    this.cseq++;\n    this.request.cseq = this.cseq;\n    this.request.setHeader('cseq', this.cseq + ' REGISTER');\n    this.request.extraHeaders = extraHeaders;\n\n    this.send();\n  },\n\n  unregistered: function(response, cause) {\n    this.registered = false;\n    this.emit('unregistered', response || null, cause || null);\n  }\n\n};\n\n\nSIP.RegisterContext = RegisterContext;\n};\n\n\n/***/ },\n/* 21 */\n/***/ function(module, exports) {\n\n/**\n * @fileoverview MediaHandler\n */\n\n/* MediaHandler\n * @class PeerConnection helper Class.\n * @param {SIP.Session} session\n * @param {Object} [options]\n */\nmodule.exports = function (EventEmitter) {\nvar MediaHandler = function(session, options) {\n  // keep jshint happy\n  session = session;\n  options = options;\n};\n\nMediaHandler.prototype = Object.create(EventEmitter.prototype, {\n  isReady: {value: function isReady () {}},\n\n  close: {value: function close () {}},\n\n  /**\n   * @param {Function} onSuccess called with the obtained local media description\n   * @param {Function} onFailure\n   * @param {Object} [mediaHint] A custom object describing the media to be used during this session.\n   */\n  getDescription: {value: function getDescription (onSuccess, onFailure, mediaHint) {\n    // keep jshint happy\n    onSuccess = onSuccess;\n    onFailure = onFailure;\n    mediaHint = mediaHint;\n  }},\n\n  /**\n  * Message reception.\n  * @param {String} type\n  * @param {String} description\n  * @param {Function} onSuccess\n  * @param {Function} onFailure\n  */\n  setDescription: {value: function setDescription (description, onSuccess, onFailure) {\n    // keep jshint happy\n    description = description;\n    onSuccess = onSuccess;\n    onFailure = onFailure;\n  }}\n});\n\nreturn MediaHandler;\n};\n\n\n/***/ },\n/* 22 */\n/***/ function(module, exports) {\n\nmodule.exports = function (SIP) {\nvar ClientContext;\n\nClientContext = function (ua, method, target, options) {\n  var params, extraHeaders,\n      originalTarget = target,\n      events = [\n        'progress',\n        'accepted',\n        'rejected',\n        'failed',\n        'cancel'\n      ];\n\n  if (target === undefined) {\n    throw new TypeError('Not enough arguments');\n  }\n\n  // Check target validity\n  target = ua.normalizeTarget(target);\n  if (!target) {\n    throw new TypeError('Invalid target: ' + originalTarget);\n  }\n\n  this.ua = ua;\n  this.logger = ua.getLogger('sip.clientcontext');\n  this.method = method;\n\n  params = options && options.params;\n  extraHeaders = (options && options.extraHeaders || []).slice();\n\n  if (options && options.body) {\n    this.body = options.body;\n  }\n  if (options && options.contentType) {\n    this.contentType = options.contentType;\n    extraHeaders.push('Content-Type: ' + this.contentType);\n  }\n\n  this.request = new SIP.OutgoingRequest(this.method, target, this.ua, params, extraHeaders);\n\n  this.localIdentity = this.request.from;\n  this.remoteIdentity = this.request.to;\n\n  if (this.body) {\n    this.request.body = this.body;\n  }\n\n  this.data = {};\n\n  this.initEvents(events);\n};\nClientContext.prototype = new SIP.EventEmitter();\n\nClientContext.prototype.send = function () {\n  (new SIP.RequestSender(this, this.ua)).send();\n  return this;\n};\n\nClientContext.prototype.cancel = function (options) {\n  options = options || {};\n\n  var\n  status_code = options.status_code,\n  reason_phrase = options.reason_phrase,\n  cancel_reason;\n\n  if (status_code && status_code < 200 || status_code > 699) {\n    throw new TypeError('Invalid status_code: ' + status_code);\n  } else if (status_code) {\n    reason_phrase = reason_phrase || SIP.C.REASON_PHRASE[status_code] || '';\n    cancel_reason = 'SIP ;cause=' + status_code + ' ;text=\"' + reason_phrase + '\"';\n  }\n  this.request.cancel(cancel_reason);\n\n  this.emit('cancel');\n};\n\nClientContext.prototype.receiveResponse = function (response) {\n  var cause = SIP.C.REASON_PHRASE[response.status_code] || '';\n\n  switch(true) {\n    case /^1[0-9]{2}$/.test(response.status_code):\n      this.emit('progress', response, cause);\n      break;\n\n    case /^2[0-9]{2}$/.test(response.status_code):\n      if(this.ua.applicants[this]) {\n        delete this.ua.applicants[this];\n      }\n      this.emit('accepted', response, cause);\n      break;\n\n    default:\n      if(this.ua.applicants[this]) {\n        delete this.ua.applicants[this];\n      }\n      this.emit('rejected', response, cause);\n      this.emit('failed', response, cause);\n      break;\n  }\n\n};\n\nClientContext.prototype.onRequestTimeout = function () {\n  this.emit('failed', null, SIP.C.causes.REQUEST_TIMEOUT);\n};\n\nClientContext.prototype.onTransportError = function () {\n  this.emit('failed', null, SIP.C.causes.CONNECTION_ERROR);\n};\n\nSIP.ClientContext = ClientContext;\n};\n\n\n/***/ },\n/* 23 */\n/***/ function(module, exports) {\n\nmodule.exports = function (SIP) {\nvar ServerContext;\n\nServerContext = function (ua, request) {\n  var events = [\n      'progress',\n      'accepted',\n      'rejected',\n      'failed'\n    ];\n  this.ua = ua;\n  this.logger = ua.getLogger('sip.servercontext');\n  this.request = request;\n  if (request.method === SIP.C.INVITE) {\n    this.transaction = new SIP.Transactions.InviteServerTransaction(request, ua);\n  } else {\n    this.transaction = new SIP.Transactions.NonInviteServerTransaction(request, ua);\n  }\n\n  if (request.body) {\n    this.body = request.body;\n  }\n  if (request.hasHeader('Content-Type')) {\n    this.contentType = request.getHeader('Content-Type');\n  }\n  this.method = request.method;\n\n  this.data = {};\n\n  this.localIdentity = request.to;\n  this.remoteIdentity = request.from;\n\n  this.initEvents(events);\n};\n\nServerContext.prototype = new SIP.EventEmitter();\n\nServerContext.prototype.progress = function (options) {\n  options = options || {};\n  var\n    statusCode = options.statusCode || 180,\n    reasonPhrase = options.reasonPhrase || SIP.C.REASON_PHRASE[statusCode],\n    extraHeaders = (options.extraHeaders || []).slice(),\n    body = options.body,\n    response;\n\n  if (statusCode < 100 || statusCode > 199) {\n    throw new TypeError('Invalid statusCode: ' + statusCode);\n  }\n  response = this.request.reply(statusCode, reasonPhrase, extraHeaders, body);\n  this.emit('progress', response, reasonPhrase);\n\n  return this;\n};\n\nServerContext.prototype.accept = function (options) {\n  options = options || {};\n  var\n    statusCode = options.statusCode || 200,\n    reasonPhrase = options.reasonPhrase || SIP.C.REASON_PHRASE[statusCode],\n    extraHeaders = (options.extraHeaders || []).slice(),\n    body = options.body,\n    response;\n\n  if (statusCode < 200 || statusCode > 299) {\n    throw new TypeError('Invalid statusCode: ' + statusCode);\n  }\n  response = this.request.reply(statusCode, reasonPhrase, extraHeaders, body);\n  this.emit('accepted', response, reasonPhrase);\n\n  return this;\n};\n\nServerContext.prototype.reject = function (options) {\n  options = options || {};\n  var\n    statusCode = options.statusCode || 480,\n    reasonPhrase = options.reasonPhrase || SIP.C.REASON_PHRASE[statusCode],\n    extraHeaders = (options.extraHeaders || []).slice(),\n    body = options.body,\n    response;\n\n  if (statusCode < 300 || statusCode > 699) {\n    throw new TypeError('Invalid statusCode: ' + statusCode);\n  }\n  response = this.request.reply(statusCode, reasonPhrase, extraHeaders, body);\n  this.emit('rejected', response, reasonPhrase);\n  this.emit('failed', response, reasonPhrase);\n\n  return this;\n};\n\nServerContext.prototype.reply = function (options) {\n  options = options || {};\n  var\n    statusCode = options.statusCode,\n    reasonPhrase = options.reasonPhrase,\n    extraHeaders = (options.extraHeaders || []).slice(),\n    body = options.body;\n\n  this.request.reply(statusCode, reasonPhrase, extraHeaders, body);\n\n  return this;\n};\n\nServerContext.prototype.onRequestTimeout = function () {\n  this.emit('failed', null, SIP.C.causes.REQUEST_TIMEOUT);\n};\n\nServerContext.prototype.onTransportError = function () {\n  this.emit('failed', null, SIP.C.causes.CONNECTION_ERROR);\n};\n\nSIP.ServerContext = ServerContext;\n};\n\n\n/***/ },\n/* 24 */\n/***/ function(module, exports) {\n\n/**\n * @fileoverview DTMF\n */\n\n/**\n * @class DTMF\n * @param {SIP.Session} session\n */\nmodule.exports = function (SIP) {\n\nvar DTMF,\n  C = {\n    MIN_DURATION:            70,\n    MAX_DURATION:            6000,\n    DEFAULT_DURATION:        100,\n    MIN_INTER_TONE_GAP:      50,\n    DEFAULT_INTER_TONE_GAP:  500\n  };\n\nDTMF = function(session, tone, options) {\n  var events = [\n  'succeeded',\n  'failed'\n  ], duration, interToneGap;\n\n  if (tone === undefined) {\n    throw new TypeError('Not enough arguments');\n  }\n\n  this.logger = session.ua.getLogger('sip.invitecontext.dtmf', session.id);\n  this.owner = session;\n  this.direction = null;\n\n  options = options || {};\n  duration = options.duration || null;\n  interToneGap = options.interToneGap || null;\n\n  // Check tone type\n  if (typeof tone === 'string' ) {\n    tone = tone.toUpperCase();\n  } else if (typeof tone === 'number') {\n    tone = tone.toString();\n  } else {\n    throw new TypeError('Invalid tone: '+ tone);\n  }\n\n  // Check tone value\n  if (!tone.match(/^[0-9A-D#*]$/)) {\n    throw new TypeError('Invalid tone: '+ tone);\n  } else {\n    this.tone = tone;\n  }\n\n  // Check duration\n  if (duration && !SIP.Utils.isDecimal(duration)) {\n    throw new TypeError('Invalid tone duration: '+ duration);\n  } else if (!duration) {\n    duration = DTMF.C.DEFAULT_DURATION;\n  } else if (duration < DTMF.C.MIN_DURATION) {\n    this.logger.warn('\"duration\" value is lower than the minimum allowed, setting it to '+ DTMF.C.MIN_DURATION+ ' milliseconds');\n    duration = DTMF.C.MIN_DURATION;\n  } else if (duration > DTMF.C.MAX_DURATION) {\n    this.logger.warn('\"duration\" value is greater than the maximum allowed, setting it to '+ DTMF.C.MAX_DURATION +' milliseconds');\n    duration = DTMF.C.MAX_DURATION;\n  } else {\n    duration = Math.abs(duration);\n  }\n  this.duration = duration;\n\n  // Check interToneGap\n  if (interToneGap && !SIP.Utils.isDecimal(interToneGap)) {\n    throw new TypeError('Invalid interToneGap: '+ interToneGap);\n  } else if (!interToneGap) {\n    interToneGap = DTMF.C.DEFAULT_INTER_TONE_GAP;\n  } else if (interToneGap < DTMF.C.MIN_INTER_TONE_GAP) {\n    this.logger.warn('\"interToneGap\" value is lower than the minimum allowed, setting it to '+ DTMF.C.MIN_INTER_TONE_GAP +' milliseconds');\n    interToneGap = DTMF.C.MIN_INTER_TONE_GAP;\n  } else {\n    interToneGap = Math.abs(interToneGap);\n  }\n  this.interToneGap = interToneGap;\n\n  this.initEvents(events);\n};\nDTMF.prototype = new SIP.EventEmitter();\n\n\nDTMF.prototype.send = function(options) {\n  var extraHeaders, body;\n\n  this.direction = 'outgoing';\n\n  // Check RTCSession Status\n  if (this.owner.status !== SIP.Session.C.STATUS_CONFIRMED &&\n    this.owner.status !== SIP.Session.C.STATUS_WAITING_FOR_ACK) {\n    throw new SIP.Exceptions.InvalidStateError(this.owner.status);\n  }\n\n  // Get DTMF options\n  options = options || {};\n  extraHeaders = options.extraHeaders ? options.extraHeaders.slice() : [];\n\n  extraHeaders.push('Content-Type: application/dtmf-relay');\n\n  body = \"Signal= \" + this.tone + \"\\r\\n\";\n  body += \"Duration= \" + this.duration;\n\n  this.request = this.owner.dialog.sendRequest(this, SIP.C.INFO, {\n    extraHeaders: extraHeaders,\n    body: body\n  });\n\n  this.owner.emit('dtmf', this.request, this);\n};\n\n/**\n * @private\n */\nDTMF.prototype.receiveResponse = function(response) {\n  var cause;\n\n  switch(true) {\n    case /^1[0-9]{2}$/.test(response.status_code):\n      // Ignore provisional responses.\n      break;\n\n    case /^2[0-9]{2}$/.test(response.status_code):\n      this.emit('succeeded', {\n        originator: 'remote',\n        response: response\n      });\n      break;\n\n    default:\n      cause = SIP.Utils.sipErrorCause(response.status_code);\n      this.emit('failed', response, cause);\n      break;\n  }\n};\n\n/**\n * @private\n */\nDTMF.prototype.onRequestTimeout = function() {\n  this.emit('failed', null, SIP.C.causes.REQUEST_TIMEOUT);\n  this.owner.onRequestTimeout();\n};\n\n/**\n * @private\n */\nDTMF.prototype.onTransportError = function() {\n  this.emit('failed', null, SIP.C.causes.CONNECTION_ERROR);\n  this.owner.onTransportError();\n};\n\n/**\n * @private\n */\nDTMF.prototype.onDialogError = function(response) {\n  this.emit('failed', response, SIP.C.causes.DIALOG_ERROR);\n  this.owner.onDialogError(response);\n};\n\n/**\n * @private\n */\nDTMF.prototype.init_incoming = function(request) {\n  this.direction = 'incoming';\n  this.request = request;\n\n  request.reply(200);\n\n  if (!this.tone || !this.duration) {\n    this.logger.warn('invalid INFO DTMF received, discarded');\n  } else {\n    this.owner.emit('dtmf', request, this);\n  }\n};\n\nDTMF.C = C;\nreturn DTMF;\n};\n\n\n/***/ },\n/* 25 */\n/***/ function(module, exports) {\n\nmodule.exports = function (SIP, window, DTMF) {\n\nvar Session, InviteServerContext, InviteClientContext,\n C = {\n    //Session states\n    STATUS_NULL:                        0,\n    STATUS_INVITE_SENT:                 1,\n    STATUS_1XX_RECEIVED:                2,\n    STATUS_INVITE_RECEIVED:             3,\n    STATUS_WAITING_FOR_ANSWER:          4,\n    STATUS_ANSWERED:                    5,\n    STATUS_WAITING_FOR_PRACK:           6,\n    STATUS_WAITING_FOR_ACK:             7,\n    STATUS_CANCELED:                    8,\n    STATUS_TERMINATED:                  9,\n    STATUS_ANSWERED_WAITING_FOR_PRACK: 10,\n    STATUS_EARLY_MEDIA:                11,\n    STATUS_CONFIRMED:                  12\n  };\n\n/*\n * @param {function returning SIP.MediaHandler} [mediaHandlerFactory]\n *        (See the documentation for the mediaHandlerFactory argument of the UA constructor.)\n */\nSession = function (mediaHandlerFactory) {\n  var events = [\n  'connecting',\n  'terminated',\n  'dtmf',\n  'invite',\n  'cancel',\n  'refer',\n  'bye',\n  'hold',\n  'unhold',\n  'muted',\n  'unmuted'\n  ];\n\n  this.status = C.STATUS_NULL;\n  this.dialog = null;\n  this.earlyDialogs = {};\n  this.mediaHandlerFactory = mediaHandlerFactory || SIP.WebRTC.MediaHandler.defaultFactory;\n  // this.mediaHandler gets set by ICC/ISC constructors\n  this.hasOffer = false;\n  this.hasAnswer = false;\n\n  // Session Timers\n  this.timers = {\n    ackTimer: null,\n    expiresTimer: null,\n    invite2xxTimer: null,\n    userNoAnswerTimer: null,\n    rel1xxTimer: null,\n    prackTimer: null\n  };\n\n  // Session info\n  this.startTime = null;\n  this.endTime = null;\n  this.tones = null;\n\n  // Mute/Hold state\n  this.local_hold = false;\n  this.remote_hold = false;\n\n  this.pending_actions = {\n    actions: [],\n\n    length: function() {\n      return this.actions.length;\n    },\n\n    isPending: function(name){\n      var\n      idx = 0,\n      length = this.actions.length;\n\n      for (idx; idx<length; idx++) {\n        if (this.actions[idx].name === name) {\n          return true;\n        }\n      }\n      return false;\n    },\n\n    shift: function() {\n      return this.actions.shift();\n    },\n\n    push: function(name) {\n      this.actions.push({\n        name: name\n      });\n    },\n\n    pop: function(name) {\n      var\n      idx = 0,\n      length = this.actions.length;\n\n      for (idx; idx<length; idx++) {\n        if (this.actions[idx].name === name) {\n          this.actions.splice(idx,1);\n          length --;\n          idx--;\n        }\n      }\n    }\n   };\n\n  this.early_sdp = null;\n  this.rel100 = SIP.C.supported.UNSUPPORTED;\n\n  this.initMoreEvents(events);\n};\n\nSession.prototype = {\n  dtmf: function(tones, options) {\n    var tone, dtmfs = [],\n        self = this;\n\n    options = options || {};\n\n    if (tones === undefined) {\n      throw new TypeError('Not enough arguments');\n    }\n\n    // Check Session Status\n    if (this.status !== C.STATUS_CONFIRMED && this.status !== C.STATUS_WAITING_FOR_ACK) {\n      throw new SIP.Exceptions.InvalidStateError(this.status);\n    }\n\n    // Check tones\n    if (!tones || (typeof tones !== 'string' && typeof tones !== 'number') || !tones.toString().match(/^[0-9A-D#*,]+$/i)) {\n      throw new TypeError('Invalid tones: '+ tones);\n    }\n\n    tones = tones.toString().split('');\n\n    while (tones.length > 0) { dtmfs.push(new DTMF(this, tones.shift(), options)); }\n\n    if (this.tones) {\n      // Tones are already queued, just add to the queue\n      this.tones =  this.tones.concat(dtmfs);\n      return this;\n    }\n\n    var sendDTMF = function () {\n      var dtmf, timeout;\n\n      if (self.status === C.STATUS_TERMINATED || !self.tones || self.tones.length === 0) {\n        // Stop sending DTMF\n        self.tones = null;\n        return this;\n      }\n\n      dtmf = self.tones.shift();\n\n      if (tone === ',') {\n        timeout = 2000;\n      } else {\n        dtmf.on('failed', function(){self.tones = null;});\n        dtmf.send(options);\n        timeout = dtmf.duration + dtmf.interToneGap;\n      }\n\n      // Set timeout for the next tone\n      SIP.Timers.setTimeout(sendDTMF, timeout);\n    };\n\n    this.tones = dtmfs;\n    sendDTMF();\n    return this;\n  },\n\n  bye: function(options) {\n    options = options || {};\n    var statusCode = options.statusCode;\n\n    // Check Session Status\n    if (this.status === C.STATUS_TERMINATED) {\n      this.logger.error('Error: Attempted to send BYE in a terminated session.');\n      return this;\n    }\n\n    this.logger.log('terminating Session');\n\n    if (statusCode && (statusCode < 200 || statusCode >= 700)) {\n      throw new TypeError('Invalid statusCode: '+ statusCode);\n    }\n\n    options.receiveResponse = function () {};\n\n    return this.\n      sendRequest(SIP.C.BYE, options).\n      terminated();\n  },\n\n  refer: function(target, options) {\n    options = options || {};\n    var extraHeaders = (options.extraHeaders || []).slice(),\n        originalTarget = target;\n\n    if (target === undefined) {\n      throw new TypeError('Not enough arguments');\n    } else if (target instanceof SIP.InviteServerContext || target instanceof SIP.InviteClientContext) {\n      //Attended Transfer\n      // B.transfer(C)\n      extraHeaders.push('Contact: '+ this.contact);\n      extraHeaders.push('Allow: '+ SIP.Utils.getAllowedMethods(this.ua));\n      extraHeaders.push('Refer-To: <' + target.dialog.remote_target.toString() + '?Replaces=' + target.dialog.id.call_id + '%3Bto-tag%3D' + target.dialog.id.remote_tag + '%3Bfrom-tag%3D' + target.dialog.id.local_tag + '>');\n    } else {\n      //Blind Transfer\n\n      // Check Session Status\n      if (this.status !== C.STATUS_CONFIRMED) {\n        throw new SIP.Exceptions.InvalidStateError(this.status);\n      }\n\n      // normalizeTarget allows instances of SIP.URI to pass through unaltered,\n      // so try to make one ahead of time\n      try {\n        target = SIP.Grammar.parse(target, 'Refer_To').uri || target;\n      } catch (e) {\n        this.logger.debug(\".refer() cannot parse Refer_To from\", target);\n        this.logger.debug(\"...falling through to normalizeTarget()\");\n      }\n\n      // Check target validity\n      target = this.ua.normalizeTarget(target);\n      if (!target) {\n        throw new TypeError('Invalid target: ' + originalTarget);\n      }\n\n      extraHeaders.push('Contact: '+ this.contact);\n      extraHeaders.push('Allow: '+ SIP.Utils.getAllowedMethods(this.ua));\n      extraHeaders.push('Refer-To: '+ target);\n    }\n\n    // Send the request\n    this.sendRequest(SIP.C.REFER, {\n      extraHeaders: extraHeaders,\n      body: options.body,\n      receiveResponse: function() {}\n    });\n    // hang up only if we transferred to a SIP address\n    if (target.scheme.match(\"^sips?$\")) {\n      this.terminate();\n    }\n    return this;\n  },\n\n  followRefer: function followRefer (callback) {\n    return function referListener (callback, request) {\n      // window.open non-SIP URIs if possible and keep session open\n      var target = request.parseHeader('refer-to').uri;\n      if (!target.scheme.match(\"^sips?$\")) {\n        var targetString = target.toString();\n        if (typeof window !== \"undefined\" && typeof window.open === \"function\") {\n          window.open(targetString);\n        } else {\n          this.logger.warn(\"referred to non-SIP URI but window.open isn't a function: \" + targetString);\n        }\n        return;\n      }\n\n      SIP.Hacks.Chrome.getsConfusedAboutGUM(this);\n\n      /*\n        Harmless race condition.  Both sides of REFER\n        may send a BYE, but in the end the dialogs are destroyed.\n      */\n      var referSession = this.ua.invite(request.parseHeader('refer-to').uri, {\n        media: this.mediaHint\n      });\n\n      callback.call(this, request, referSession);\n\n      this.terminate();\n    }.bind(this, callback);\n  },\n\n  sendRequest: function(method,options) {\n    options = options || {};\n    var self = this;\n\n    var request = new SIP.OutgoingRequest(\n      method,\n      this.dialog.remote_target,\n      this.ua,\n      {\n        cseq: options.cseq || (this.dialog.local_seqnum += 1),\n        call_id: this.dialog.id.call_id,\n        from_uri: this.dialog.local_uri,\n        from_tag: this.dialog.id.local_tag,\n        to_uri: this.dialog.remote_uri,\n        to_tag: this.dialog.id.remote_tag,\n        route_set: this.dialog.route_set,\n        statusCode: options.statusCode,\n        reasonPhrase: options.reasonPhrase\n      },\n      options.extraHeaders || [],\n      options.body\n    );\n\n    new SIP.RequestSender({\n      request: request,\n      onRequestTimeout: function() {\n        self.onRequestTimeout();\n      },\n      onTransportError: function() {\n        self.onTransportError();\n      },\n      receiveResponse: options.receiveResponse || function(response) {\n        self.receiveNonInviteResponse(response);\n      }\n    }, this.ua).send();\n\n    // Emit the request event\n    if (this.checkEvent(method.toLowerCase())) {\n      this.emit(method.toLowerCase(), request);\n    }\n\n    return this;\n  },\n\n  close: function() {\n    var idx;\n\n    if(this.status === C.STATUS_TERMINATED) {\n      return this;\n    }\n\n    this.logger.log('closing INVITE session ' + this.id);\n\n    // 1st Step. Terminate media.\n    if (this.mediaHandler){\n      this.mediaHandler.close();\n    }\n\n    // 2nd Step. Terminate signaling.\n\n    // Clear session timers\n    for(idx in this.timers) {\n      SIP.Timers.clearTimeout(this.timers[idx]);\n    }\n\n    // Terminate dialogs\n\n    // Terminate confirmed dialog\n    if(this.dialog) {\n      this.dialog.terminate();\n      delete this.dialog;\n    }\n\n    // Terminate early dialogs\n    for(idx in this.earlyDialogs) {\n      this.earlyDialogs[idx].terminate();\n      delete this.earlyDialogs[idx];\n    }\n\n    this.status = C.STATUS_TERMINATED;\n\n    delete this.ua.sessions[this.id];\n    return this;\n  },\n\n  createDialog: function(message, type, early) {\n    var dialog, early_dialog,\n      local_tag = message[(type === 'UAS') ? 'to_tag' : 'from_tag'],\n      remote_tag = message[(type === 'UAS') ? 'from_tag' : 'to_tag'],\n      id = message.call_id + local_tag + remote_tag;\n\n    early_dialog = this.earlyDialogs[id];\n\n    // Early Dialog\n    if (early) {\n      if (early_dialog) {\n        return true;\n      } else {\n        early_dialog = new SIP.Dialog(this, message, type, SIP.Dialog.C.STATUS_EARLY);\n\n        // Dialog has been successfully created.\n        if(early_dialog.error) {\n          this.logger.error(early_dialog.error);\n          this.failed(message, SIP.C.causes.INTERNAL_ERROR);\n          return false;\n        } else {\n          this.earlyDialogs[id] = early_dialog;\n          return true;\n        }\n      }\n    }\n    // Confirmed Dialog\n    else {\n      // In case the dialog is in _early_ state, update it\n      if (early_dialog) {\n        early_dialog.update(message, type);\n        this.dialog = early_dialog;\n        delete this.earlyDialogs[id];\n        for (var dia in this.earlyDialogs) {\n          this.earlyDialogs[dia].terminate();\n          delete this.earlyDialogs[dia];\n        }\n        return true;\n      }\n\n      // Otherwise, create a _confirmed_ dialog\n      dialog = new SIP.Dialog(this, message, type);\n\n      if(dialog.error) {\n        this.logger.error(dialog.error);\n        this.failed(message, SIP.C.causes.INTERNAL_ERROR);\n        return false;\n      } else {\n        this.to_tag = message.to_tag;\n        this.dialog = dialog;\n        return true;\n      }\n    }\n  },\n\n  /**\n  * Check if Session is ready for a re-INVITE\n  *\n  * @returns {Boolean}\n  */\n  isReadyToReinvite: function() {\n    return this.mediaHandler.isReady() &&\n      !this.dialog.uac_pending_reply &&\n      !this.dialog.uas_pending_reply;\n  },\n\n  /**\n   * Mute\n   */\n  mute: function(options) {\n    var ret = this.mediaHandler.mute(options);\n    if (ret) {\n      this.onmute(ret);\n    }\n  },\n\n  /**\n   * Unmute\n   */\n  unmute: function(options) {\n    var ret = this.mediaHandler.unmute(options);\n    if (ret) {\n      this.onunmute(ret);\n    }\n  },\n\n  /**\n   * Hold\n   */\n  hold: function() {\n\n    if (this.status !== C.STATUS_WAITING_FOR_ACK && this.status !== C.STATUS_CONFIRMED) {\n      throw new SIP.Exceptions.InvalidStateError(this.status);\n    }\n\n    this.mediaHandler.hold();\n\n    // Check if RTCSession is ready to send a reINVITE\n    if (!this.isReadyToReinvite()) {\n      /* If there is a pending 'unhold' action, cancel it and don't queue this one\n       * Else, if there isn't any 'hold' action, add this one to the queue\n       * Else, if there is already a 'hold' action, skip\n       */\n      if (this.pending_actions.isPending('unhold')) {\n        this.pending_actions.pop('unhold');\n      } else if (!this.pending_actions.isPending('hold')) {\n        this.pending_actions.push('hold');\n      }\n      return;\n    } else if (this.local_hold === true) {\n        return;\n    }\n\n    this.onhold('local');\n\n    this.sendReinvite({\n      mangle: function(body){\n\n        // Don't receive media\n        // TODO - This will break for media streams with different directions.\n        if (!(/a=(sendrecv|sendonly|recvonly|inactive)/).test(body)) {\n          body = body.replace(/(m=[^\\r]*\\r\\n)/g, '$1a=sendonly\\r\\n');\n        } else {\n          body = body.replace(/a=sendrecv\\r\\n/g, 'a=sendonly\\r\\n');\n          body = body.replace(/a=recvonly\\r\\n/g, 'a=inactive\\r\\n');\n        }\n\n        return body;\n      }\n    });\n  },\n\n  /**\n   * Unhold\n   */\n  unhold: function() {\n\n    if (this.status !== C.STATUS_WAITING_FOR_ACK && this.status !== C.STATUS_CONFIRMED) {\n      throw new SIP.Exceptions.InvalidStateError(this.status);\n    }\n\n    this.mediaHandler.unhold();\n\n    if (!this.isReadyToReinvite()) {\n      /* If there is a pending 'hold' action, cancel it and don't queue this one\n       * Else, if there isn't any 'unhold' action, add this one to the queue\n       * Else, if there is already a 'unhold' action, skip\n       */\n      if (this.pending_actions.isPending('hold')) {\n        this.pending_actions.pop('hold');\n      } else if (!this.pending_actions.isPending('unhold')) {\n        this.pending_actions.push('unhold');\n      }\n      return;\n    } else if (this.local_hold === false) {\n      return;\n    }\n\n    this.onunhold('local');\n\n    this.sendReinvite();\n  },\n\n  /**\n   * isOnHold\n   */\n  isOnHold: function() {\n    return {\n      local: this.local_hold,\n      remote: this.remote_hold\n    };\n  },\n\n  /**\n   * In dialog INVITE Reception\n   * @private\n   */\n  receiveReinvite: function(request) {\n    var self = this,\n        contentType = request.getHeader('Content-Type'),\n        hold = true;\n\n    if (request.body) {\n      if (contentType !== 'application/sdp') {\n        this.logger.warn('invalid Content-Type');\n        request.reply(415);\n        return;\n      }\n\n      // Are we holding?\n      hold = (/a=(sendonly|inactive)/).test(request.body);\n\n      this.mediaHandler.setDescription(\n        request.body,\n        /*\n         * onSuccess\n         * SDP Offer is valid\n         */\n        function() {\n          self.mediaHandler.getDescription(\n            function(body) {\n              request.reply(200, null, ['Contact: ' + self.contact], body,\n                function() {\n                  self.status = C.STATUS_WAITING_FOR_ACK;\n                  self.setInvite2xxTimer(request, body);\n                  self.setACKTimer();\n\n                  if (self.remote_hold && !hold) {\n                    self.onunhold('remote');\n                  } else if (!self.remote_hold && hold) {\n                    self.onhold('remote');\n                  }\n                });\n            },\n            function() {\n              request.reply(500);\n            },\n            self.mediaHint\n          );\n        },\n        /*\n         * onFailure\n         * Bad media description\n         */\n        function(e) {\n          self.logger.error(e);\n          request.reply(488);\n        }\n      );\n    }\n  },\n\n  sendReinvite: function(options) {\n    options = options || {};\n\n    var\n      self = this,\n       extraHeaders = (options.extraHeaders || []).slice(),\n       eventHandlers = options.eventHandlers || {},\n       mangle = options.mangle || null;\n\n    if (eventHandlers.succeeded) {\n      this.reinviteSucceeded = eventHandlers.succeeded;\n    } else {\n      this.reinviteSucceeded = function(){\n        SIP.Timers.clearTimeout(self.timers.ackTimer);\n        SIP.Timers.clearTimeout(self.timers.invite2xxTimer);\n        self.status = C.STATUS_CONFIRMED;\n      };\n    }\n    if (eventHandlers.failed) {\n      this.reinviteFailed = eventHandlers.failed;\n    } else {\n      this.reinviteFailed = function(){};\n    }\n\n    extraHeaders.push('Contact: ' + this.contact);\n    extraHeaders.push('Allow: '+ SIP.Utils.getAllowedMethods(this.ua));\n    extraHeaders.push('Content-Type: application/sdp');\n\n    this.receiveResponse = this.receiveReinviteResponse;\n    //REVISIT\n    this.mediaHandler.getDescription(\n      function(body){\n        if (mangle) {\n          body = mangle(body);\n        }\n\n        self.dialog.sendRequest(self, SIP.C.INVITE, {\n          extraHeaders: extraHeaders,\n          body: body\n        });\n      },\n      function() {\n        if (self.isReadyToReinvite()) {\n          self.onReadyToReinvite();\n        }\n        self.reinviteFailed();\n      },\n      self.mediaHint\n    );\n  },\n\n  receiveRequest: function (request) {\n    switch (request.method) {\n      case SIP.C.BYE:\n        request.reply(200);\n        if(this.status === C.STATUS_CONFIRMED) {\n          this.emit('bye', request);\n          this.terminated(request, SIP.C.causes.BYE);\n        }\n        break;\n      case SIP.C.INVITE:\n        if(this.status === C.STATUS_CONFIRMED) {\n          this.logger.log('re-INVITE received');\n          // Switch these two lines to try re-INVITEs:\n          //this.receiveReinvite(request);\n          request.reply(488, null, ['Warning: 399 sipjs \"Cannot update media description\"']);\n        }\n        break;\n      case SIP.C.INFO:\n        if(this.status === C.STATUS_CONFIRMED || this.status === C.STATUS_WAITING_FOR_ACK) {\n          var body, tone, duration,\n              contentType = request.getHeader('content-type'),\n              reg_tone = /^(Signal\\s*?=\\s*?)([0-9A-D#*]{1})(\\s)?.*/,\n              reg_duration = /^(Duration\\s?=\\s?)([0-9]{1,4})(\\s)?.*/;\n\n          if (contentType) {\n            if (contentType.match(/^application\\/dtmf-relay/i)) {\n              if (request.body) {\n                body = request.body.split('\\r\\n', 2);\n                if (body.length === 2) {\n                  if (reg_tone.test(body[0])) {\n                    tone = body[0].replace(reg_tone,\"$2\");\n                  }\n                  if (reg_duration.test(body[1])) {\n                    duration = parseInt(body[1].replace(reg_duration,\"$2\"), 10);\n                  }\n                }\n              }\n\n              new DTMF(this, tone, {duration: duration}).init_incoming(request);\n            } else {\n              request.reply(415, null, [\"Accept: application/dtmf-relay\"]);\n            }\n          }\n        }\n        break;\n      case SIP.C.REFER:\n        if(this.status ===  C.STATUS_CONFIRMED) {\n          this.logger.log('REFER received');\n          request.reply(202, 'Accepted');\n          var\n            hasReferListener = this.checkListener('refer'),\n            notifyBody = hasReferListener ?\n              'SIP/2.0 100 Trying' :\n              // RFC 3515.2.4.2: 'the UA MAY decline the request.'\n              'SIP/2.0 603 Declined'\n          ;\n\n          this.sendRequest(SIP.C.NOTIFY, {\n            extraHeaders:[\n              'Event: refer',\n              'Subscription-State: terminated',\n              'Content-Type: message/sipfrag'\n            ],\n            body: notifyBody,\n            receiveResponse: function() {}\n          });\n\n          if (hasReferListener) {\n            this.emit('refer', request);\n          }\n        }\n        break;\n    }\n  },\n\n  /**\n   * Reception of Response for in-dialog INVITE\n   * @private\n   */\n  receiveReinviteResponse: function(response) {\n    var self = this,\n        contentType = response.getHeader('Content-Type');\n\n    if (this.status === C.STATUS_TERMINATED) {\n      return;\n    }\n\n    switch(true) {\n      case /^1[0-9]{2}$/.test(response.status_code):\n        break;\n      case /^2[0-9]{2}$/.test(response.status_code):\n        this.status = C.STATUS_CONFIRMED;\n\n        this.sendRequest(SIP.C.ACK,{cseq:response.cseq});\n\n        if(!response.body) {\n          this.reinviteFailed();\n          break;\n        } else if (contentType !== 'application/sdp') {\n          this.reinviteFailed();\n          break;\n        }\n\n        //REVISIT\n        this.mediaHandler.setDescription(\n          response.body,\n          /*\n           * onSuccess\n           * SDP Answer fits with Offer.\n           */\n          function() {\n            self.reinviteSucceeded();\n          },\n          /*\n           * onFailure\n           * SDP Answer does not fit the Offer.\n           */\n          function() {\n            self.reinviteFailed();\n          }\n        );\n        break;\n      default:\n        this.reinviteFailed();\n    }\n  },\n\n  acceptAndTerminate: function(response, status_code, reason_phrase) {\n    var extraHeaders = [];\n\n    if (status_code) {\n      reason_phrase = reason_phrase || SIP.C.REASON_PHRASE[status_code] || '';\n      extraHeaders.push('Reason: SIP ;cause=' + status_code + '; text=\"' + reason_phrase + '\"');\n    }\n\n    // An error on dialog creation will fire 'failed' event\n    if (this.dialog || this.createDialog(response, 'UAC')) {\n      this.sendRequest(SIP.C.ACK,{cseq: response.cseq});\n      this.sendRequest(SIP.C.BYE, {\n        extraHeaders: extraHeaders\n      });\n    }\n\n    return this;\n  },\n\n  /**\n   * RFC3261 13.3.1.4\n   * Response retransmissions cannot be accomplished by transaction layer\n   *  since it is destroyed when receiving the first 2xx answer\n   */\n  setInvite2xxTimer: function(request, body) {\n    var self = this,\n        timeout = SIP.Timers.T1;\n\n    this.timers.invite2xxTimer = SIP.Timers.setTimeout(function invite2xxRetransmission() {\n      if (self.status !== C.STATUS_WAITING_FOR_ACK) {\n        return;\n      }\n\n      self.logger.log('no ACK received, attempting to retransmit OK');\n\n      request.reply(200, null, ['Contact: ' + self.contact], body);\n\n      timeout = Math.min(timeout * 2, SIP.Timers.T2);\n\n      self.timers.invite2xxTimer = SIP.Timers.setTimeout(invite2xxRetransmission, timeout);\n    }, timeout);\n  },\n\n  /**\n   * RFC3261 14.2\n   * If a UAS generates a 2xx response and never receives an ACK,\n   *  it SHOULD generate a BYE to terminate the dialog.\n   */\n  setACKTimer: function() {\n    var self = this;\n\n    this.timers.ackTimer = SIP.Timers.setTimeout(function() {\n      if(self.status === C.STATUS_WAITING_FOR_ACK) {\n        self.logger.log('no ACK received for an extended period of time, terminating the call');\n        SIP.Timers.clearTimeout(self.timers.invite2xxTimer);\n        self.sendRequest(SIP.C.BYE);\n        self.terminated(null, SIP.C.causes.NO_ACK);\n      }\n    }, SIP.Timers.TIMER_H);\n  },\n\n  /*\n   * @private\n   */\n  onReadyToReinvite: function() {\n    var action = this.pending_actions.shift();\n\n    if (!action || !this[action.name]) {\n      return;\n    }\n\n    this[action.name]();\n  },\n\n  onTransportError: function() {\n    if (this.status === C.STATUS_CONFIRMED) {\n      this.terminated(null, SIP.C.causes.CONNECTION_ERROR);\n    } else if (this.status !== C.STATUS_TERMINATED) {\n      this.failed(null, SIP.C.causes.CONNECTION_ERROR);\n    }\n  },\n\n  onRequestTimeout: function() {\n    if (this.status === C.STATUS_CONFIRMED) {\n      this.terminated(null, SIP.C.causes.REQUEST_TIMEOUT);\n    } else if (this.status !== C.STATUS_TERMINATED) {\n      this.failed(null, SIP.C.causes.REQUEST_TIMEOUT);\n    }\n  },\n\n  onDialogError: function(response) {\n    if (this.status === C.STATUS_CONFIRMED) {\n      this.terminated(response, SIP.C.causes.DIALOG_ERROR);\n    } else if (this.status !== C.STATUS_TERMINATED) {\n      this.failed(response, SIP.C.causes.DIALOG_ERROR);\n    }\n  },\n\n  /**\n   * @private\n   */\n  onhold: function(originator) {\n    this[originator === 'local' ? 'local_hold' : 'remote_hold'] = true;\n    this.emit('hold', { originator: originator });\n  },\n\n  /**\n   * @private\n   */\n  onunhold: function(originator) {\n    this[originator === 'local' ? 'local_hold' : 'remote_hold'] = false;\n    this.emit('unhold', { originator: originator });\n  },\n\n  /*\n   * @private\n   */\n  onmute: function(options) {\n    this.emit('muted', {\n      audio: options.audio,\n      video: options.video\n    });\n  },\n\n  /*\n   * @private\n   */\n  onunmute: function(options) {\n    this.emit('unmuted', {\n      audio: options.audio,\n      video: options.video\n    });\n  },\n\n  failed: function(response, cause) {\n    this.close();\n    return this.emit('failed', response, cause);\n  },\n\n  rejected: function(response, cause) {\n    this.close();\n    return this.emit('rejected',\n      response || null,\n      cause\n    );\n  },\n\n  canceled: function() {\n    this.close();\n    return this.emit('cancel');\n  },\n\n  accepted: function(response, cause) {\n    cause = cause || (response && SIP.C.REASON_PHRASE[response.status_code]) || '';\n\n    this.startTime = new Date();\n\n    return this.emit('accepted', response, cause);\n  },\n\n  terminated: function(message, cause) {\n    this.endTime = new Date();\n\n    this.close();\n    return this.emit('terminated', {\n      message: message || null,\n      cause: cause || null\n    });\n  },\n\n  connecting: function(request) {\n    return this.emit('connecting', { request: request });\n  }\n};\n\nSession.C = C;\nSIP.Session = Session;\n\n\nInviteServerContext = function(ua, request) {\n  var expires,\n    self = this,\n    contentType = request.getHeader('Content-Type'),\n    contentDisp = request.parseHeader('Content-Disposition');\n\n  // Check body and content type\n  if ((!contentDisp && contentType !== 'application/sdp') || (contentDisp && contentDisp.type === 'render')) {\n    this.renderbody = request.body;\n    this.rendertype = contentType;\n  } else if (contentType !== 'application/sdp' && (contentDisp && contentDisp.type === 'session')) {\n    request.reply(415);\n    //TODO: instead of 415, pass off to the media handler, who can then decide if we can use it\n    return;\n  }\n\n  //TODO: move this into media handler\n  SIP.Hacks.Firefox.cannotHandleExtraWhitespace(request);\n  SIP.Hacks.AllBrowsers.maskDtls(request);\n\n  SIP.Utils.augment(this, SIP.ServerContext, [ua, request]);\n  SIP.Utils.augment(this, SIP.Session, [ua.configuration.mediaHandlerFactory]);\n\n  this.status = C.STATUS_INVITE_RECEIVED;\n  this.from_tag = request.from_tag;\n  this.id = request.call_id + this.from_tag;\n  this.request = request;\n  this.contact = this.ua.contact.toString();\n\n  this.receiveNonInviteResponse = function () {}; // intentional no-op\n\n  this.logger = ua.getLogger('sip.inviteservercontext', this.id);\n\n  //Save the session into the ua sessions collection.\n  this.ua.sessions[this.id] = this;\n\n  //Get the Expires header value if exists\n  if(request.hasHeader('expires')) {\n    expires = request.getHeader('expires') * 1000;\n  }\n\n  //Set 100rel if necessary\n  function set100rel(h,c) {\n    if (request.hasHeader(h) && request.getHeader(h).toLowerCase().indexOf('100rel') >= 0) {\n      self.rel100 = c;\n    }\n  }\n  set100rel('require', SIP.C.supported.REQUIRED);\n  set100rel('supported', SIP.C.supported.SUPPORTED);\n\n  /* Set the to_tag before\n   * replying a response code that will create a dialog.\n   */\n  request.to_tag = SIP.Utils.newTag();\n\n  // An error on dialog creation will fire 'failed' event\n  if(!this.createDialog(request, 'UAS', true)) {\n    request.reply(500, 'Missing Contact header field');\n    return;\n  }\n\n  //Initialize Media Session\n  this.mediaHandler = this.mediaHandlerFactory(this, {\n    RTCConstraints: {\"optional\": [{'DtlsSrtpKeyAgreement': 'true'}]}\n  });\n\n  if (this.mediaHandler && this.mediaHandler.getRemoteStreams) {\n    this.getRemoteStreams = this.mediaHandler.getRemoteStreams.bind(this.mediaHandler);\n    this.getLocalStreams = this.mediaHandler.getLocalStreams.bind(this.mediaHandler);\n  }\n\n  function fireNewSession() {\n    var options = {extraHeaders: ['Contact: ' + self.contact]};\n\n    if (self.rel100 !== SIP.C.supported.REQUIRED) {\n      self.progress(options);\n    }\n    self.status = C.STATUS_WAITING_FOR_ANSWER;\n\n    // Set userNoAnswerTimer\n    self.timers.userNoAnswerTimer = SIP.Timers.setTimeout(function() {\n      request.reply(408);\n      self.failed(request, SIP.C.causes.NO_ANSWER);\n    }, self.ua.configuration.noAnswerTimeout);\n\n    /* Set expiresTimer\n     * RFC3261 13.3.1\n     */\n    if (expires) {\n      self.timers.expiresTimer = SIP.Timers.setTimeout(function() {\n        if(self.status === C.STATUS_WAITING_FOR_ANSWER) {\n          request.reply(487);\n          self.failed(request, SIP.C.causes.EXPIRES);\n        }\n      }, expires);\n    }\n\n    self.emit('invite',request);\n  }\n\n  if (!request.body || this.renderbody) {\n    SIP.Timers.setTimeout(fireNewSession, 0);\n  } else {\n    this.hasOffer = true;\n    this.mediaHandler.setDescription(\n      request.body,\n      /*\n       * onSuccess\n       * SDP Offer is valid. Fire UA newRTCSession\n       */\n      fireNewSession,\n      /*\n       * onFailure\n       * Bad media description\n       */\n      function(e) {\n        self.logger.warn('invalid SDP');\n        self.logger.warn(e);\n        request.reply(488);\n      }\n    );\n  }\n};\n\nInviteServerContext.prototype = {\n  reject: function(options) {\n    // Check Session Status\n    if (this.status === C.STATUS_TERMINATED) {\n      throw new SIP.Exceptions.InvalidStateError(this.status);\n    }\n\n    this.logger.log('rejecting RTCSession');\n\n    SIP.ServerContext.prototype.reject.apply(this, [options]);\n    return this.terminated();\n  },\n\n  terminate: function(options) {\n    options = options || {};\n\n    var\n    extraHeaders = (options.extraHeaders || []).slice(),\n    body = options.body,\n    dialog,\n    self = this;\n\n    if (this.status === C.STATUS_WAITING_FOR_ACK &&\n       this.request.server_transaction.state !== SIP.Transactions.C.STATUS_TERMINATED) {\n      dialog = this.dialog;\n\n      this.receiveRequest = function(request) {\n        if (request.method === SIP.C.ACK) {\n          this.request(SIP.C.BYE, {\n            extraHeaders: extraHeaders,\n            body: body\n          });\n          dialog.terminate();\n        }\n      };\n\n      this.request.server_transaction.on('stateChanged', function(){\n        if (this.state === SIP.Transactions.C.STATUS_TERMINATED) {\n          this.request = new SIP.OutgoingRequest(\n            SIP.C.BYE,\n            this.dialog.remote_target,\n            this.ua,\n            {\n              'cseq': this.dialog.local_seqnum+=1,\n              'call_id': this.dialog.id.call_id,\n              'from_uri': this.dialog.local_uri,\n              'from_tag': this.dialog.id.local_tag,\n              'to_uri': this.dialog.remote_uri,\n              'to_tag': this.dialog.id.remote_tag,\n              'route_set': this.dialog.route_set\n            },\n            extraHeaders,\n            body\n          );\n\n          new SIP.RequestSender(\n            {\n              request: this.request,\n              onRequestTimeout: function() {\n                self.onRequestTimeout();\n              },\n              onTransportError: function() {\n                self.onTransportError();\n              },\n              receiveResponse: function() {\n                return;\n              }\n            },\n            this.ua\n          ).send();\n          dialog.terminate();\n        }\n      });\n\n      this.emit('bye', this.request);\n      this.terminated();\n\n      // Restore the dialog into 'this' in order to be able to send the in-dialog BYE :-)\n      this.dialog = dialog;\n\n      // Restore the dialog into 'ua' so the ACK can reach 'this' session\n      this.ua.dialogs[dialog.id.toString()] = dialog;\n\n    } else if (this.status === C.STATUS_CONFIRMED) {\n      this.bye(options);\n    } else {\n      this.reject(options);\n    }\n\n    return this;\n  },\n\n  /*\n   * @param {Object} [options.media] gets passed to SIP.MediaHandler.getDescription as mediaHint\n   */\n  progress: function (options) {\n    options = options || {};\n    var\n      statusCode = options.statusCode || 180,\n      reasonPhrase = options.reasonPhrase,\n      extraHeaders = (options.extraHeaders || []).slice(),\n      body = options.body,\n      response;\n\n    if (statusCode < 100 || statusCode > 199) {\n      throw new TypeError('Invalid statusCode: ' + statusCode);\n    }\n\n    if (this.isCanceled || this.status === C.STATUS_TERMINATED) {\n      return this;\n    }\n\n    function do100rel() {\n      statusCode = options.statusCode || 183;\n\n      // Set status and add extra headers\n      this.status = C.STATUS_WAITING_FOR_PRACK;\n      extraHeaders.push('Contact: '+ this.contact);\n      extraHeaders.push('Require: 100rel');\n      extraHeaders.push('RSeq: ' + Math.floor(Math.random() * 10000));\n\n      // Save media hint for later (referred sessions)\n      this.mediaHint = options.media;\n\n      // Get the session description to add to preaccept with\n      this.mediaHandler.getDescription(\n        // Success\n        function succ(body) {\n          if (this.isCanceled || this.status === C.STATUS_TERMINATED) {\n            return;\n          }\n\n          this.early_sdp = body;\n          this[this.hasOffer ? 'hasAnswer' : 'hasOffer'] = true;\n\n          // Retransmit until we get a response or we time out (see prackTimer below)\n          var timeout = SIP.Timers.T1;\n          this.timers.rel1xxTimer = SIP.Timers.setTimeout(function rel1xxRetransmission() {\n            this.request.reply(statusCode, null, extraHeaders, body);\n            timeout *= 2;\n            this.timers.rel1xxTimer = SIP.Timers.setTimeout(rel1xxRetransmission.bind(this), timeout);\n          }.bind(this), timeout);\n\n          // Timeout and reject INVITE if no response\n          this.timers.prackTimer = SIP.Timers.setTimeout(function () {\n            if (this.status !== C.STATUS_WAITING_FOR_PRACK) {\n              return;\n            }\n\n            this.logger.log('no PRACK received, rejecting the call');\n            SIP.Timers.clearTimeout(this.timers.rel1xxTimer);\n            this.request.reply(504);\n            this.terminated(null, SIP.C.causes.NO_PRACK);\n          }.bind(this), SIP.Timers.T1 * 64);\n\n          // Send the initial response\n          response = this.request.reply(statusCode, reasonPhrase, extraHeaders, body);\n          this.emit('progress', response, reasonPhrase);\n        }.bind(this),\n\n        // Failure\n        function fail() {\n          this.failed(null, SIP.C.causes.WEBRTC_ERROR);\n        }.bind(this),\n\n        // Media hint:\n        options.media);\n    } // end do100rel\n\n    function normalReply() {\n      response = this.request.reply(statusCode, reasonPhrase, extraHeaders, body);\n      this.emit('progress', response, reasonPhrase);\n    }\n\n    if (options.statusCode !== 100 &&\n        (this.rel100 === SIP.C.supported.REQUIRED ||\n         (this.rel100 === SIP.C.supported.SUPPORTED && options.rel100) ||\n         (this.rel100 === SIP.C.supported.SUPPORTED && (this.ua.configuration.rel100 === SIP.C.supported.REQUIRED)))) {\n      do100rel.apply(this);\n    } else {\n      normalReply.apply(this);\n    }\n    return this;\n  },\n\n  /*\n   * @param {Object} [options.media] gets passed to SIP.MediaHandler.getDescription as mediaHint\n   */\n  accept: function(options) {\n    options = options || {};\n    options = SIP.Utils.desugarSessionOptions(options);\n    SIP.Utils.optionsOverride(options, 'media', 'mediaConstraints', true, this.logger, this.ua.configuration.media);\n    this.mediaHint = options.media;\n\n    // commented out now-unused hold-related variables for jshint. See below. JMF 2014-1-21\n    var\n      //idx, length, hasAudio, hasVideo,\n      self = this,\n      request = this.request,\n      extraHeaders = (options.extraHeaders || []).slice(),\n    //mediaStream = options.mediaStream || null,\n      sdpCreationSucceeded = function(body) {\n        var\n          response,\n          // run for reply success callback\n          replySucceeded = function() {\n            self.status = C.STATUS_WAITING_FOR_ACK;\n\n            self.setInvite2xxTimer(request, body);\n            self.setACKTimer();\n          },\n\n          // run for reply failure callback\n          replyFailed = function() {\n            self.failed(null, SIP.C.causes.CONNECTION_ERROR);\n          };\n\n        // Chrome might call onaddstream before accept() is called, which means\n        // mediaHandler.render() was called without a renderHint, so we need to\n        // re-render now that mediaHint.render has been set.\n        //\n        // Chrome seems to be in the right regarding this, see\n        // http://dev.w3.org/2011/webrtc/editor/webrtc.html#widl-RTCPeerConnection-onaddstream\n        self.mediaHandler.render();\n\n        extraHeaders.push('Contact: ' + self.contact);\n\n        if(!self.hasOffer) {\n          self.hasOffer = true;\n        } else {\n          self.hasAnswer = true;\n        }\n        response = request.reply(200, null, extraHeaders,\n                      body,\n                      replySucceeded,\n                      replyFailed\n                     );\n        if (self.status !== C.STATUS_TERMINATED) { // Didn't fail\n          self.accepted(response, SIP.C.REASON_PHRASE[200]);\n        }\n      },\n\n      sdpCreationFailed = function() {\n        if (self.status === C.STATUS_TERMINATED) {\n          return;\n        }\n        // TODO - fail out on error\n        //response = request.reply(480);\n        //self.failed(response, SIP.C.causes.USER_DENIED_MEDIA_ACCESS);\n        self.failed(null, SIP.C.causes.WEBRTC_ERROR);\n      };\n\n    // Check Session Status\n    if (this.status === C.STATUS_WAITING_FOR_PRACK) {\n      this.status = C.STATUS_ANSWERED_WAITING_FOR_PRACK;\n      return this;\n    } else if (this.status === C.STATUS_WAITING_FOR_ANSWER) {\n      this.status = C.STATUS_ANSWERED;\n    } else if (this.status !== C.STATUS_EARLY_MEDIA) {\n      throw new SIP.Exceptions.InvalidStateError(this.status);\n    }\n\n    // An error on dialog creation will fire 'failed' event\n    if(!this.createDialog(request, 'UAS')) {\n      request.reply(500, 'Missing Contact header field');\n      return this;\n    }\n\n    SIP.Timers.clearTimeout(this.timers.userNoAnswerTimer);\n\n    // this hold-related code breaks FF accepting new calls - JMF 2014-1-21\n    /*\n    length = this.getRemoteStreams().length;\n\n    for (idx = 0; idx < length; idx++) {\n      if (this.mediaHandler.getRemoteStreams()[idx].getVideoTracks().length > 0) {\n        hasVideo = true;\n      }\n      if (this.mediaHandler.getRemoteStreams()[idx].getAudioTracks().length > 0) {\n        hasAudio = true;\n      }\n    }\n\n    if (!hasAudio && this.mediaConstraints.audio === true) {\n      this.mediaConstraints.audio = false;\n      if (mediaStream) {\n        length = mediaStream.getAudioTracks().length;\n        for (idx = 0; idx < length; idx++) {\n          mediaStream.removeTrack(mediaStream.getAudioTracks()[idx]);\n        }\n      }\n    }\n\n    if (!hasVideo && this.mediaConstraints.video === true) {\n      this.mediaConstraints.video = false;\n      if (mediaStream) {\n        length = mediaStream.getVideoTracks().length;\n        for (idx = 0; idx < length; idx++) {\n          mediaStream.removeTrack(mediaStream.getVideoTracks()[idx]);\n        }\n      }\n    }\n    */\n\n    if (this.status === C.STATUS_EARLY_MEDIA) {\n      sdpCreationSucceeded();\n    } else {\n      this.mediaHandler.getDescription(\n        sdpCreationSucceeded,\n        sdpCreationFailed,\n        self.mediaHint\n      );\n    }\n\n    return this;\n  },\n\n  receiveRequest: function(request) {\n\n    // ISC RECEIVE REQUEST\n\n    function confirmSession() {\n      var contentType;\n\n      SIP.Timers.clearTimeout(this.timers.ackTimer);\n      SIP.Timers.clearTimeout(this.timers.invite2xxTimer);\n      this.status = C.STATUS_CONFIRMED;\n      this.unmute();\n\n      // TODO - this logic assumes Content-Disposition defaults\n      contentType = request.getHeader('Content-Type');\n      if (contentType !== 'application/sdp') {\n        this.renderbody = request.body;\n        this.rendertype = contentType;\n      }\n    }\n\n    switch(request.method) {\n    case SIP.C.CANCEL:\n      /* RFC3261 15 States that a UAS may have accepted an invitation while a CANCEL\n       * was in progress and that the UAC MAY continue with the session established by\n       * any 2xx response, or MAY terminate with BYE. SIP does continue with the\n       * established session. So the CANCEL is processed only if the session is not yet\n       * established.\n       */\n\n      /*\n       * Terminate the whole session in case the user didn't accept (or yet to send the answer) nor reject the\n       *request opening the session.\n       */\n      if(this.status === C.STATUS_WAITING_FOR_ANSWER ||\n         this.status === C.STATUS_WAITING_FOR_PRACK ||\n         this.status === C.STATUS_ANSWERED_WAITING_FOR_PRACK ||\n         this.status === C.STATUS_EARLY_MEDIA ||\n         this.status === C.STATUS_ANSWERED) {\n\n        this.status = C.STATUS_CANCELED;\n        this.request.reply(487);\n        this.canceled(request);\n        this.rejected(request, SIP.C.causes.CANCELED);\n        this.failed(request, SIP.C.causes.CANCELED);\n      }\n      break;\n    case SIP.C.ACK:\n      if(this.status === C.STATUS_WAITING_FOR_ACK) {\n        if (!this.hasAnswer) {\n          if(request.body && request.getHeader('content-type') === 'application/sdp') {\n            // ACK contains answer to an INVITE w/o SDP negotiation\n            SIP.Hacks.Firefox.cannotHandleExtraWhitespace(request);\n            SIP.Hacks.AllBrowsers.maskDtls(request);\n\n            this.hasAnswer = true;\n            this.mediaHandler.setDescription(\n              request.body,\n              /*\n               * onSuccess\n               * SDP Answer fits with Offer. Media will start\n               */\n              confirmSession.bind(this),\n              /*\n               * onFailure\n               * SDP Answer does not fit the Offer.  Terminate the call.\n               */\n              function (e) {\n                this.logger.warn(e);\n                this.terminate({\n                  statusCode: '488',\n                  reasonPhrase: 'Bad Media Description'\n                });\n                this.failed(request, SIP.C.causes.BAD_MEDIA_DESCRIPTION);\n              }.bind(this)\n            );\n          } else if (this.early_sdp) {\n            confirmSession.apply(this);\n          } else {\n            //TODO: Pass to mediahandler\n            this.failed(request, SIP.C.causes.BAD_MEDIA_DESCRIPTION);\n          }\n        } else {\n          confirmSession.apply(this);\n        }\n      }\n      break;\n    case SIP.C.PRACK:\n      if (this.status === C.STATUS_WAITING_FOR_PRACK || this.status === C.STATUS_ANSWERED_WAITING_FOR_PRACK) {\n        //localMedia = session.mediaHandler.localMedia;\n        if(!this.hasAnswer) {\n          if(request.body && request.getHeader('content-type') === 'application/sdp') {\n            this.hasAnswer = true;\n            this.mediaHandler.setDescription(\n              request.body,\n              /*\n               * onSuccess\n               * SDP Answer fits with Offer. Media will start\n               */\n              function() {\n                SIP.Timers.clearTimeout(this.timers.rel1xxTimer);\n                SIP.Timers.clearTimeout(this.timers.prackTimer);\n                request.reply(200);\n                if (this.status === C.STATUS_ANSWERED_WAITING_FOR_PRACK) {\n                  this.status = C.STATUS_EARLY_MEDIA;\n                  this.accept();\n                }\n                this.status = C.STATUS_EARLY_MEDIA;\n                //REVISIT\n                this.mute();\n              }.bind(this),\n              function (e) {\n                //TODO: Send to media handler\n                this.logger.warn(e);\n                this.terminate({\n                  statusCode: '488',\n                  reasonPhrase: 'Bad Media Description'\n                });\n                this.failed(request, SIP.C.causes.BAD_MEDIA_DESCRIPTION);\n              }.bind(this)\n            );\n          } else {\n            this.terminate({\n              statusCode: '488',\n              reasonPhrase: 'Bad Media Description'\n            });\n            this.failed(request, SIP.C.causes.BAD_MEDIA_DESCRIPTION);\n          }\n        } else {\n          SIP.Timers.clearTimeout(this.timers.rel1xxTimer);\n          SIP.Timers.clearTimeout(this.timers.prackTimer);\n          request.reply(200);\n\n          if (this.status === C.STATUS_ANSWERED_WAITING_FOR_PRACK) {\n            this.status = C.STATUS_EARLY_MEDIA;\n            this.accept();\n          }\n          this.status = C.STATUS_EARLY_MEDIA;\n          //REVISIT\n          this.mute();\n        }\n      } else if(this.status === C.STATUS_EARLY_MEDIA) {\n        request.reply(200);\n      }\n      break;\n    default:\n      Session.prototype.receiveRequest.apply(this, [request]);\n      break;\n    }\n  }\n};\n\nSIP.InviteServerContext = InviteServerContext;\n\nInviteClientContext = function(ua, target, options) {\n  options = options || {};\n  var requestParams, iceServers,\n    extraHeaders = (options.extraHeaders || []).slice(),\n    stunServers = options.stunServers || null,\n    turnServers = options.turnServers || null,\n    isMediaSupported = ua.configuration.mediaHandlerFactory.isSupported;\n\n  // Check WebRTC support\n  if (isMediaSupported && !isMediaSupported()) {\n    throw new SIP.Exceptions.NotSupportedError('Media not supported');\n  }\n\n  this.RTCConstraints = options.RTCConstraints || {};\n  this.inviteWithoutSdp = options.inviteWithoutSdp || false;\n\n  // Set anonymous property\n  this.anonymous = options.anonymous || false;\n\n  // Custom data to be sent either in INVITE or in ACK\n  this.renderbody = options.renderbody || null;\n  this.rendertype = options.rendertype || 'text/plain';\n\n  requestParams = {from_tag: this.from_tag};\n\n  /* Do not add ;ob in initial forming dialog requests if the registration over\n   *  the current connection got a GRUU URI.\n   */\n  this.contact = ua.contact.toString({\n    anonymous: this.anonymous,\n    outbound: this.anonymous ? !ua.contact.temp_gruu : !ua.contact.pub_gruu\n  });\n\n  if (this.anonymous) {\n    requestParams.from_displayName = 'Anonymous';\n    requestParams.from_uri = 'sip:anonymous@anonymous.invalid';\n\n    extraHeaders.push('P-Preferred-Identity: '+ ua.configuration.uri.toString());\n    extraHeaders.push('Privacy: id');\n  }\n  extraHeaders.push('Contact: '+ this.contact);\n  extraHeaders.push('Allow: '+ SIP.Utils.getAllowedMethods(ua));\n  if (!this.inviteWithoutSdp) {\n    extraHeaders.push('Content-Type: application/sdp');\n  } else if (this.renderbody) {\n    extraHeaders.push('Content-Type: ' + this.rendertype);\n    extraHeaders.push('Content-Disposition: render;handling=optional');\n  }\n\n  if (ua.configuration.rel100 === SIP.C.supported.REQUIRED) {\n    extraHeaders.push('Require: 100rel');\n  }\n\n  options.extraHeaders = extraHeaders;\n  options.params = requestParams;\n\n  SIP.Utils.augment(this, SIP.ClientContext, [ua, SIP.C.INVITE, target, options]);\n  SIP.Utils.augment(this, SIP.Session, [ua.configuration.mediaHandlerFactory]);\n\n  // Check Session Status\n  if (this.status !== C.STATUS_NULL) {\n    throw new SIP.Exceptions.InvalidStateError(this.status);\n  }\n\n  // Session parameter initialization\n  this.from_tag = SIP.Utils.newTag();\n\n  // OutgoingSession specific parameters\n  this.isCanceled = false;\n  this.received_100 = false;\n\n  this.method = SIP.C.INVITE;\n\n  this.receiveNonInviteResponse = this.receiveResponse;\n  this.receiveResponse = this.receiveInviteResponse;\n\n  this.logger = ua.getLogger('sip.inviteclientcontext');\n\n  if (stunServers) {\n    iceServers = SIP.UA.configuration_check.optional['stunServers'](stunServers);\n    if (!iceServers) {\n      throw new TypeError('Invalid stunServers: '+ stunServers);\n    } else {\n      this.stunServers = iceServers;\n    }\n  }\n\n  if (turnServers) {\n    iceServers = SIP.UA.configuration_check.optional['turnServers'](turnServers);\n    if (!iceServers) {\n      throw new TypeError('Invalid turnServers: '+ turnServers);\n    } else {\n      this.turnServers = iceServers;\n    }\n  }\n\n  ua.applicants[this] = this;\n\n  this.id = this.request.call_id + this.from_tag;\n\n  //Initialize Media Session\n  this.mediaHandler = this.mediaHandlerFactory(this, {\n    RTCConstraints: this.RTCConstraints,\n    stunServers: this.stunServers,\n    turnServers: this.turnServers\n  });\n\n  if (this.mediaHandler && this.mediaHandler.getRemoteStreams) {\n    this.getRemoteStreams = this.mediaHandler.getRemoteStreams.bind(this.mediaHandler);\n    this.getLocalStreams = this.mediaHandler.getLocalStreams.bind(this.mediaHandler);\n  }\n};\n\nInviteClientContext.prototype = {\n  /*\n   * @param {Object} [options.media] gets passed to SIP.MediaHandler.getDescription as mediaHint\n   */\n  invite: function (options) {\n    var self = this;\n    options = options || {};\n\n    SIP.Utils.optionsOverride(options, 'media', 'mediaConstraints', true, this.logger, this.ua.configuration.media);\n    this.mediaHint = options.media;\n\n    //Save the session into the ua sessions collection.\n    //Note: placing in constructor breaks call to request.cancel on close... User does not need this anyway\n    this.ua.sessions[this.id] = this;\n\n    //Note: due to the way Firefox handles gUM calls, it is recommended to make the gUM call at the app level\n    // and hand sip.js a stream as the mediaHint\n    if (this.inviteWithoutSdp) {\n      //just send an invite with no sdp...\n      this.request.body = self.renderbody;\n      this.status = C.STATUS_INVITE_SENT;\n      this.send();\n    } else {\n      this.mediaHandler.getDescription(\n        function onSuccess(offer) {\n          if (self.isCanceled || self.status === C.STATUS_TERMINATED) {\n            return;\n          }\n          self.hasOffer = true;\n          self.request.body = offer;\n          self.status = C.STATUS_INVITE_SENT;\n          self.send();\n        },\n        function onFailure() {\n          if (self.status === C.STATUS_TERMINATED) {\n            return;\n          }\n          // TODO...fail out\n          //self.failed(null, SIP.C.causes.USER_DENIED_MEDIA_ACCESS);\n          //self.failed(null, SIP.C.causes.WEBRTC_ERROR);\n          self.failed(null, SIP.C.causes.WEBRTC_ERROR);\n        },\n        self.mediaHint\n      );\n    }\n\n    return this;\n  },\n\n  receiveInviteResponse: function(response) {\n    var cause, //localMedia,\n      session = this,\n      id = response.call_id + response.from_tag + response.to_tag,\n      extraHeaders = [],\n      options = {};\n\n    if (this.status === C.STATUS_TERMINATED || response.method !== SIP.C.INVITE) {\n      return;\n    }\n\n    if (this.dialog && (response.status_code >= 200 && response.status_code <= 299)) {\n      if (id !== this.dialog.id.toString() ) {\n        if (!this.createDialog(response, 'UAC', true)) {\n          return;\n        }\n        this.earlyDialogs[id].sendRequest(this, SIP.C.ACK,\n                                          {\n                                            body: SIP.Utils.generateFakeSDP(response.body)\n                                          });\n        this.earlyDialogs[id].sendRequest(this, SIP.C.BYE);\n\n        /* NOTE: This fails because the forking proxy does not recognize that an unanswerable\n         * leg (due to peerConnection limitations) has been answered first. If your forking\n         * proxy does not hang up all unanswered branches on the first branch answered, remove this.\n         */\n        if(this.status !== C.STATUS_CONFIRMED) {\n          this.failed(response, SIP.C.causes.WEBRTC_ERROR);\n        }\n        return;\n      } else if (this.status === C.STATUS_CONFIRMED) {\n        this.sendRequest(SIP.C.ACK,{cseq: response.cseq});\n        return;\n      } else if (!this.hasAnswer) {\n        // invite w/o sdp is waiting for callback\n        //an invite with sdp must go on, and hasAnswer is true\n        return;\n      }\n    }\n\n    if (this.dialog && response.status_code < 200) {\n      /*\n        Early media has been set up with at least one other different branch,\n        but a final 2xx response hasn't been received\n      */\n      if (!this.earlyDialogs[id] && !this.createDialog(response, 'UAC', true)) {\n        return;\n      }\n\n      extraHeaders.push('RAck: ' + response.getHeader('rseq') + ' ' + response.getHeader('cseq'));\n      this.earlyDialogs[id].pracked.push(response.getHeader('rseq'));\n\n      this.earlyDialogs[id].sendRequest(this, SIP.C.PRACK, {\n        extraHeaders: extraHeaders,\n        body: SIP.Utils.generateFakeSDP(response.body)\n      });\n      return;\n    }\n\n    // Proceed to cancellation if the user requested.\n    if(this.isCanceled) {\n      if(response.status_code >= 100 && response.status_code < 200) {\n        this.request.cancel(this.cancelReason);\n        this.canceled(null);\n      } else if(response.status_code >= 200 && response.status_code < 299) {\n        this.acceptAndTerminate(response);\n        this.emit('bye', this.request);\n      }\n      return;\n    }\n\n    switch(true) {\n      case /^100$/.test(response.status_code):\n        this.received_100 = true;\n        break;\n      case (/^1[0-9]{2}$/.test(response.status_code)):\n        // Do nothing with 1xx responses without To tag.\n        if(!response.to_tag) {\n          this.logger.warn('1xx response received without to tag');\n          break;\n        }\n\n        // Create Early Dialog if 1XX comes with contact\n        if(response.hasHeader('contact')) {\n          // An error on dialog creation will fire 'failed' event\n          if (!this.createDialog(response, 'UAC', true)) {\n            break;\n          }\n        }\n\n        this.status = C.STATUS_1XX_RECEIVED;\n\n        if(response.hasHeader('require') &&\n           response.getHeader('require').indexOf('100rel') !== -1) {\n\n          // Do nothing if this.dialog is already confirmed\n          if (this.dialog || !this.earlyDialogs[id]) {\n            break;\n          }\n\n          if (this.earlyDialogs[id].pracked.indexOf(response.getHeader('rseq')) !== -1 ||\n              (this.earlyDialogs[id].pracked[this.earlyDialogs[id].pracked.length-1] >= response.getHeader('rseq') && this.earlyDialogs[id].pracked.length > 0)) {\n            return;\n          }\n\n          SIP.Hacks.Firefox.cannotHandleExtraWhitespace(response);\n          SIP.Hacks.AllBrowsers.maskDtls(response);\n\n          if (!response.body) {\n            extraHeaders.push('RAck: ' + response.getHeader('rseq') + ' ' + response.getHeader('cseq'));\n            this.earlyDialogs[id].pracked.push(response.getHeader('rseq'));\n            this.earlyDialogs[id].sendRequest(this, SIP.C.PRACK, {\n              extraHeaders: extraHeaders\n            });\n            this.emit('progress', response);\n\n          } else if (this.hasOffer) {\n            if (!this.createDialog(response, 'UAC')) {\n              break;\n            }\n            this.hasAnswer = true;\n            this.mediaHandler.setDescription(\n              response.body,\n              /*\n               * onSuccess\n               * SDP Answer fits with Offer. Media will start\n               */\n              function () {\n                extraHeaders.push('RAck: ' + response.getHeader('rseq') + ' ' + response.getHeader('cseq'));\n                session.dialog.pracked.push(response.getHeader('rseq'));\n\n                session.sendRequest(SIP.C.PRACK, {\n                  extraHeaders: extraHeaders,\n                  receiveResponse: function() {}\n                });\n                session.status = C.STATUS_EARLY_MEDIA;\n                session.mute();\n                session.emit('progress', response);\n                /*\n                if (session.status === C.STATUS_EARLY_MEDIA) {\n                  localMedia = session.mediaHandler.localMedia;\n                  if (localMedia.getAudioTracks().length > 0) {\n                    localMedia.getAudioTracks()[0].enabled = false;\n                  }\n                  if (localMedia.getVideoTracks().length > 0) {\n                    localMedia.getVideoTracks()[0].enabled = false;\n                  }\n                }*/\n              },\n              /*\n               * onFailure\n               * SDP Answer does not fit the Offer. Accept the call and Terminate.\n               */\n              function(e) {\n                session.logger.warn(e);\n                session.acceptAndTerminate(response, 488, 'Not Acceptable Here');\n                session.failed(response, SIP.C.causes.BAD_MEDIA_DESCRIPTION);\n              }\n            );\n          } else {\n            this.earlyDialogs[id].pracked.push(response.getHeader('rseq'));\n            this.earlyDialogs[id].mediaHandler.setDescription(\n              response.body,\n              function onSuccess() {\n                session.earlyDialogs[id].mediaHandler.getDescription(\n                  function onSuccess(sdp) {\n                    extraHeaders.push('Content-Type: application/sdp');\n                    extraHeaders.push('RAck: ' + response.getHeader('rseq') + ' ' + response.getHeader('cseq'));\n                    session.earlyDialogs[id].sendRequest(session, SIP.C.PRACK, {\n                      extraHeaders: extraHeaders,\n                      body: sdp\n                    });\n                    session.status = C.STATUS_EARLY_MEDIA;\n                    session.emit('progress', response);\n                  },\n                  function onFailure() {\n                    session.earlyDialogs[id].pracked.push(response.getHeader('rseq'));\n                    if (session.status === C.STATUS_TERMINATED) {\n                      return;\n                    }\n                    // TODO - fail out on error\n                    // session.failed(gum error);\n                    session.failed(null, SIP.C.causes.WEBRTC_ERROR);\n                  },\n                  session.mediaHint\n                );\n              },\n              function onFailure(e) {\n                session.earlyDialogs[id].pracked.splice(session.earlyDialogs[id].pracked.indexOf(response.getHeader('rseq')), 1);\n                // Could not set remote description\n                session.logger.warn('invalid SDP');\n                session.logger.warn(e);\n              }\n            );\n          }\n        } else {\n          this.emit('progress', response);\n        }\n        break;\n      case /^2[0-9]{2}$/.test(response.status_code):\n        var cseq = this.request.cseq + ' ' + this.request.method;\n        if (cseq !== response.getHeader('cseq')) {\n          break;\n        }\n\n        if (this.status === C.STATUS_EARLY_MEDIA && this.dialog) {\n          this.status = C.STATUS_CONFIRMED;\n          this.unmute();\n          /*localMedia = this.mediaHandler.localMedia;\n          if (localMedia.getAudioTracks().length > 0) {\n            localMedia.getAudioTracks()[0].enabled = true;\n          }\n          if (localMedia.getVideoTracks().length > 0) {\n            localMedia.getVideoTracks()[0].enabled = true;\n          }*/\n          options = {};\n          if (this.renderbody) {\n            extraHeaders.push('Content-Type: ' + this.rendertype);\n            options.extraHeaders = extraHeaders;\n            options.body = this.renderbody;\n          }\n          options.cseq = response.cseq;\n          this.sendRequest(SIP.C.ACK, options);\n          this.accepted(response);\n          break;\n        }\n        // Do nothing if this.dialog is already confirmed\n        if (this.dialog) {\n          break;\n        }\n\n        SIP.Hacks.Firefox.cannotHandleExtraWhitespace(response);\n        SIP.Hacks.AllBrowsers.maskDtls(response);\n\n        // This is an invite without sdp\n        if (!this.hasOffer) {\n          if (this.earlyDialogs[id] && this.earlyDialogs[id].mediaHandler.localMedia) {\n            //REVISIT\n            this.hasOffer = true;\n            this.hasAnswer = true;\n            this.mediaHandler = this.earlyDialogs[id].mediaHandler;\n            if (!this.createDialog(response, 'UAC')) {\n              break;\n            }\n            this.status = C.STATUS_CONFIRMED;\n            this.sendRequest(SIP.C.ACK, {cseq:response.cseq});\n\n            this.unmute();\n            /*\n            localMedia = session.mediaHandler.localMedia;\n            if (localMedia.getAudioTracks().length > 0) {\n              localMedia.getAudioTracks()[0].enabled = true;\n            }\n            if (localMedia.getVideoTracks().length > 0) {\n              localMedia.getVideoTracks()[0].enabled = true;\n            }*/\n            this.accepted(response);\n          } else {\n            if(!response.body) {\n              this.acceptAndTerminate(response, 400, 'Missing session description');\n              this.failed(response, SIP.C.causes.BAD_MEDIA_DESCRIPTION);\n              break;\n            }\n            if (!this.createDialog(response, 'UAC')) {\n              break;\n            }\n            this.hasOffer = true;\n            this.mediaHandler.setDescription(\n              response.body,\n              function onSuccess() {\n                session.mediaHandler.getDescription(\n                  function onSuccess(sdp) {\n                    //var localMedia;\n                    if(session.isCanceled || session.status === C.STATUS_TERMINATED) {\n                      return;\n                    }\n\n                    sdp = SIP.Hacks.Firefox.hasMissingCLineInSDP(sdp);\n\n                    session.status = C.STATUS_CONFIRMED;\n                    session.hasAnswer = true;\n\n                    session.unmute();\n                    /*localMedia = session.mediaHandler.localMedia;\n                    if (localMedia.getAudioTracks().length > 0) {\n                      localMedia.getAudioTracks()[0].enabled = true;\n                    }\n                    if (localMedia.getVideoTracks().length > 0) {\n                      localMedia.getVideoTracks()[0].enabled = true;\n                    }*/\n                    session.sendRequest(SIP.C.ACK,{\n                      body: sdp,\n                      extraHeaders:['Content-Type: application/sdp'],\n                      cseq:response.cseq\n                    });\n                    session.accepted(response);\n                  },\n                  function onFailure() {\n                    // TODO do something here\n                    session.logger.warn(\"there was a problem\");\n                  },\n                  session.mediaHint\n                );\n              },\n              function onFailure(e) {\n                session.logger.warn('invalid SDP');\n                session.logger.warn(e);\n                response.reply(488);\n              }\n            );\n          }\n        } else if (this.hasAnswer){\n          if (this.renderbody) {\n            extraHeaders.push('Content-Type: ' + session.rendertype);\n            options.extraHeaders = extraHeaders;\n            options.body = this.renderbody;\n          }\n          this.sendRequest(SIP.C.ACK, options);\n        } else {\n          if(!response.body) {\n            this.acceptAndTerminate(response, 400, 'Missing session description');\n            this.failed(response, SIP.C.causes.BAD_MEDIA_DESCRIPTION);\n            break;\n          }\n          if (!this.createDialog(response, 'UAC')) {\n            break;\n          }\n          this.hasAnswer = true;\n          this.mediaHandler.setDescription(\n            response.body,\n            /*\n             * onSuccess\n             * SDP Answer fits with Offer. Media will start\n             */\n            function() {\n              var options = {};//,localMedia;\n              session.status = C.STATUS_CONFIRMED;\n              session.unmute();\n              /*localMedia = session.mediaHandler.localMedia;\n              if (localMedia.getAudioTracks().length > 0) {\n                localMedia.getAudioTracks()[0].enabled = true;\n              }\n              if (localMedia.getVideoTracks().length > 0) {\n                localMedia.getVideoTracks()[0].enabled = true;\n              }*/\n              if (session.renderbody) {\n                extraHeaders.push('Content-Type: ' + session.rendertype);\n                options.extraHeaders = extraHeaders;\n                options.body = session.renderbody;\n              }\n              options.cseq = response.cseq;\n              session.sendRequest(SIP.C.ACK, options);\n              session.accepted(response);\n            },\n            /*\n             * onFailure\n             * SDP Answer does not fit the Offer. Accept the call and Terminate.\n             */\n            function(e) {\n              session.logger.warn(e);\n              session.acceptAndTerminate(response, 488, 'Not Acceptable Here');\n              session.failed(response, SIP.C.causes.BAD_MEDIA_DESCRIPTION);\n            }\n          );\n        }\n        break;\n      default:\n        cause = SIP.Utils.sipErrorCause(response.status_code);\n        this.failed(response, cause);\n        this.rejected(response, cause);\n    }\n  },\n\n  cancel: function(options) {\n    options = options || {};\n\n    var\n    statusCode = options.status_code,\n    reasonPhrase = options.reasonPhrase,\n    cancel_reason;\n\n    // Check Session Status\n    if (this.status === C.STATUS_TERMINATED) {\n      throw new SIP.Exceptions.InvalidStateError(this.status);\n    }\n\n    this.logger.log('canceling RTCSession');\n\n    if (statusCode && (statusCode < 200 || statusCode >= 700)) {\n      throw new TypeError('Invalid status_code: '+ statusCode);\n    } else if (statusCode) {\n      reasonPhrase = reasonPhrase || SIP.C.REASON_PHRASE[statusCode] || '';\n      cancel_reason = 'SIP ;cause=' + statusCode + ' ;text=\"' + reasonPhrase + '\"';\n    }\n\n    // Check Session Status\n    if (this.status === C.STATUS_NULL ||\n        (this.status === C.STATUS_INVITE_SENT && !this.received_100)) {\n      this.isCanceled = true;\n      this.cancelReason = cancel_reason;\n    } else if (this.status === C.STATUS_INVITE_SENT ||\n               this.status === C.STATUS_1XX_RECEIVED ||\n               this.status === C.STATUS_EARLY_MEDIA) {\n      this.request.cancel(cancel_reason);\n    }\n\n    return this.canceled();\n  },\n\n  terminate: function(options) {\n    if (this.status === C.STATUS_TERMINATED) {\n      return this;\n    }\n\n    if (this.status === C.STATUS_WAITING_FOR_ACK || this.status === C.STATUS_CONFIRMED) {\n      this.bye(options);\n    } else {\n      this.cancel(options);\n    }\n\n    return this.terminated();\n  },\n\n  receiveRequest: function(request) {\n    // ICC RECEIVE REQUEST\n\n    // Reject CANCELs\n    if (request.method === SIP.C.CANCEL) {\n      // TODO; make this a switch when it gets added\n    }\n\n    if (request.method === SIP.C.ACK && this.status === C.STATUS_WAITING_FOR_ACK) {\n      SIP.Timers.clearTimeout(this.timers.ackTimer);\n      SIP.Timers.clearTimeout(this.timers.invite2xxTimer);\n      this.status = C.STATUS_CONFIRMED;\n      this.unmute();\n\n      this.accepted();\n    }\n\n    return Session.prototype.receiveRequest.apply(this, [request]);\n  }\n};\n\nSIP.InviteClientContext = InviteClientContext;\n\n};\n\n\n/***/ },\n/* 26 */\n/***/ function(module, exports) {\n\n\n/**\n * @fileoverview SIP Subscriber (SIP-Specific Event Notifications RFC6665)\n */\n\n/**\n * @augments SIP\n * @class Class creating a SIP Subscription.\n */\nmodule.exports = function (SIP) {\nSIP.Subscription = function (ua, target, event, options) {\n  var events;\n\n  options = options || {};\n  options.extraHeaders = (options.extraHeaders || []).slice();\n\n  events = ['notify'];\n  this.id = null;\n  this.state = 'init';\n\n  if (!event) {\n    throw new TypeError('Event necessary to create a subscription.');\n  } else {\n    //TODO: check for valid events here probably make a list in SIP.C; or leave it up to app to check?\n    //The check may need to/should probably occur on the other side,\n    this.event = event;\n  }\n\n  if(typeof options.expires !== 'number'){\n    ua.logger.warn('expires must be a number. Using default of 3600.');\n    this.expires = 3600;\n  } else {\n    this.expires = options.expires;\n  }\n\n  options.extraHeaders.push('Event: ' + this.event);\n  options.extraHeaders.push('Expires: ' + this.expires);\n\n  if (options.body) {\n    this.body = options.body;\n  }\n\n  this.contact = ua.contact.toString();\n\n  options.extraHeaders.push('Contact: '+ this.contact);\n  options.extraHeaders.push('Allow: '+ SIP.Utils.getAllowedMethods(ua));\n\n  SIP.Utils.augment(this, SIP.ClientContext, [ua, SIP.C.SUBSCRIBE, target, options]);\n\n  this.logger = ua.getLogger('sip.subscription');\n\n  this.dialog = null;\n  this.timers = {N: null, sub_duration: null};\n  this.errorCodes  = [404,405,410,416,480,481,482,483,484,485,489,501,604];\n\n  this.initMoreEvents(events);\n};\n\nSIP.Subscription.prototype = {\n  subscribe: function() {\n    var sub = this;\n\n    SIP.Timers.clearTimeout(this.timers.sub_duration);\n    SIP.Timers.clearTimeout(this.timers.N);\n    this.timers.N = SIP.Timers.setTimeout(sub.timer_fire.bind(sub), SIP.Timers.TIMER_N);\n\n    this.send();\n\n    this.state = 'notify_wait';\n\n    return this;\n  },\n\n  receiveResponse: function(response) {\n    var expires, sub = this,\n        cause = SIP.C.REASON_PHRASE[response.status_code] || '';\n\n    if (this.errorCodes.indexOf(response.status_code) !== -1) {\n      this.failed(response, null);\n    } else if (/^2[0-9]{2}$/.test(response.status_code)){\n      expires = response.getHeader('Expires');\n      SIP.Timers.clearTimeout(this.timers.N);\n\n      if (this.createConfirmedDialog(response,'UAC')) {\n        this.id = this.dialog.id.toString();\n        this.ua.subscriptions[this.id] = this;\n        this.emit('accepted', response, cause);\n        // UPDATE ROUTE SET TO BE BACKWARDS COMPATIBLE?\n      }\n\n      if (expires && expires <= this.expires) {\n        this.timers.sub_duration = SIP.Timers.setTimeout(sub.subscribe.bind(sub), expires * 1000);\n      } else {\n        if (!expires) {\n          this.logger.warn('Expires header missing in a 200-class response to SUBSCRIBE');\n          this.failed(response, SIP.C.EXPIRES_HEADER_MISSING);\n        } else {\n          this.logger.warn('Expires header in a 200-class response to SUBSCRIBE with a higher value than the one in the request');\n          this.failed(response, SIP.C.INVALID_EXPIRES_HEADER);\n        }\n      }\n    } //Used to just ignore provisional responses; now ignores everything except errorCodes and 2xx\n  },\n\n  unsubscribe: function() {\n    var extraHeaders = [], sub = this;\n\n    this.state = 'terminated';\n\n    extraHeaders.push('Event: ' + this.event);\n    extraHeaders.push('Expires: 0');\n\n    extraHeaders.push('Contact: '+ this.contact);\n    extraHeaders.push('Allow: '+ SIP.Utils.getAllowedMethods(this.ua));\n\n    this.request = new SIP.OutgoingRequest(this.method, this.request.to.uri.toString(), this.ua, null, extraHeaders);\n\n    //MAYBE, may want to see state\n    this.receiveResponse = function(){};\n\n    SIP.Timers.clearTimeout(this.timers.sub_duration);\n    SIP.Timers.clearTimeout(this.timers.N);\n    this.timers.N = SIP.Timers.setTimeout(sub.timer_fire.bind(sub), SIP.Timers.TIMER_N);\n\n    this.send();\n  },\n\n  /**\n  * @private\n  */\n  timer_fire: function(){\n    if (this.state === 'terminated') {\n      this.close();\n    } else if (this.state === 'pending' || this.state === 'notify_wait') {\n      this.state = 'terminated';\n      this.close();\n    } else {\n      this.subscribe();\n    }\n  },\n\n  /**\n  * @private\n  */\n  close: function() {\n    if(this.state !== 'terminated') {\n      this.unsubscribe();\n    }\n\n    this.terminateDialog();\n    SIP.Timers.clearTimeout(this.timers.N);\n    SIP.Timers.clearTimeout(this.timers.sub_duration);\n\n    delete this.ua.subscriptions[this.id];\n  },\n\n  /**\n  * @private\n  */\n  createConfirmedDialog: function(message, type) {\n    var dialog;\n\n    this.terminateDialog();\n    dialog = new SIP.Dialog(this, message, type);\n\n    if(!dialog.error) {\n      this.dialog = dialog;\n      return true;\n    }\n    // Dialog not created due to an error\n    else {\n      return false;\n    }\n  },\n\n  /**\n  * @private\n  */\n  terminateDialog: function() {\n    if(this.dialog) {\n      delete this.ua.subscriptions[this.id];\n      this.dialog.terminate();\n      delete this.dialog;\n    }\n  },\n\n  /**\n  * @private\n  */\n  receiveRequest: function(request) {\n    var sub_state, sub = this;\n\n    function setExpiresTimeout() {\n      if (sub_state.expires) {\n        sub_state.expires = Math.min(sub.expires,\n                                     Math.max(sub_state.expires, 0));\n        sub.timers.sub_duration = SIP.Timers.setTimeout(sub.subscribe.bind(sub),\n                                                    sub_state.expires * 1000);\n      }\n    }\n\n    if (!this.matchEvent(request)) { //checks event and subscription_state headers\n      request.reply(489);\n      return;\n    }\n\n    sub_state = request.parseHeader('Subscription-State');\n\n    request.reply(200, SIP.C.REASON_200);\n\n    SIP.Timers.clearTimeout(this.timers.N);\n    SIP.Timers.clearTimeout(this.timers.sub_duration);\n\n    this.emit('notify', {request: request});\n\n    switch (sub_state.state) {\n      case 'active':\n        this.state = 'active';\n        setExpiresTimeout();\n        break;\n      case 'pending':\n        if (this.state === 'notify_wait') {\n          setExpiresTimeout();\n        }\n        this.state = 'pending';\n        break;\n      case 'terminated':\n        if (sub_state.reason) {\n          this.logger.log('terminating subscription with reason '+ sub_state.reason);\n          switch (sub_state.reason) {\n            case 'deactivated':\n            case 'timeout':\n              this.subscribe();\n              return;\n            case 'probation':\n            case 'giveup':\n              if(sub_state.params && sub_state.params['retry-after']) {\n                this.timers.sub_duration = SIP.Timers.setTimeout(sub.subscribe.bind(sub), sub_state.params['retry-after']);\n              } else {\n                this.subscribe();\n              }\n              return;\n            case 'rejected':\n            case 'noresource':\n            case 'invariant':\n              break;\n          }\n        }\n        this.close();\n        break;\n    }\n  },\n\n  failed: function(response, cause) {\n    this.close();\n    return this.emit('failed', response, cause);\n  },\n\n  /**\n  * @private\n  */\n  matchEvent: function(request) {\n    var event;\n\n    // Check mandatory header Event\n    if (!request.hasHeader('Event')) {\n      this.logger.warn('missing Event header');\n      return false;\n    }\n    // Check mandatory header Subscription-State\n    if (!request.hasHeader('Subscription-State')) {\n      this.logger.warn('missing Subscription-State header');\n      return false;\n    }\n\n    // Check whether the event in NOTIFY matches the event in SUBSCRIBE\n    event = request.parseHeader('event').event;\n\n    if (this.event !== event) {\n      this.logger.warn('event match failed');\n      request.reply(481, 'Event Match Failed');\n      return false;\n    } else {\n      return true;\n    }\n  }\n};\n};\n\n\n/***/ },\n/* 27 */\n/***/ function(module, exports) {\n\n/**\n * @fileoverview MediaHandler\n */\n\n/* MediaHandler\n * @class PeerConnection helper Class.\n * @param {SIP.Session} session\n * @param {Object} [options]\n * @param {SIP.WebRTC.MediaStreamManager} [options.mediaStreamManager]\n *        The MediaStreamManager to acquire/release streams from/to.\n *        If not provided, a default MediaStreamManager will be used.\n */\nmodule.exports = function (SIP) {\n\nvar MediaHandler = function(session, options) {\n  var events = [\n    'userMediaRequest',\n    'userMedia',\n    'userMediaFailed',\n    'iceGathering',\n    'iceCandidate',\n    'iceComplete',\n    'iceFailed',\n    'getDescription',\n    'setDescription',\n    'dataChannel',\n    'addStream'\n  ];\n  options = options || {};\n\n  this.logger = session.ua.getLogger('sip.invitecontext.mediahandler', session.id);\n  this.session = session;\n  this.localMedia = null;\n  this.ready = true;\n  this.mediaStreamManager = options.mediaStreamManager || new SIP.WebRTC.MediaStreamManager(this.logger);\n  this.audioMuted = false;\n  this.videoMuted = false;\n\n  // old init() from here on\n  var idx, length, server,\n    self = this,\n    servers = [],\n    stunServers = options.stunServers || null,\n    turnServers = options.turnServers || null,\n    config = this.session.ua.configuration;\n  this.RTCConstraints = options.RTCConstraints || {};\n\n  if (!stunServers) {\n    stunServers = config.stunServers;\n  }\n\n  if(!turnServers) {\n    turnServers = config.turnServers;\n  }\n\n  /* Change 'url' to 'urls' whenever this issue is solved:\n   * https://code.google.com/p/webrtc/issues/detail?id=2096\n   */\n  [].concat(stunServers).forEach(function (server) {\n    servers.push({'url': server});\n  });\n\n  length = turnServers.length;\n  for (idx = 0; idx < length; idx++) {\n    server = turnServers[idx];\n    servers.push({\n      'url': server.urls,\n      'username': server.username,\n      'credential': server.password\n    });\n  }\n\n  this.peerConnection = new SIP.WebRTC.RTCPeerConnection({'iceServers': servers}, this.RTCConstraints);\n\n  this.peerConnection.onaddstream = function(e) {\n    self.logger.log('stream added: '+ e.stream.id);\n    self.render();\n    self.emit('addStream', e);\n  };\n\n  this.peerConnection.onremovestream = function(e) {\n    self.logger.log('stream removed: '+ e.stream.id);\n  };\n\n  this.peerConnection.onicecandidate = function(e) {\n    self.emit('iceCandidate', e);\n    if (e.candidate) {\n      self.logger.log('ICE candidate received: '+ (e.candidate.candidate === null ? null : e.candidate.candidate.trim()));\n    } else if (self.onIceCompleted !== undefined) {\n      self.onIceCompleted(this);\n    } else {\n      self.callOnIceCompleted = true;\n    }\n  };\n\n  this.peerConnection.onicegatheringstatechange = function () {\n    self.logger.log('RTCIceGatheringState changed: ' + this.iceGatheringState);\n    if (this.iceGatheringState === 'gathering') {\n      self.emit('iceGathering', this);\n    }\n    if (this.iceGatheringState === 'complete') {\n      if (self.onIceCompleted !== undefined) {\n        self.onIceCompleted(this);\n      } else {\n        self.callOnIceCompleted = true;\n      }\n    }\n  };\n\n  this.peerConnection.oniceconnectionstatechange = function() {  //need e for commented out case\n    self.logger.log('ICE connection state changed to \"'+ this.iceConnectionState +'\"');\n\n    if (this.iceConnectionState === 'failed') {\n      self.emit('iceFailed', this);\n    }\n\n    //Bria state changes are always connected -> disconnected -> connected on accept, so session gets terminated\n    //normal calls switch from failed to connected in some cases, so checking for failed and terminated\n    /*if (this.iceConnectionState === 'failed') {\n      self.session.terminate({\n        cause: SIP.C.causes.RTP_TIMEOUT,\n        status_code: 200,\n        reason_phrase: SIP.C.causes.RTP_TIMEOUT\n      });\n    } else if (e.currentTarget.iceGatheringState === 'complete' && this.iceConnectionState !== 'closed') {\n      self.onIceCompleted(this);\n    }*/\n  };\n\n  this.peerConnection.onstatechange = function() {\n    self.logger.log('PeerConnection state changed to \"'+ this.readyState +'\"');\n  };\n\n  this.initEvents(events);\n\n  function selfEmit(mh, event) {\n    if (mh.mediaStreamManager.on &&\n        mh.mediaStreamManager.checkEvent &&\n        mh.mediaStreamManager.checkEvent(event)) {\n      mh.mediaStreamManager.on(event, function () {\n        mh.emit.apply(mh, [event].concat(Array.prototype.slice.call(arguments)));\n      });\n    }\n  }\n\n  selfEmit(this, 'userMediaRequest');\n  selfEmit(this, 'userMedia');\n  selfEmit(this, 'userMediaFailed');\n};\n\nMediaHandler.defaultFactory = function defaultFactory (session, options) {\n  return new MediaHandler(session, options);\n};\nMediaHandler.defaultFactory.isSupported = function () {\n  return SIP.WebRTC.isSupported();\n};\n\nMediaHandler.prototype = Object.create(SIP.MediaHandler.prototype, {\n// Functions the session can use\n  isReady: {writable: true, value: function isReady () {\n    return this.ready;\n  }},\n\n  close: {writable: true, value: function close () {\n    this.logger.log('closing PeerConnection');\n    // have to check signalingState since this.close() gets called multiple times\n    // TODO figure out why that happens\n    if(this.peerConnection && this.peerConnection.signalingState !== 'closed') {\n      this.peerConnection.close();\n\n      if(this.localMedia) {\n        this.mediaStreamManager.release(this.localMedia);\n      }\n    }\n  }},\n\n  /**\n   * @param {Function} onSuccess\n   * @param {Function} onFailure\n   * @param {SIP.WebRTC.MediaStream | (getUserMedia constraints)} [mediaHint]\n   *        the MediaStream (or the constraints describing it) to be used for the session\n   */\n  getDescription: {writable: true, value: function getDescription (onSuccess, onFailure, mediaHint) {\n    var self = this;\n    mediaHint = mediaHint || {};\n    if (mediaHint.dataChannel === true) {\n      mediaHint.dataChannel = {};\n    }\n    this.mediaHint = mediaHint;\n\n    /*\n     * 1. acquire stream (skip if MediaStream passed in)\n     * 2. addStream\n     * 3. createOffer/createAnswer\n     * 4. call onSuccess()\n     */\n\n    /* Last functions first, to quiet JSLint */\n    function streamAdditionSucceeded() {\n      if (self.hasOffer('remote')) {\n        self.peerConnection.ondatachannel = function (evt) {\n          self.dataChannel = evt.channel;\n          self.emit('dataChannel', self.dataChannel);\n        };\n      } else if (mediaHint.dataChannel &&\n                 self.peerConnection.createDataChannel) {\n        self.dataChannel = self.peerConnection.createDataChannel(\n          'sipjs',\n          mediaHint.dataChannel\n        );\n        self.emit('dataChannel', self.dataChannel);\n      }\n\n      self.render();\n      self.createOfferOrAnswer(onSuccess, onFailure, self.RTCConstraints);\n    }\n\n    function acquireSucceeded(stream) {\n      self.logger.log('acquired local media stream');\n      self.localMedia = stream;\n      self.session.connecting();\n      self.addStream(\n        stream,\n        streamAdditionSucceeded,\n        onFailure\n      );\n    }\n\n    if (self.localMedia) {\n      self.logger.log('already have local media');\n      streamAdditionSucceeded();\n      return;\n    }\n\n    self.logger.log('acquiring local media');\n    self.mediaStreamManager.acquire(\n      acquireSucceeded,\n      function acquireFailed(err) {\n        self.logger.error('unable to acquire stream');\n        self.logger.error(err);\n        self.session.connecting();\n        onFailure(err);\n      },\n      mediaHint\n    );\n  }},\n\n  /**\n  * Message reception.\n  * @param {String} type\n  * @param {String} sdp\n  * @param {Function} onSuccess\n  * @param {Function} onFailure\n  */\n  setDescription: {writable: true, value: function setDescription (sdp, onSuccess, onFailure) {\n    var rawDescription = {\n      type: this.hasOffer('local') ? 'answer' : 'offer',\n      sdp: sdp\n    };\n\n    this.emit('setDescription', rawDescription);\n\n    var description = new SIP.WebRTC.RTCSessionDescription(rawDescription);\n    this.peerConnection.setRemoteDescription(description, onSuccess, onFailure);\n  }},\n\n// Functions the session can use, but only because it's convenient for the application\n  isMuted: {writable: true, value: function isMuted () {\n    return {\n      audio: this.audioMuted,\n      video: this.videoMuted\n    };\n  }},\n\n  mute: {writable: true, value: function mute (options) {\n    if (this.getLocalStreams().length === 0) {\n      return;\n    }\n\n    options = options || {\n      audio: this.getLocalStreams()[0].getAudioTracks().length > 0,\n      video: this.getLocalStreams()[0].getVideoTracks().length > 0\n    };\n\n    var audioMuted = false,\n        videoMuted = false;\n\n    if (options.audio && !this.audioMuted) {\n      audioMuted = true;\n      this.audioMuted = true;\n      this.toggleMuteAudio(true);\n    }\n\n    if (options.video && !this.videoMuted) {\n      videoMuted = true;\n      this.videoMuted = true;\n      this.toggleMuteVideo(true);\n    }\n\n    //REVISIT\n    if (audioMuted || videoMuted) {\n      return {\n        audio: audioMuted,\n        video: videoMuted\n      };\n      /*this.session.onmute({\n        audio: audioMuted,\n        video: videoMuted\n      });*/\n    }\n  }},\n\n  unmute: {writable: true, value: function unmute (options) {\n    if (this.getLocalStreams().length === 0) {\n      return;\n    }\n\n    options = options || {\n      audio: this.getLocalStreams()[0].getAudioTracks().length > 0,\n      video: this.getLocalStreams()[0].getVideoTracks().length > 0\n    };\n\n    var audioUnMuted = false,\n        videoUnMuted = false;\n\n    if (options.audio && this.audioMuted) {\n      audioUnMuted = true;\n      this.audioMuted = false;\n      this.toggleMuteAudio(false);\n    }\n\n    if (options.video && this.videoMuted) {\n      videoUnMuted = true;\n      this.videoMuted = false;\n      this.toggleMuteVideo(false);\n    }\n\n    //REVISIT\n    if (audioUnMuted || videoUnMuted) {\n      return {\n        audio: audioUnMuted,\n        video: videoUnMuted\n      };\n      /*this.session.onunmute({\n        audio: audioUnMuted,\n        video: videoUnMuted\n      });*/\n    }\n  }},\n\n  hold: {writable: true, value: function hold () {\n    this.toggleMuteAudio(true);\n    this.toggleMuteVideo(true);\n  }},\n\n  unhold: {writable: true, value: function unhold () {\n    if (!this.audioMuted) {\n      this.toggleMuteAudio(false);\n    }\n\n    if (!this.videoMuted) {\n      this.toggleMuteVideo(false);\n    }\n  }},\n\n// Functions the application can use, but not the session\n  getLocalStreams: {writable: true, value: function getLocalStreams () {\n    var pc = this.peerConnection;\n    if (pc && pc.signalingState === 'closed') {\n      this.logger.warn('peerConnection is closed, getLocalStreams returning []');\n      return [];\n    }\n    return (pc.getLocalStreams && pc.getLocalStreams()) ||\n      pc.localStreams || [];\n  }},\n\n  getRemoteStreams: {writable: true, value: function getRemoteStreams () {\n    var pc = this.peerConnection;\n    if (pc && pc.signalingState === 'closed') {\n      this.logger.warn('peerConnection is closed, getRemoteStreams returning []');\n      return [];\n    }\n    return(pc.getRemoteStreams && pc.getRemoteStreams()) ||\n      pc.remoteStreams || [];\n  }},\n\n  render: {writable: true, value: function render (renderHint) {\n    renderHint = renderHint || (this.mediaHint && this.mediaHint.render);\n    if (!renderHint) {\n      return false;\n    }\n    var streamGetters = {\n      local: 'getLocalStreams',\n      remote: 'getRemoteStreams'\n    };\n    Object.keys(streamGetters).forEach(function (loc) {\n      var streamGetter = streamGetters[loc];\n      var streams = this[streamGetter]();\n      if (streams.length) {\n        SIP.WebRTC.MediaStreamManager.render(streams[0], renderHint[loc]);\n      }\n    }.bind(this));\n  }},\n\n// Internal functions\n  hasOffer: {writable: true, value: function hasOffer (where) {\n    var offerState = 'have-' + where + '-offer';\n    return this.peerConnection.signalingState === offerState;\n    // TODO consider signalingStates with 'pranswer'?\n  }},\n\n  createOfferOrAnswer: {writable: true, value: function createOfferOrAnswer (onSuccess, onFailure, constraints) {\n    var self = this;\n    var methodName;\n\n    function readySuccess () {\n      var sdp = self.peerConnection.localDescription.sdp;\n\n      sdp = SIP.Hacks.Chrome.needsExplicitlyInactiveSDP(sdp);\n      sdp = SIP.Hacks.AllBrowsers.unmaskDtls(sdp);\n      sdp = SIP.Hacks.Firefox.hasIncompatibleCLineWithSomeSIPEndpoints(sdp);\n\n      var sdpWrapper = {\n        type: methodName === 'createOffer' ? 'offer' : 'answer',\n        sdp: sdp\n      };\n\n      self.emit('getDescription', sdpWrapper);\n\n      self.ready = true;\n      onSuccess(sdpWrapper.sdp);\n    }\n\n    function onSetLocalDescriptionSuccess() {\n      if (self.peerConnection.iceGatheringState === 'complete' && (self.peerConnection.iceConnectionState === 'connected' || self.peerConnection.iceConnectionState === 'completed')) {\n        readySuccess();\n      } else {\n        self.onIceCompleted = function(pc) {\n          self.logger.log('ICE Gathering Completed');\n          self.onIceCompleted = undefined;\n          self.emit('iceComplete', pc);\n          readySuccess();\n        };\n        if (self.callOnIceCompleted) {\n          self.onIceCompleted();\n        }\n      }\n    }\n\n    function methodFailed (methodName, e) {\n      self.logger.error('peerConnection.' + methodName + ' failed');\n      self.logger.error(e);\n      self.ready = true;\n      onFailure(e);\n    }\n\n    self.ready = false;\n\n    methodName = self.hasOffer('remote') ? 'createAnswer' : 'createOffer';\n\n    self.peerConnection[methodName](\n      function(sessionDescription){\n        self.peerConnection.setLocalDescription(\n          sessionDescription,\n          onSetLocalDescriptionSuccess,\n          methodFailed.bind(null, 'setLocalDescription')\n        );\n      },\n      methodFailed.bind(null, methodName),\n      constraints\n    );\n  }},\n\n  addStream: {writable: true, value: function addStream (stream, onSuccess, onFailure) {\n    try {\n      this.peerConnection.addStream(stream);\n    } catch(e) {\n      this.logger.error('error adding stream');\n      this.logger.error(e);\n      onFailure(e);\n      return;\n    }\n\n    onSuccess();\n  }},\n\n  toggleMuteHelper: {writable: true, value: function toggleMuteHelper (trackGetter, mute) {\n    this.getLocalStreams().forEach(function (stream) {\n      stream[trackGetter]().forEach(function (track) {\n        track.enabled = !mute;\n      });\n    });\n  }},\n\n  toggleMuteAudio: {writable: true, value: function toggleMuteAudio (mute) {\n    this.toggleMuteHelper('getAudioTracks', mute);\n  }},\n\n  toggleMuteVideo: {writable: true, value: function toggleMuteVideo (mute) {\n    this.toggleMuteHelper('getVideoTracks', mute);\n  }}\n});\n\n// Return since it will be assigned to a variable.\nreturn MediaHandler;\n};\n\n\n/***/ },\n/* 28 */\n/***/ function(module, exports) {\n\n/**\n * @fileoverview MediaStreamManager\n */\n\n/* MediaStreamManager\n * @class Manages the acquisition and release of MediaStreams.\n * @param {mediaHint} [defaultMediaHint] The mediaHint to use if none is provided to acquire()\n */\nmodule.exports = function (SIP) {\n\n// Default MediaStreamManager provides single-use streams created with getUserMedia\nvar MediaStreamManager = function MediaStreamManager (logger, defaultMediaHint) {\n  if (!SIP.WebRTC.isSupported()) {\n    throw new SIP.Exceptions.NotSupportedError('Media not supported');\n  }\n\n  var events = [\n    'userMediaRequest',\n    'userMedia',\n    'userMediaFailed'\n  ];\n  this.mediaHint = defaultMediaHint || {\n    constraints: {audio: true, video: true}\n  };\n\n  this.logger = logger;\n  this.initEvents(events);\n\n  // map of streams to acquisition manner:\n  // true -> passed in as mediaHint.stream\n  // false -> getUserMedia\n  this.acquisitions = {};\n};\nMediaStreamManager.streamId = function (stream) {\n  return stream.getAudioTracks().concat(stream.getVideoTracks())\n    .map(function trackId (track) {\n      return track.id;\n    })\n    .join('');\n};\n\nMediaStreamManager.render = function render (stream, elements) {\n  if (!elements) {\n    return false;\n  }\n\n  function attachAndPlay (element, stream) {\n    (window.attachMediaStream || attachMediaStream)(element, stream);\n    ensureMediaPlaying(element);\n  }\n\n  function attachMediaStream(element, stream) {\n    if (typeof element.src !== 'undefined') {\n      URL.revokeObjectURL(element.src);\n      element.src = URL.createObjectURL(stream);\n    } else if (typeof (element.srcObject || element.mozSrcObject) !== 'undefined') {\n      element.srcObject = element.mozSrcObject = stream;\n    } else {\n      return false;\n    }\n\n    return true;\n  }\n\n  function ensureMediaPlaying (mediaElement) {\n    var interval = 100;\n    mediaElement.ensurePlayingIntervalId = SIP.Timers.setInterval(function () {\n      if (mediaElement.paused) {\n        mediaElement.play();\n      }\n      else {\n        SIP.Timers.clearInterval(mediaElement.ensurePlayingIntervalId);\n      }\n    }, interval);\n  }\n\n  if (elements.video) {\n    if (elements.audio) {\n      elements.video.volume = 0;\n    }\n    attachAndPlay(elements.video, stream);\n  }\n  if (elements.audio) {\n    attachAndPlay(elements.audio, stream);\n  }\n};\n\nMediaStreamManager.prototype = Object.create(SIP.EventEmitter.prototype, {\n  'acquire': {value: function acquire (onSuccess, onFailure, mediaHint) {\n    mediaHint = Object.keys(mediaHint || {}).length ? mediaHint : this.mediaHint;\n\n    var saveSuccess = function (onSuccess, stream, isHintStream) {\n      var streamId = MediaStreamManager.streamId(stream);\n      this.acquisitions[streamId] = !!isHintStream;\n      onSuccess(stream);\n    }.bind(this, onSuccess);\n\n    if (mediaHint.stream) {\n      saveSuccess(mediaHint.stream, true);\n    } else {\n      // Fallback to audio/video enabled if no mediaHint can be found.\n      var constraints = mediaHint.constraints ||\n        (this.mediaHint && this.mediaHint.constraints) ||\n        {audio: true, video: true};\n\n      /*\n       * Make the call asynchronous, so that ICCs have a chance\n       * to define callbacks to `userMediaRequest`\n       */\n      SIP.Timers.setTimeout(function () {\n        this.emit('userMediaRequest', constraints);\n\n        var emitThenCall = function (eventName, callback) {\n          var callbackArgs = Array.prototype.slice.call(arguments, 2);\n          // Emit with all of the arguments from the real callback.\n          var newArgs = [eventName].concat(callbackArgs);\n\n          this.emit.apply(this, newArgs);\n\n          callback.apply(null, callbackArgs);\n        }.bind(this);\n\n        SIP.WebRTC.getUserMedia(\n          constraints,\n          emitThenCall.bind(this, 'userMedia', saveSuccess),\n          emitThenCall.bind(this, 'userMediaFailed', onFailure)\n        );\n      }.bind(this), 0);\n    }\n  }},\n\n  'release': {value: function release (stream) {\n    var streamId = MediaStreamManager.streamId(stream);\n    if (this.acquisitions[streamId] === false) {\n      stream.stop();\n    }\n    delete this.acquisitions[streamId];\n  }},\n});\n\n// Return since it will be assigned to a variable.\nreturn MediaStreamManager;\n};\n\n\n/***/ },\n/* 29 */\n/***/ function(module, exports) {\n\n/**\n * @fileoverview WebRTC\n */\n\nmodule.exports = function (Utils, window, MediaHandler, MediaStreamManager) {\nvar WebRTC;\n\nWebRTC = {};\n\nWebRTC.MediaHandler = MediaHandler;\nWebRTC.MediaStreamManager = MediaStreamManager;\n\nvar _isSupported;\n\nWebRTC.isSupported = function () {\n  if (_isSupported !== undefined) {\n    return _isSupported;\n  }\n\n  WebRTC.MediaStream = Utils.getPrefixedProperty(window, 'MediaStream');\n  WebRTC.getUserMedia = Utils.getPrefixedProperty(window.navigator, 'getUserMedia');\n  WebRTC.RTCPeerConnection = Utils.getPrefixedProperty(window, 'RTCPeerConnection');\n  WebRTC.RTCSessionDescription = Utils.getPrefixedProperty(window, 'RTCSessionDescription');\n\n  if (WebRTC.getUserMedia && WebRTC.RTCPeerConnection && WebRTC.RTCSessionDescription) {\n    WebRTC.getUserMedia = WebRTC.getUserMedia.bind(window.navigator);\n    _isSupported = true;\n  }\n  else {\n    _isSupported = false;\n  }\n  return _isSupported;\n};\n\nreturn WebRTC;\n};\n\n\n/***/ },\n/* 30 */\n/***/ function(module, exports, __webpack_require__) {\n\n/* WEBPACK VAR INJECTION */(function(global) {/**\n * @augments SIP\n * @class Class creating a SIP User Agent.\n * @param {function returning SIP.MediaHandler} [configuration.mediaHandlerFactory]\n *        A function will be invoked by each of the UA's Sessions to build the MediaHandler for that Session.\n *        If no (or a falsy) value is provided, each Session will use a default (WebRTC) MediaHandler.\n *\n * @param {Object} [configuration.media] gets passed to SIP.MediaHandler.getDescription as mediaHint\n */\nmodule.exports = function (SIP) {\nvar UA,\n  C = {\n    // UA status codes\n    STATUS_INIT :                0,\n    STATUS_READY:                1,\n    STATUS_USER_CLOSED:          2,\n    STATUS_NOT_READY:            3,\n\n    // UA error codes\n    CONFIGURATION_ERROR:  1,\n    NETWORK_ERROR:        2,\n\n    /* UA events and corresponding SIP Methods.\n     * Dynamically added to 'Allow' header field if the\n     * corresponding event handler is set.\n     */\n    EVENT_METHODS: {\n      'invite': 'INVITE',\n      'message': 'MESSAGE'\n    },\n\n    ALLOWED_METHODS: [\n      'ACK',\n      'CANCEL',\n      'BYE',\n      'OPTIONS',\n      'INFO',\n      'NOTIFY'\n    ],\n\n    ACCEPTED_BODY_TYPES: [\n      'application/sdp',\n      'application/dtmf-relay'\n    ],\n\n    MAX_FORWARDS: 70,\n    TAG_LENGTH: 10\n  };\n\nUA = function(configuration) {\n  var self = this,\n  events = [\n    'connecting',\n    'connected',\n    'disconnected',\n    'newTransaction',\n    'transactionDestroyed',\n    'registered',\n    'unregistered',\n    'registrationFailed',\n    'invite',\n    'newSession',\n    'message'\n  ], i, len;\n\n  // Helper function for forwarding events\n  function selfEmit(type) {\n    //registrationFailed handler is invoked with two arguments. Allow event handlers to be invoked with a variable no. of arguments\n    return self.emit.bind(self, type);\n  }\n\n  for (i = 0, len = C.ALLOWED_METHODS.length; i < len; i++) {\n    events.push(C.ALLOWED_METHODS[i].toLowerCase());\n  }\n\n  // Set Accepted Body Types\n  C.ACCEPTED_BODY_TYPES = C.ACCEPTED_BODY_TYPES.toString();\n\n  this.log = new SIP.LoggerFactory();\n  this.logger = this.getLogger('sip.ua');\n\n  this.cache = {\n    credentials: {}\n  };\n\n  this.configuration = {};\n  this.dialogs = {};\n\n  //User actions outside any session/dialog (MESSAGE)\n  this.applicants = {};\n\n  this.data = {};\n  this.sessions = {};\n  this.subscriptions = {};\n  this.transport = null;\n  this.contact = null;\n  this.status = C.STATUS_INIT;\n  this.error = null;\n  this.transactions = {\n    nist: {},\n    nict: {},\n    ist: {},\n    ict: {}\n  };\n\n  this.transportRecoverAttempts = 0;\n  this.transportRecoveryTimer = null;\n\n  Object.defineProperties(this, {\n    transactionsCount: {\n      get: function() {\n        var type,\n          transactions = ['nist','nict','ist','ict'],\n          count = 0;\n\n        for (type in transactions) {\n          count += Object.keys(this.transactions[transactions[type]]).length;\n        }\n\n        return count;\n      }\n    },\n\n    nictTransactionsCount: {\n      get: function() {\n        return Object.keys(this.transactions['nict']).length;\n      }\n    },\n\n    nistTransactionsCount: {\n      get: function() {\n        return Object.keys(this.transactions['nist']).length;\n      }\n    },\n\n    ictTransactionsCount: {\n      get: function() {\n        return Object.keys(this.transactions['ict']).length;\n      }\n    },\n\n    istTransactionsCount: {\n      get: function() {\n        return Object.keys(this.transactions['ist']).length;\n      }\n    }\n  });\n\n  /**\n   * Load configuration\n   *\n   * @throws {SIP.Exceptions.ConfigurationError}\n   * @throws {TypeError}\n   */\n\n  if(configuration === undefined) {\n    configuration = {};\n  } else if (typeof configuration === 'string' || configuration instanceof String) {\n    configuration = {\n      uri: configuration\n    };\n  }\n\n  // Apply log configuration if present\n  if (configuration.log) {\n    if (configuration.log.hasOwnProperty('builtinEnabled')) {\n      this.log.builtinEnabled = configuration.log.builtinEnabled;\n    }\n\n    if (configuration.log.hasOwnProperty('level')) {\n      this.log.level = configuration.log.level;\n    }\n\n    if (configuration.log.hasOwnProperty('connector')) {\n      this.log.connector = configuration.log.connector;\n    }\n  }\n\n  try {\n    this.loadConfig(configuration);\n    this.initEvents(events);\n  } catch(e) {\n    this.status = C.STATUS_NOT_READY;\n    this.error = C.CONFIGURATION_ERROR;\n    throw e;\n  }\n\n  // Initialize registerContext\n  this.registerContext = new SIP.RegisterContext(this);\n  this.registerContext.on('failed', selfEmit('registrationFailed'));\n  this.registerContext.on('registered', selfEmit('registered'));\n  this.registerContext.on('unregistered', selfEmit('unregistered'));\n\n  if(this.configuration.autostart) {\n    this.start();\n  }\n\n  if (typeof global.addEventListener === 'function') {\n    global.addEventListener('unload', this.stop.bind(this));\n  }\n};\nUA.prototype = new SIP.EventEmitter();\n\n//=================\n//  High Level API\n//=================\n\nUA.prototype.register = function(options) {\n  this.configuration.register = true;\n  this.registerContext.register(options);\n\n  return this;\n};\n\n/**\n * Unregister.\n *\n * @param {Boolean} [all] unregister all user bindings.\n *\n */\nUA.prototype.unregister = function(options) {\n  this.configuration.register = false;\n  this.registerContext.unregister(options);\n\n  return this;\n};\n\nUA.prototype.isRegistered = function() {\n  return this.registerContext.registered;\n};\n\n/**\n * Connection state.\n * @param {Boolean}\n */\nUA.prototype.isConnected = function() {\n  return this.transport ? this.transport.connected : false;\n};\n\n/**\n * Make an outgoing call.\n *\n * @param {String} target\n * @param {Object} views\n * @param {Object} [options.media] gets passed to SIP.MediaHandler.getDescription as mediaHint\n *\n * @throws {TypeError}\n *\n */\nUA.prototype.invite = function(target, options) {\n  options = options || {};\n  options = SIP.Utils.desugarSessionOptions(options);\n  SIP.Utils.optionsOverride(options, 'media', 'mediaConstraints', true, this.logger);\n\n  var context = new SIP.InviteClientContext(this, target, options);\n\n  if (this.isConnected()) {\n    context.invite({media: options.media});\n  } else {\n    this.once('connected', function() {\n      context.invite({media: options.media});\n    });\n  }\n  return context;\n};\n\nUA.prototype.subscribe = function(target, event, options) {\n  var sub = new SIP.Subscription(this, target, event, options);\n\n  if (this.isConnected()) {\n    sub.subscribe();\n  } else {\n    this.once('connected', function() {\n      sub.subscribe();\n    });\n  }\n  return sub;\n};\n\n/**\n * Send a message.\n *\n * @param {String} target\n * @param {String} body\n * @param {Object} [options]\n *\n * @throws {TypeError}\n *\n */\nUA.prototype.message = function(target, body, options) {\n  if (body === undefined) {\n    throw new TypeError('Not enough arguments');\n  }\n\n  options = options || {};\n  options.contentType = options.contentType || 'text/plain';\n  options.body = body;\n\n  var mes = new SIP.ClientContext(this, SIP.C.MESSAGE, target, options);\n\n  if (this.isConnected()) {\n    mes.send();\n  } else {\n    this.once('connected', function() {\n      mes.send();\n    });\n  }\n\n  return mes;\n};\n\nUA.prototype.request = function (method, target, options) {\n  var req = new SIP.ClientContext(this, method, target, options);\n\n  if (this.isConnected()) {\n    req.send();\n  } else {\n    this.once('connected', function() {\n      req.send();\n    });\n  }\n\n  return req;\n};\n\n/**\n * Gracefully close.\n *\n */\nUA.prototype.stop = function() {\n  var session, subscription, applicant,\n    ua = this;\n\n  function transactionsListener() {\n    if (ua.nistTransactionsCount === 0 && ua.nictTransactionsCount === 0) {\n        ua.off('transactionDestroyed', transactionsListener);\n        ua.transport.disconnect();\n    }\n  }\n\n  this.logger.log('user requested closure...');\n\n  if(this.status === C.STATUS_USER_CLOSED) {\n    this.logger.warn('UA already closed');\n    return this;\n  }\n\n  // Clear transportRecoveryTimer\n  SIP.Timers.clearTimeout(this.transportRecoveryTimer);\n\n  // Close registerContext\n  this.logger.log('closing registerContext');\n  this.registerContext.close();\n\n  // Run  _terminate_ on every Session\n  for(session in this.sessions) {\n    this.logger.log('closing session ' + session);\n    this.sessions[session].terminate();\n  }\n\n  //Run _close_ on every Subscription\n  for(subscription in this.subscriptions) {\n    this.logger.log('unsubscribing from subscription ' + subscription);\n    this.subscriptions[subscription].close();\n  }\n\n  // Run  _close_ on every applicant\n  for(applicant in this.applicants) {\n    this.applicants[applicant].close();\n  }\n\n  this.status = C.STATUS_USER_CLOSED;\n\n  /*\n   * If the remaining transactions are all INVITE transactions, there is no need to\n   * wait anymore because every session has already been closed by this method.\n   * - locally originated sessions where terminated (CANCEL or BYE)\n   * - remotely originated sessions where rejected (4XX) or terminated (BYE)\n   * Remaining INVITE transactions belong tho sessions that where answered. This are in\n   * 'accepted' state due to timers 'L' and 'M' defined in [RFC 6026]\n   */\n  if (this.nistTransactionsCount === 0 && this.nictTransactionsCount === 0) {\n    this.transport.disconnect();\n  } else {\n    this.on('transactionDestroyed', transactionsListener);\n  }\n\n  return this;\n};\n\n/**\n * Connect to the WS server if status = STATUS_INIT.\n * Resume UA after being closed.\n *\n */\nUA.prototype.start = function() {\n  var server;\n\n  this.logger.log('user requested startup...');\n  if (this.status === C.STATUS_INIT) {\n    server = this.getNextWsServer();\n    new SIP.Transport(this, server);\n  } else if(this.status === C.STATUS_USER_CLOSED) {\n    this.logger.log('resuming');\n    this.status = C.STATUS_READY;\n    this.transport.connect();\n  } else if (this.status === C.STATUS_READY) {\n    this.logger.log('UA is in READY status, not resuming');\n  } else {\n    this.logger.error('Connection is down. Auto-Recovery system is trying to connect');\n  }\n\n  return this;\n};\n\n/**\n * Normalize a string into a valid SIP request URI\n *\n * @param {String} target\n *\n * @returns {SIP.URI|undefined}\n */\nUA.prototype.normalizeTarget = function(target) {\n  return SIP.Utils.normalizeTarget(target, this.configuration.hostportParams);\n};\n\n\n//===============================\n//  Private (For internal use)\n//===============================\n\nUA.prototype.saveCredentials = function(credentials) {\n  this.cache.credentials[credentials.realm] = this.cache.credentials[credentials.realm] || {};\n  this.cache.credentials[credentials.realm][credentials.uri] = credentials;\n\n  return this;\n};\n\nUA.prototype.getCredentials = function(request) {\n  var realm, credentials;\n\n  realm = request.ruri.host;\n\n  if (this.cache.credentials[realm] && this.cache.credentials[realm][request.ruri]) {\n    credentials = this.cache.credentials[realm][request.ruri];\n    credentials.method = request.method;\n  }\n\n  return credentials;\n};\n\nUA.prototype.getLogger = function(category, label) {\n  return this.log.getLogger(category, label);\n};\n\n\n//==============================\n// Event Handlers\n//==============================\n\n/**\n * Transport Close event\n * @private\n * @event\n * @param {SIP.Transport} transport.\n */\nUA.prototype.onTransportClosed = function(transport) {\n  // Run _onTransportError_ callback on every client transaction using _transport_\n  var type, idx, length,\n    client_transactions = ['nict', 'ict', 'nist', 'ist'];\n\n  transport.server.status = SIP.Transport.C.STATUS_DISCONNECTED;\n  this.logger.log('connection state set to '+ SIP.Transport.C.STATUS_DISCONNECTED);\n\n  length = client_transactions.length;\n  for (type = 0; type < length; type++) {\n    for(idx in this.transactions[client_transactions[type]]) {\n      this.transactions[client_transactions[type]][idx].onTransportError();\n    }\n  }\n\n  // Close sessions if GRUU is not being used\n  if (!this.contact.pub_gruu) {\n    this.closeSessionsOnTransportError();\n  }\n\n};\n\n/**\n * Unrecoverable transport event.\n * Connection reattempt logic has been done and didn't success.\n * @private\n * @event\n * @param {SIP.Transport} transport.\n */\nUA.prototype.onTransportError = function(transport) {\n  var server;\n\n  this.logger.log('transport ' + transport.server.ws_uri + ' failed | connection state set to '+ SIP.Transport.C.STATUS_ERROR);\n\n  // Close sessions.\n  //Mark this transport as 'down'\n  transport.server.status = SIP.Transport.C.STATUS_ERROR;\n\n  this.emit('disconnected', {\n    transport: transport\n  });\n\n  // try the next transport if the UA isn't closed\n  if(this.status === C.STATUS_USER_CLOSED) {\n    return;\n  }\n\n  server = this.getNextWsServer();\n\n  if(server) {\n    new SIP.Transport(this, server);\n  }else {\n    this.closeSessionsOnTransportError();\n    if (!this.error || this.error !== C.NETWORK_ERROR) {\n      this.status = C.STATUS_NOT_READY;\n      this.error = C.NETWORK_ERROR;\n    }\n    // Transport Recovery process\n    this.recoverTransport();\n  }\n};\n\n/**\n * Transport connection event.\n * @private\n * @event\n * @param {SIP.Transport} transport.\n */\nUA.prototype.onTransportConnected = function(transport) {\n  this.transport = transport;\n\n  // Reset transport recovery counter\n  this.transportRecoverAttempts = 0;\n\n  transport.server.status = SIP.Transport.C.STATUS_READY;\n  this.logger.log('connection state set to '+ SIP.Transport.C.STATUS_READY);\n\n  if(this.status === C.STATUS_USER_CLOSED) {\n    return;\n  }\n\n  this.status = C.STATUS_READY;\n  this.error = null;\n\n  if(this.configuration.register) {\n    this.registerContext.onTransportConnected();\n  }\n\n  this.emit('connected', {\n    transport: transport\n  });\n};\n\n\n/**\n * Transport connecting event\n * @private\n * @param {SIP.Transport} transport.\n * #param {Integer} attempts.\n */\n  UA.prototype.onTransportConnecting = function(transport, attempts) {\n    this.emit('connecting', {\n      transport: transport,\n      attempts: attempts\n    });\n  };\n\n\n/**\n * new Transaction\n * @private\n * @param {SIP.Transaction} transaction.\n */\nUA.prototype.newTransaction = function(transaction) {\n  this.transactions[transaction.type][transaction.id] = transaction;\n  this.emit('newTransaction', {transaction: transaction});\n};\n\n\n/**\n * destroy Transaction\n * @private\n * @param {SIP.Transaction} transaction.\n */\nUA.prototype.destroyTransaction = function(transaction) {\n  delete this.transactions[transaction.type][transaction.id];\n  this.emit('transactionDestroyed', {\n    transaction: transaction\n  });\n};\n\n\n//=========================\n// receiveRequest\n//=========================\n\n/**\n * Request reception\n * @private\n * @param {SIP.IncomingRequest} request.\n */\nUA.prototype.receiveRequest = function(request) {\n  var dialog, session, message,\n    method = request.method,\n    transaction,\n    methodLower = request.method.toLowerCase(),\n    self = this;\n\n  function ruriMatches (uri) {\n    return uri && uri.user === request.ruri.user;\n  }\n\n  // Check that request URI points to us\n  if(!(ruriMatches(this.configuration.uri) ||\n       ruriMatches(this.contact.uri) ||\n       ruriMatches(this.contact.pub_gruu) ||\n       ruriMatches(this.contact.temp_gruu))) {\n    this.logger.warn('Request-URI does not point to us');\n    if (request.method !== SIP.C.ACK) {\n      request.reply_sl(404);\n    }\n    return;\n  }\n\n  // Check request URI scheme\n  if(request.ruri.scheme === SIP.C.SIPS) {\n    request.reply_sl(416);\n    return;\n  }\n\n  // Check transaction\n  if(SIP.Transactions.checkTransaction(this, request)) {\n    return;\n  }\n\n  /* RFC3261 12.2.2\n   * Requests that do not change in any way the state of a dialog may be\n   * received within a dialog (for example, an OPTIONS request).\n   * They are processed as if they had been received outside the dialog.\n   */\n  if(method === SIP.C.OPTIONS) {\n    new SIP.Transactions.NonInviteServerTransaction(request, this);\n    request.reply(200, null, [\n      'Allow: '+ SIP.Utils.getAllowedMethods(this),\n      'Accept: '+ C.ACCEPTED_BODY_TYPES\n    ]);\n  } else if (method === SIP.C.MESSAGE) {\n    if (!this.checkListener(methodLower)) {\n      // UA is not listening for this.  Reject immediately.\n      new SIP.Transactions.NonInviteServerTransaction(request, this);\n      request.reply(405, null, ['Allow: '+ SIP.Utils.getAllowedMethods(this)]);\n      return;\n    }\n    message = new SIP.ServerContext(this, request);\n    message.body = request.body;\n    message.content_type = request.getHeader('Content-Type') || 'text/plain';\n\n    request.reply(200, null);\n    this.emit('message', message);\n  } else if (method !== SIP.C.INVITE &&\n             method !== SIP.C.ACK) {\n    // Let those methods pass through to normal processing for now.\n    transaction = new SIP.ServerContext(this, request);\n  }\n\n  // Initial Request\n  if(!request.to_tag) {\n    switch(method) {\n      case SIP.C.INVITE:\n        var isMediaSupported = this.configuration.mediaHandlerFactory.isSupported;\n        if(!isMediaSupported || isMediaSupported()) {\n          session = new SIP.InviteServerContext(this, request)\n            .on('invite', function() {\n              self.emit('invite', this);\n            });\n        } else {\n          this.logger.warn('INVITE received but WebRTC is not supported');\n          request.reply(488);\n        }\n        break;\n      case SIP.C.BYE:\n        // Out of dialog BYE received\n        request.reply(481);\n        break;\n      case SIP.C.CANCEL:\n        session = this.findSession(request);\n        if(session) {\n          session.receiveRequest(request);\n        } else {\n          this.logger.warn('received CANCEL request for a non existent session');\n        }\n        break;\n      case SIP.C.ACK:\n        /* Absorb it.\n         * ACK request without a corresponding Invite Transaction\n         * and without To tag.\n         */\n        break;\n      default:\n        request.reply(405);\n        break;\n    }\n  }\n  // In-dialog request\n  else {\n    dialog = this.findDialog(request);\n\n    if(dialog) {\n      if (method === SIP.C.INVITE) {\n        new SIP.Transactions.InviteServerTransaction(request, this);\n      }\n      dialog.receiveRequest(request);\n    } else if (method === SIP.C.NOTIFY) {\n      session = this.findSession(request);\n      if(session) {\n        session.receiveRequest(request);\n      } else {\n        this.logger.warn('received NOTIFY request for a non existent session');\n        request.reply(481, 'Subscription does not exist');\n      }\n    }\n    /* RFC3261 12.2.2\n     * Request with to tag, but no matching dialog found.\n     * Exception: ACK for an Invite request for which a dialog has not\n     * been created.\n     */\n    else {\n      if(method !== SIP.C.ACK) {\n        request.reply(481);\n      }\n    }\n  }\n};\n\n//=================\n// Utils\n//=================\n\n/**\n * Get the session to which the request belongs to, if any.\n * @private\n * @param {SIP.IncomingRequest} request.\n * @returns {SIP.OutgoingSession|SIP.IncomingSession|null}\n */\nUA.prototype.findSession = function(request) {\n  return this.sessions[request.call_id + request.from_tag] ||\n          this.sessions[request.call_id + request.to_tag] ||\n          null;\n};\n\n/**\n * Get the dialog to which the request belongs to, if any.\n * @private\n * @param {SIP.IncomingRequest}\n * @returns {SIP.Dialog|null}\n */\nUA.prototype.findDialog = function(request) {\n  return this.dialogs[request.call_id + request.from_tag + request.to_tag] ||\n          this.dialogs[request.call_id + request.to_tag + request.from_tag] ||\n          null;\n};\n\n/**\n * Retrieve the next server to which connect.\n * @private\n * @returns {Object} ws_server\n */\nUA.prototype.getNextWsServer = function() {\n  // Order servers by weight\n  var idx, length, ws_server,\n    candidates = [];\n\n  length = this.configuration.wsServers.length;\n  for (idx = 0; idx < length; idx++) {\n    ws_server = this.configuration.wsServers[idx];\n\n    if (ws_server.status === SIP.Transport.C.STATUS_ERROR) {\n      continue;\n    } else if (candidates.length === 0) {\n      candidates.push(ws_server);\n    } else if (ws_server.weight > candidates[0].weight) {\n      candidates = [ws_server];\n    } else if (ws_server.weight === candidates[0].weight) {\n      candidates.push(ws_server);\n    }\n  }\n\n  idx = Math.floor(Math.random() * candidates.length);\n\n  return candidates[idx];\n};\n\n/**\n * Close all sessions on transport error.\n * @private\n */\nUA.prototype.closeSessionsOnTransportError = function() {\n  var idx;\n\n  // Run _transportError_ for every Session\n  for(idx in this.sessions) {\n    this.sessions[idx].onTransportError();\n  }\n  // Call registerContext _onTransportClosed_\n  this.registerContext.onTransportClosed();\n};\n\nUA.prototype.recoverTransport = function(ua) {\n  var idx, length, k, nextRetry, count, server;\n\n  ua = ua || this;\n  count = ua.transportRecoverAttempts;\n\n  length = ua.configuration.wsServers.length;\n  for (idx = 0; idx < length; idx++) {\n    ua.configuration.wsServers[idx].status = 0;\n  }\n\n  server = ua.getNextWsServer();\n\n  k = Math.floor((Math.random() * Math.pow(2,count)) +1);\n  nextRetry = k * ua.configuration.connectionRecoveryMinInterval;\n\n  if (nextRetry > ua.configuration.connectionRecoveryMaxInterval) {\n    this.logger.log('time for next connection attempt exceeds connectionRecoveryMaxInterval, resetting counter');\n    nextRetry = ua.configuration.connectionRecoveryMinInterval;\n    count = 0;\n  }\n\n  this.logger.log('next connection attempt in '+ nextRetry +' seconds');\n\n  this.transportRecoveryTimer = SIP.Timers.setTimeout(\n    function(){\n      ua.transportRecoverAttempts = count + 1;\n      new SIP.Transport(ua, server);\n    }, nextRetry * 1000);\n};\n\n/**\n * Configuration load.\n * @private\n * returns {Boolean}\n */\nUA.prototype.loadConfig = function(configuration) {\n  // Settings and default values\n  var parameter, value, checked_value, hostportParams, registrarServer,\n    settings = {\n      /* Host address\n      * Value to be set in Via sent_by and host part of Contact FQDN\n      */\n      viaHost: SIP.Utils.createRandomToken(12) + '.invalid',\n\n      uri: new SIP.URI('sip', 'anonymous.' + SIP.Utils.createRandomToken(6), 'anonymous.invalid', null, null),\n      wsServers: [{\n        scheme: 'WSS',\n        sip_uri: '<sip:edge.sip.onsip.com;transport=ws;lr>',\n        status: 0,\n        weight: 0,\n        ws_uri: 'wss://edge.sip.onsip.com'\n      }],\n\n      // Password\n      password: null,\n\n      // Registration parameters\n      registerExpires: 600,\n      register: true,\n      registrarServer: null,\n\n      // Transport related parameters\n      wsServerMaxReconnection: 3,\n      wsServerReconnectionTimeout: 4,\n\n      connectionRecoveryMinInterval: 2,\n      connectionRecoveryMaxInterval: 30,\n\n      usePreloadedRoute: false,\n\n      //string to be inserted into User-Agent request header\n      userAgentString: SIP.C.USER_AGENT,\n\n      // Session parameters\n      noAnswerTimeout: 60,\n      stunServers: ['stun:stun.l.google.com:19302'],\n      turnServers: [],\n\n      // Logging parameters\n      traceSip: false,\n\n      // Hacks\n      hackViaTcp: false,\n      hackIpInContact: false,\n      hackWssInTransport: false,\n\n      //autostarting\n      autostart: true,\n\n      //Reliable Provisional Responses\n      rel100: SIP.C.supported.UNSUPPORTED,\n\n      mediaHandlerFactory: SIP.WebRTC.MediaHandler.defaultFactory\n    };\n\n  // Pre-Configuration\n  function aliasUnderscored (parameter, logger) {\n    var underscored = parameter.replace(/([a-z][A-Z])/g, function (m) {\n      return m[0] + '_' + m[1].toLowerCase();\n    });\n\n    if (parameter === underscored) {\n      return;\n    }\n\n    var hasParameter = configuration.hasOwnProperty(parameter);\n    if (configuration.hasOwnProperty(underscored)) {\n      logger.warn(underscored + ' is deprecated, please use ' + parameter);\n      if (hasParameter) {\n        logger.warn(parameter + ' overriding ' + underscored);\n      }\n    }\n\n    configuration[parameter] = hasParameter ? configuration[parameter] : configuration[underscored];\n  }\n\n  // Check Mandatory parameters\n  for(parameter in UA.configuration_check.mandatory) {\n    aliasUnderscored(parameter, this.logger);\n    if(!configuration.hasOwnProperty(parameter)) {\n      throw new SIP.Exceptions.ConfigurationError(parameter);\n    } else {\n      value = configuration[parameter];\n      checked_value = UA.configuration_check.mandatory[parameter](value);\n      if (checked_value !== undefined) {\n        settings[parameter] = checked_value;\n      } else {\n        throw new SIP.Exceptions.ConfigurationError(parameter, value);\n      }\n    }\n  }\n\n  SIP.Utils.optionsOverride(configuration, 'rel100', 'reliable', true, this.logger, SIP.C.supported.UNSUPPORTED);\n\n  var emptyArraysAllowed = ['stunServers', 'turnServers'];\n\n  // Check Optional parameters\n  for(parameter in UA.configuration_check.optional) {\n    aliasUnderscored(parameter, this.logger);\n    if(configuration.hasOwnProperty(parameter)) {\n      value = configuration[parameter];\n\n      // If the parameter value is an empty array, but shouldn't be, apply its default value.\n      if (value instanceof Array && value.length === 0 && emptyArraysAllowed.indexOf(parameter) < 0) { continue; }\n\n      // If the parameter value is null, empty string, or undefined then apply its default value.\n      if(value === null || value === \"\" || value === undefined) { continue; }\n      // If it's a number with NaN value then also apply its default value.\n      // NOTE: JS does not allow \"value === NaN\", the following does the work:\n      else if(typeof(value) === 'number' && isNaN(value)) { continue; }\n\n      checked_value = UA.configuration_check.optional[parameter](value);\n      if (checked_value !== undefined) {\n        settings[parameter] = checked_value;\n      } else {\n        throw new SIP.Exceptions.ConfigurationError(parameter, value);\n      }\n    }\n  }\n\n  // Sanity Checks\n\n  // Connection recovery intervals\n  if(settings.connectionRecoveryMaxInterval < settings.connectionRecoveryMinInterval) {\n    throw new SIP.Exceptions.ConfigurationError('connectionRecoveryMaxInterval', settings.connectionRecoveryMaxInterval);\n  }\n\n  // Post Configuration Process\n\n  // Allow passing 0 number as displayName.\n  if (settings.displayName === 0) {\n    settings.displayName = '0';\n  }\n\n  // Instance-id for GRUU\n  if (!settings.instanceId) {\n    settings.instanceId = SIP.Utils.newUUID();\n  }\n\n  // sipjsId instance parameter. Static random tag of length 5\n  settings.sipjsId = SIP.Utils.createRandomToken(5);\n\n  // String containing settings.uri without scheme and user.\n  hostportParams = settings.uri.clone();\n  hostportParams.user = null;\n  settings.hostportParams = hostportParams.toString().replace(/^sip:/i, '');\n\n  /* Check whether authorizationUser is explicitly defined.\n   * Take 'settings.uri.user' value if not.\n   */\n  if (!settings.authorizationUser) {\n    settings.authorizationUser = settings.uri.user;\n  }\n\n  /* If no 'registrarServer' is set use the 'uri' value without user portion. */\n  if (!settings.registrarServer) {\n    registrarServer = settings.uri.clone();\n    registrarServer.user = null;\n    settings.registrarServer = registrarServer;\n  }\n\n  // User noAnswerTimeout\n  settings.noAnswerTimeout = settings.noAnswerTimeout * 1000;\n\n  // Via Host\n  if (settings.hackIpInContact) {\n    settings.viaHost = SIP.Utils.getRandomTestNetIP();\n  }\n\n  this.contact = {\n    pub_gruu: null,\n    temp_gruu: null,\n    uri: new SIP.URI('sip', SIP.Utils.createRandomToken(8), settings.viaHost, null, {transport: ((settings.hackWssInTransport)?'wss':'ws')}),\n    toString: function(options){\n      options = options || {};\n\n      var\n        anonymous = options.anonymous || null,\n        outbound = options.outbound || null,\n        contact = '<';\n\n      if (anonymous) {\n        contact += (this.temp_gruu || ( true?'wss':'ws')).toString();\n      } else {\n        contact += (this.pub_gruu || this.uri).toString();\n      }\n\n      if (outbound) {\n        contact += ';ob';\n      }\n\n      contact += '>';\n\n      return contact;\n    }\n  };\n\n  // media overrides mediaConstraints\n  SIP.Utils.optionsOverride(settings, 'media', 'mediaConstraints', true, this.logger);\n\n  // Fill the value of the configuration_skeleton\n  for(parameter in settings) {\n    UA.configuration_skeleton[parameter].value = settings[parameter];\n  }\n\n  Object.defineProperties(this.configuration, UA.configuration_skeleton);\n\n  // Clean UA.configuration_skeleton\n  for(parameter in settings) {\n    UA.configuration_skeleton[parameter].value = '';\n  }\n\n  this.logger.log('configuration parameters after validation:');\n  for(parameter in settings) {\n    switch(parameter) {\n      case 'uri':\n      case 'registrarServer':\n      case 'mediaHandlerFactory':\n        this.logger.log('· ' + parameter + ': ' + settings[parameter]);\n        break;\n      case 'password':\n        this.logger.log('· ' + parameter + ': ' + 'NOT SHOWN');\n        break;\n      default:\n        this.logger.log('· ' + parameter + ': ' + JSON.stringify(settings[parameter]));\n    }\n  }\n\n  return;\n};\n\n/**\n * Configuration Object skeleton.\n * @private\n */\nUA.configuration_skeleton = (function() {\n  var idx,  parameter,\n    skeleton = {},\n    parameters = [\n      // Internal parameters\n      \"sipjsId\",\n      \"hostportParams\",\n\n      // Optional user configurable parameters\n      \"uri\",\n      \"wsServers\",\n      \"authorizationUser\",\n      \"connectionRecoveryMaxInterval\",\n      \"connectionRecoveryMinInterval\",\n      \"displayName\",\n      \"hackViaTcp\", // false.\n      \"hackIpInContact\", //false\n      \"hackWssInTransport\", //false\n      \"instanceId\",\n      \"noAnswerTimeout\", // 30 seconds.\n      \"password\",\n      \"registerExpires\", // 600 seconds.\n      \"registrarServer\",\n      \"reliable\",\n      \"rel100\",\n      \"userAgentString\", //SIP.C.USER_AGENT\n      \"autostart\",\n      \"stunServers\",\n      \"traceSip\",\n      \"turnServers\",\n      \"usePreloadedRoute\",\n      \"wsServerMaxReconnection\",\n      \"wsServerReconnectionTimeout\",\n      \"mediaHandlerFactory\",\n      \"media\",\n      \"mediaConstraints\",\n\n      // Post-configuration generated parameters\n      \"via_core_value\",\n      \"viaHost\"\n    ];\n\n  for(idx in parameters) {\n    parameter = parameters[idx];\n    skeleton[parameter] = {\n      value: '',\n      writable: false,\n      configurable: false\n    };\n  }\n\n  skeleton['register'] = {\n    value: '',\n    writable: true,\n    configurable: false\n  };\n\n  return skeleton;\n}());\n\n/**\n * Configuration checker.\n * @private\n * @return {Boolean}\n */\nUA.configuration_check = {\n  mandatory: {\n  },\n\n  optional: {\n\n    uri: function(uri) {\n      var parsed;\n\n      if (!(/^sip:/i).test(uri)) {\n        uri = SIP.C.SIP + ':' + uri;\n      }\n      parsed = SIP.URI.parse(uri);\n\n      if(!parsed) {\n        return;\n      } else if(!parsed.user) {\n        return;\n      } else {\n        return parsed;\n      }\n    },\n\n    //Note: this function used to call 'this.logger.error' but calling 'this' with anything here is invalid\n    wsServers: function(wsServers) {\n      var idx, length, url;\n\n      /* Allow defining wsServers parameter as:\n       *  String: \"host\"\n       *  Array of Strings: [\"host1\", \"host2\"]\n       *  Array of Objects: [{ws_uri:\"host1\", weight:1}, {ws_uri:\"host2\", weight:0}]\n       *  Array of Objects and Strings: [{ws_uri:\"host1\"}, \"host2\"]\n       */\n      if (typeof wsServers === 'string') {\n        wsServers = [{ws_uri: wsServers}];\n      } else if (wsServers instanceof Array) {\n        length = wsServers.length;\n        for (idx = 0; idx < length; idx++) {\n          if (typeof wsServers[idx] === 'string'){\n            wsServers[idx] = {ws_uri: wsServers[idx]};\n          }\n        }\n      } else {\n        return;\n      }\n\n      if (wsServers.length === 0) {\n        return false;\n      }\n\n      length = wsServers.length;\n      for (idx = 0; idx < length; idx++) {\n        if (!wsServers[idx].ws_uri) {\n          return;\n        }\n        if (wsServers[idx].weight && !Number(wsServers[idx].weight)) {\n          return;\n        }\n\n        url = SIP.Grammar.parse(wsServers[idx].ws_uri, 'absoluteURI');\n\n        if(url === -1) {\n          return;\n        } else if(url.scheme !== 'wss' && url.scheme !== 'ws') {\n          return;\n        } else {\n          wsServers[idx].sip_uri = '<sip:' + url.host + (url.port ? ':' + url.port : '') + ';transport=ws;lr>';\n\n          if (!wsServers[idx].weight) {\n            wsServers[idx].weight = 0;\n          }\n\n          wsServers[idx].status = 0;\n          wsServers[idx].scheme = url.scheme.toUpperCase();\n        }\n      }\n      return wsServers;\n    },\n\n    authorizationUser: function(authorizationUser) {\n      if(SIP.Grammar.parse('\"'+ authorizationUser +'\"', 'quoted_string') === -1) {\n        return;\n      } else {\n        return authorizationUser;\n      }\n    },\n\n    connectionRecoveryMaxInterval: function(connectionRecoveryMaxInterval) {\n      var value;\n      if(SIP.Utils.isDecimal(connectionRecoveryMaxInterval)) {\n        value = Number(connectionRecoveryMaxInterval);\n        if(value > 0) {\n          return value;\n        }\n      }\n    },\n\n    connectionRecoveryMinInterval: function(connectionRecoveryMinInterval) {\n      var value;\n      if(SIP.Utils.isDecimal(connectionRecoveryMinInterval)) {\n        value = Number(connectionRecoveryMinInterval);\n        if(value > 0) {\n          return value;\n        }\n      }\n    },\n\n    displayName: function(displayName) {\n      if(SIP.Grammar.parse('\"' + displayName + '\"', 'displayName') === -1) {\n        return;\n      } else {\n        return displayName;\n      }\n    },\n\n    hackViaTcp: function(hackViaTcp) {\n      if (typeof hackViaTcp === 'boolean') {\n        return hackViaTcp;\n      }\n    },\n\n    hackIpInContact: function(hackIpInContact) {\n      if (typeof hackIpInContact === 'boolean') {\n        return hackIpInContact;\n      }\n    },\n\n    hackWssInTransport: function(hackWssInTransport) {\n      if (typeof hackWssInTransport === 'boolean') {\n        return hackWssInTransport;\n      }\n    },\n\n    instanceId: function(instanceId) {\n      if(typeof instanceId !== 'string') {\n        return;\n      }\n\n      if ((/^uuid:/i.test(instanceId))) {\n        instanceId = instanceId.substr(5);\n      }\n\n      if(SIP.Grammar.parse(instanceId, 'uuid') === -1) {\n        return;\n      } else {\n        return instanceId;\n      }\n    },\n\n    noAnswerTimeout: function(noAnswerTimeout) {\n      var value;\n      if (SIP.Utils.isDecimal(noAnswerTimeout)) {\n        value = Number(noAnswerTimeout);\n        if (value > 0) {\n          return value;\n        }\n      }\n    },\n\n    password: function(password) {\n      return String(password);\n    },\n\n    rel100: function(rel100) {\n      if(rel100 === SIP.C.supported.REQUIRED) {\n        return SIP.C.supported.REQUIRED;\n      } else if (rel100 === SIP.C.supported.SUPPORTED) {\n        return SIP.C.supported.SUPPORTED;\n      } else  {\n        return SIP.C.supported.UNSUPPORTED;\n      }\n    },\n\n    register: function(register) {\n      if (typeof register === 'boolean') {\n        return register;\n      }\n    },\n\n    registerExpires: function(registerExpires) {\n      var value;\n      if (SIP.Utils.isDecimal(registerExpires)) {\n        value = Number(registerExpires);\n        if (value > 0) {\n          return value;\n        }\n      }\n    },\n\n    registrarServer: function(registrarServer) {\n      var parsed;\n\n      if(typeof registrarServer !== 'string') {\n        return;\n      }\n\n      if (!/^sip:/i.test(registrarServer)) {\n        registrarServer = SIP.C.SIP + ':' + registrarServer;\n      }\n      parsed = SIP.URI.parse(registrarServer);\n\n      if(!parsed) {\n        return;\n      } else if(parsed.user) {\n        return;\n      } else {\n        return parsed;\n      }\n    },\n\n    stunServers: function(stunServers) {\n      var idx, length, stun_server;\n\n      if (typeof stunServers === 'string') {\n        stunServers = [stunServers];\n      } else if (!(stunServers instanceof Array)) {\n        return;\n      }\n\n      length = stunServers.length;\n      for (idx = 0; idx < length; idx++) {\n        stun_server = stunServers[idx];\n        if (!(/^stuns?:/.test(stun_server))) {\n          stun_server = 'stun:' + stun_server;\n        }\n\n        if(SIP.Grammar.parse(stun_server, 'stun_URI') === -1) {\n          return;\n        } else {\n          stunServers[idx] = stun_server;\n        }\n      }\n      return stunServers;\n    },\n\n    traceSip: function(traceSip) {\n      if (typeof traceSip === 'boolean') {\n        return traceSip;\n      }\n    },\n\n    turnServers: function(turnServers) {\n      var idx, length, turn_server, url;\n\n      if (turnServers instanceof Array) {\n        // Do nothing\n      } else {\n        turnServers = [turnServers];\n      }\n\n      length = turnServers.length;\n      for (idx = 0; idx < length; idx++) {\n        turn_server = turnServers[idx];\n        //Backwards compatibility: Allow defining the turn_server url with the 'server' property.\n        if (turn_server.server) {\n          turn_server.urls = [turn_server.server];\n        }\n\n        if (!turn_server.urls || !turn_server.username || !turn_server.password) {\n          return;\n        }\n\n        if (!(turn_server.urls instanceof Array)) {\n          turn_server.urls = [turn_server.urls];\n        }\n\n        length = turn_server.urls.length;\n        for (idx = 0; idx < length; idx++) {\n          url = turn_server.urls[idx];\n\n          if (!(/^turns?:/.test(url))) {\n            url = 'turn:' + url;\n          }\n\n          if(SIP.Grammar.parse(url, 'turn_URI') === -1) {\n            return;\n          }\n        }\n      }\n      return turnServers;\n    },\n\n    userAgentString: function(userAgentString) {\n      if (typeof userAgentString === 'string') {\n        return userAgentString;\n      }\n    },\n\n    usePreloadedRoute: function(usePreloadedRoute) {\n      if (typeof usePreloadedRoute === 'boolean') {\n        return usePreloadedRoute;\n      }\n    },\n\n    wsServerMaxReconnection: function(wsServerMaxReconnection) {\n      var value;\n      if (SIP.Utils.isDecimal(wsServerMaxReconnection)) {\n        value = Number(wsServerMaxReconnection);\n        if (value > 0) {\n          return value;\n        }\n      }\n    },\n\n    wsServerReconnectionTimeout: function(wsServerReconnectionTimeout) {\n      var value;\n      if (SIP.Utils.isDecimal(wsServerReconnectionTimeout)) {\n        value = Number(wsServerReconnectionTimeout);\n        if (value > 0) {\n          return value;\n        }\n      }\n    },\n\n    autostart: function(autostart) {\n      if (typeof autostart === 'boolean') {\n        return autostart;\n      }\n    },\n\n    mediaHandlerFactory: function(mediaHandlerFactory) {\n      if (mediaHandlerFactory instanceof Function) {\n        return mediaHandlerFactory;\n      }\n    }\n  }\n};\n\nUA.C = C;\nSIP.UA = UA;\n};\n\n/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))\n\n/***/ },\n/* 31 */\n/***/ function(module, exports) {\n\n/**\n * @fileoverview Hacks - This file contains all of the things we\n * wish we didn't have to do, just for interop.  It is similar to\n * Utils, which provides actually useful and relevant functions for\n * a SIP library. Methods in this file are grouped by vendor, so\n * as to most easily track when particular hacks may not be necessary anymore.\n */\n\nmodule.exports = function (SIP) {\nvar Hacks = {\n  AllBrowsers: {\n    maskDtls: function (message) {\n      if (message.body) {\n        message.body = message.body.replace(/ UDP\\/TLS\\/RTP\\/SAVP/gmi, \" RTP/SAVP\");\n      }\n    },\n    unmaskDtls: function (sdp) {\n      /**\n       * Chrome does not handle DTLS correctly (Canaray does, but not production)\n       * keeping Chrome as SDES until DTLS is fixed (comment out 'is_opera' condition)\n       *\n       * UPDATE: May 21, 2014\n       * Chrome 35 now properly defaults to DTLS.  Only Opera remains using SDES\n       *\n       * UPDATE: 2014-09-24\n       * Opera now supports DTLS by default as well.\n       *\n       **/\n      return sdp.replace(/ RTP\\/SAVP/gmi, \" UDP/TLS/RTP/SAVP\");\n    }\n  },\n  Firefox: {\n    /* Condition to detect if hacks are applicable */\n    isFirefox: function () {\n      return window.mozRTCPeerConnection !== undefined;\n    },\n\n    cannotHandleExtraWhitespace: function (message) {\n      if (this.isFirefox() && message.body) {\n        message.body = message.body.replace(/ \\r\\n/g, \"\\r\\n\");\n      }\n    },\n\n    hasMissingCLineInSDP: function (sdp) {\n      /*\n       * This is a Firefox hack to insert valid sdp when getDescription is\n       * called with the constraint offerToReceiveVideo = false.\n       * We search for either a c-line at the top of the sdp above all\n       * m-lines. If that does not exist then we search for a c-line\n       * beneath each m-line. If it is missing a c-line, we insert\n       * a fake c-line with the ip address 0.0.0.0. This is then valid\n       * sdp and no media will be sent for that m-line.\n       *\n       * Valid SDP is:\n       * m=\n       * i=\n       * c=\n       */\n      var insertAt, mlines;\n      if (sdp.indexOf('c=') > sdp.indexOf('m=')) {\n\n        // Find all m= lines\n        mlines = sdp.match(/m=.*\\r\\n.*/g);\n        for (var i=0; i<mlines.length; i++) {\n\n          // If it has an i= line, check if the next line is the c= line\n          if (mlines[i].toString().search(/i=.*/) >= 0) {\n            insertAt = sdp.indexOf(mlines[i].toString())+mlines[i].toString().length;\n            if (sdp.substr(insertAt,2)!=='c=') {\n              sdp = sdp.substr(0,insertAt) + '\\r\\nc=IN IP4 0.0.0.0' + sdp.substr(insertAt);\n            }\n\n          // else add the C line if it's missing\n          } else if (mlines[i].toString().search(/c=.*/) < 0) {\n            insertAt = sdp.indexOf(mlines[i].toString().match(/.*/))+mlines[i].toString().match(/.*/).toString().length;\n            sdp = sdp.substr(0,insertAt) + '\\r\\nc=IN IP4 0.0.0.0' + sdp.substr(insertAt);\n          }\n        }\n      }\n      return sdp;\n    },\n\n    hasIncompatibleCLineWithSomeSIPEndpoints: function(sdp) {\n      /*\n       * Firefox appears to be following https://tools.ietf.org/html/rfc5245#section-9.1.1.1\n       * and using a c line IP address of 0.0.0.0. This is completely valid, however it is\n       * causing some endpoints (such as FreeSWITCH) to interpret the SDP as being on hold\n       * https://freeswitch.org/jira/browse/FS-6955. To get around this issue we pull the\n       * replace the c line with 1.1.1.1 which SIP clients do not interpret as hold.\n       * This makes the other endpoint believe that the call is not on hold and audio flows\n       * because ICE determines the media pathway (not the c line).\n       */\n      return sdp.replace(/(0\\.0\\.0\\.0)/gmi, SIP.Utils.getRandomTestNetIP());\n    }\n  },\n\n  Chrome: {\n    needsExplicitlyInactiveSDP: function (sdp) {\n      var sub, index;\n\n      if (Hacks.Firefox.isFirefox()) { // Fix this in Firefox before sending\n        index = sdp.indexOf('m=video 0');\n        if (index !== -1) {\n          sub = sdp.substr(index);\n          sub = sub.replace(/\\r\\nc=IN IP4.*\\r\\n$/,\n                            '\\r\\nc=IN IP4 0.0.0.0\\r\\na=inactive\\r\\n');\n          return sdp.substr(0, index) + sub;\n        }\n      }\n      return sdp;\n    },\n\n    getsConfusedAboutGUM: function (session) {\n      if (session.mediaHandler) {\n        session.mediaHandler.close();\n      }\n    }\n  }\n};\n\nreturn Hacks;\n};\n\n\n\n/***/ },\n/* 32 */\n/***/ function(module, exports) {\n\n/**\n * @fileoverview Incoming SIP Message Sanity Check\n */\n\n/**\n * SIP message sanity check.\n * @augments SIP\n * @function\n * @param {SIP.IncomingMessage} message\n * @param {SIP.UA} ua\n * @param {SIP.Transport} transport\n * @returns {Boolean}\n */\nmodule.exports = function (SIP) {\nvar sanityCheck,\n logger,\n message, ua, transport,\n requests = [],\n responses = [],\n all = [];\n\n/*\n * Sanity Check for incoming Messages\n *\n * Requests:\n *  - _rfc3261_8_2_2_1_ Receive a Request with a non supported URI scheme\n *  - _rfc3261_16_3_4_ Receive a Request already sent by us\n *   Does not look at via sent-by but at sipjsId, which is inserted as\n *   a prefix in all initial requests generated by the ua\n *  - _rfc3261_18_3_request_ Body Content-Length\n *  - _rfc3261_8_2_2_2_ Merged Requests\n *\n * Responses:\n *  - _rfc3261_8_1_3_3_ Multiple Via headers\n *  - _rfc3261_18_1_2_ sent-by mismatch\n *  - _rfc3261_18_3_response_ Body Content-Length\n *\n * All:\n *  - Minimum headers in a SIP message\n */\n\n// Sanity Check functions for requests\nfunction rfc3261_8_2_2_1() {\n  if(!message.ruri || message.ruri.scheme !== 'sip') {\n    reply(416);\n    return false;\n  }\n}\n\nfunction rfc3261_16_3_4() {\n  if(!message.to_tag) {\n    if(message.call_id.substr(0, 5) === ua.configuration.sipjsId) {\n      reply(482);\n      return false;\n    }\n  }\n}\n\nfunction rfc3261_18_3_request() {\n  var len = SIP.Utils.str_utf8_length(message.body),\n  contentLength = message.getHeader('content-length');\n\n  if(len < contentLength) {\n    reply(400);\n    return false;\n  }\n}\n\nfunction rfc3261_8_2_2_2() {\n  var tr, idx,\n    fromTag = message.from_tag,\n    call_id = message.call_id,\n    cseq = message.cseq;\n\n  if(!message.to_tag) {\n    if(message.method === SIP.C.INVITE) {\n      tr = ua.transactions.ist[message.via_branch];\n      if(tr) {\n        return;\n      } else {\n        for(idx in ua.transactions.ist) {\n          tr = ua.transactions.ist[idx];\n          if(tr.request.from_tag === fromTag && tr.request.call_id === call_id && tr.request.cseq === cseq) {\n            reply(482);\n            return false;\n          }\n        }\n      }\n    } else {\n      tr = ua.transactions.nist[message.via_branch];\n      if(tr) {\n        return;\n      } else {\n        for(idx in ua.transactions.nist) {\n          tr = ua.transactions.nist[idx];\n          if(tr.request.from_tag === fromTag && tr.request.call_id === call_id && tr.request.cseq === cseq) {\n            reply(482);\n            return false;\n          }\n        }\n      }\n    }\n  }\n}\n\n// Sanity Check functions for responses\nfunction rfc3261_8_1_3_3() {\n  if(message.getHeaders('via').length > 1) {\n    logger.warn('More than one Via header field present in the response. Dropping the response');\n    return false;\n  }\n}\n\nfunction rfc3261_18_1_2() {\n  var viaHost = ua.configuration.viaHost;\n  if(message.via.host !== viaHost || message.via.port !== undefined) {\n    logger.warn('Via sent-by in the response does not match UA Via host value. Dropping the response');\n    return false;\n  }\n}\n\nfunction rfc3261_18_3_response() {\n  var\n    len = SIP.Utils.str_utf8_length(message.body),\n    contentLength = message.getHeader('content-length');\n\n    if(len < contentLength) {\n      logger.warn('Message body length is lower than the value in Content-Length header field. Dropping the response');\n      return false;\n    }\n}\n\n// Sanity Check functions for requests and responses\nfunction minimumHeaders() {\n  var\n    mandatoryHeaders = ['from', 'to', 'call_id', 'cseq', 'via'],\n    idx = mandatoryHeaders.length;\n\n  while(idx--) {\n    if(!message.hasHeader(mandatoryHeaders[idx])) {\n      logger.warn('Missing mandatory header field : '+ mandatoryHeaders[idx] +'. Dropping the response');\n      return false;\n    }\n  }\n}\n\n// Reply\nfunction reply(status_code) {\n  var to,\n    response = \"SIP/2.0 \" + status_code + \" \" + SIP.C.REASON_PHRASE[status_code] + \"\\r\\n\",\n    vias = message.getHeaders('via'),\n    length = vias.length,\n    idx = 0;\n\n  for(idx; idx < length; idx++) {\n    response += \"Via: \" + vias[idx] + \"\\r\\n\";\n  }\n\n  to = message.getHeader('To');\n\n  if(!message.to_tag) {\n    to += ';tag=' + SIP.Utils.newTag();\n  }\n\n  response += \"To: \" + to + \"\\r\\n\";\n  response += \"From: \" + message.getHeader('From') + \"\\r\\n\";\n  response += \"Call-ID: \" + message.call_id + \"\\r\\n\";\n  response += \"CSeq: \" + message.cseq + \" \" + message.method + \"\\r\\n\";\n  response += \"\\r\\n\";\n\n  transport.send(response);\n}\n\nrequests.push(rfc3261_8_2_2_1);\nrequests.push(rfc3261_16_3_4);\nrequests.push(rfc3261_18_3_request);\nrequests.push(rfc3261_8_2_2_2);\n\nresponses.push(rfc3261_8_1_3_3);\nresponses.push(rfc3261_18_1_2);\nresponses.push(rfc3261_18_3_response);\n\nall.push(minimumHeaders);\n\nsanityCheck = function(m, u, t) {\n  var len, pass;\n\n  message = m;\n  ua = u;\n  transport = t;\n\n  logger = ua.getLogger('sip.sanitycheck');\n\n  len = all.length;\n  while(len--) {\n    pass = all[len](message);\n    if(pass === false) {\n      return false;\n    }\n  }\n\n  if(message instanceof SIP.IncomingRequest) {\n    len = requests.length;\n    while(len--) {\n      pass = requests[len](message);\n      if(pass === false) {\n        return false;\n      }\n    }\n  }\n\n  else if(message instanceof SIP.IncomingResponse) {\n    len = responses.length;\n    while(len--) {\n      pass = responses[len](message);\n      if(pass === false) {\n        return false;\n      }\n    }\n  }\n\n  //Everything is OK\n  return true;\n};\n\nSIP.sanityCheck = sanityCheck;\n};\n\n\n/***/ },\n/* 33 */\n/***/ function(module, exports) {\n\n\n/**\n * @fileoverview SIP Digest Authentication\n */\n\n/**\n * SIP Digest Authentication.\n * @augments SIP.\n * @function Digest Authentication\n * @param {SIP.UA} ua\n */\nmodule.exports = function (Utils) {\nvar DigestAuthentication;\n\nDigestAuthentication = function(ua) {\n  this.logger = ua.getLogger('sipjs.digestauthentication');\n  this.username = ua.configuration.authorizationUser;\n  this.password = ua.configuration.password;\n  this.cnonce = null;\n  this.nc = 0;\n  this.ncHex = '00000000';\n  this.response = null;\n};\n\n\n/**\n* Performs Digest authentication given a SIP request and the challenge\n* received in a response to that request.\n* Returns true if credentials were successfully generated, false otherwise.\n*\n* @param {SIP.OutgoingRequest} request\n* @param {Object} challenge\n*/\nDigestAuthentication.prototype.authenticate = function(request, challenge) {\n  // Inspect and validate the challenge.\n\n  this.algorithm = challenge.algorithm;\n  this.realm = challenge.realm;\n  this.nonce = challenge.nonce;\n  this.opaque = challenge.opaque;\n  this.stale = challenge.stale;\n\n  if (this.algorithm) {\n    if (this.algorithm !== 'MD5') {\n      this.logger.warn('challenge with Digest algorithm different than \"MD5\", authentication aborted');\n      return false;\n    }\n  } else {\n    this.algorithm = 'MD5';\n  }\n\n  if (! this.realm) {\n    this.logger.warn('challenge without Digest realm, authentication aborted');\n    return false;\n  }\n\n  if (! this.nonce) {\n    this.logger.warn('challenge without Digest nonce, authentication aborted');\n    return false;\n  }\n\n  // 'qop' can contain a list of values (Array). Let's choose just one.\n  if (challenge.qop) {\n    if (challenge.qop.indexOf('auth') > -1) {\n      this.qop = 'auth';\n    } else if (challenge.qop.indexOf('auth-int') > -1) {\n      this.qop = 'auth-int';\n    } else {\n      // Otherwise 'qop' is present but does not contain 'auth' or 'auth-int', so abort here.\n      this.logger.warn('challenge without Digest qop different than \"auth\" or \"auth-int\", authentication aborted');\n      return false;\n    }\n  } else {\n    this.qop = null;\n  }\n\n  // Fill other attributes.\n\n  this.method = request.method;\n  this.uri = request.ruri;\n  this.cnonce = Utils.createRandomToken(12);\n  this.nc += 1;\n  this.updateNcHex();\n\n  // nc-value = 8LHEX. Max value = 'FFFFFFFF'.\n  if (this.nc === 4294967296) {\n    this.nc = 1;\n    this.ncHex = '00000001';\n  }\n\n  // Calculate the Digest \"response\" value.\n  this.calculateResponse();\n\n  return true;\n};\n\n\n/**\n* Generate Digest 'response' value.\n* @private\n*/\nDigestAuthentication.prototype.calculateResponse = function() {\n  var ha1, ha2;\n\n  // HA1 = MD5(A1) = MD5(username:realm:password)\n  ha1 = Utils.calculateMD5(this.username + \":\" + this.realm + \":\" + this.password);\n\n  if (this.qop === 'auth') {\n    // HA2 = MD5(A2) = MD5(method:digestURI)\n    ha2 = Utils.calculateMD5(this.method + \":\" + this.uri);\n    // response = MD5(HA1:nonce:nonceCount:credentialsNonce:qop:HA2)\n    this.response = Utils.calculateMD5(ha1 + \":\" + this.nonce + \":\" + this.ncHex + \":\" + this.cnonce + \":auth:\" + ha2);\n\n  } else if (this.qop === 'auth-int') {\n    // HA2 = MD5(A2) = MD5(method:digestURI:MD5(entityBody))\n    ha2 = Utils.calculateMD5(this.method + \":\" + this.uri + \":\" + Utils.calculateMD5(this.body ? this.body : \"\"));\n    // response = MD5(HA1:nonce:nonceCount:credentialsNonce:qop:HA2)\n    this.response = Utils.calculateMD5(ha1 + \":\" + this.nonce + \":\" + this.ncHex + \":\" + this.cnonce + \":auth-int:\" + ha2);\n\n  } else if (this.qop === null) {\n    // HA2 = MD5(A2) = MD5(method:digestURI)\n    ha2 = Utils.calculateMD5(this.method + \":\" + this.uri);\n    // response = MD5(HA1:nonce:HA2)\n    this.response = Utils.calculateMD5(ha1 + \":\" + this.nonce + \":\" + ha2);\n  }\n};\n\n\n/**\n* Return the Proxy-Authorization or WWW-Authorization header value.\n*/\nDigestAuthentication.prototype.toString = function() {\n  var auth_params = [];\n\n  if (! this.response) {\n    throw new Error('response field does not exist, cannot generate Authorization header');\n  }\n\n  auth_params.push('algorithm=' + this.algorithm);\n  auth_params.push('username=\"' + this.username + '\"');\n  auth_params.push('realm=\"' + this.realm + '\"');\n  auth_params.push('nonce=\"' + this.nonce + '\"');\n  auth_params.push('uri=\"' + this.uri + '\"');\n  auth_params.push('response=\"' + this.response + '\"');\n  if (this.opaque) {\n    auth_params.push('opaque=\"' + this.opaque + '\"');\n  }\n  if (this.qop) {\n    auth_params.push('qop=' + this.qop);\n    auth_params.push('cnonce=\"' + this.cnonce + '\"');\n    auth_params.push('nc=' + this.ncHex);\n  }\n\n  return 'Digest ' + auth_params.join(', ');\n};\n\n\n/**\n* Generate the 'nc' value as required by Digest in this.ncHex by reading this.nc.\n* @private\n*/\nDigestAuthentication.prototype.updateNcHex = function() {\n  var hex = Number(this.nc).toString(16);\n  this.ncHex = '00000000'.substr(0, 8-hex.length) + hex;\n};\n\nreturn DigestAuthentication;\n};\n\n\n/***/ },\n/* 34 */\n/***/ function(module, exports) {\n\n/* jshint ignore:start */\nmodule.exports = function(SIP) {\n  /*\n   * Generated by PEG.js 0.8.0.\n   *\n   * http://pegjs.majda.cz/\n   */\n\n  function peg$subclass(child, parent) {\n    function ctor() { this.constructor = child; }\n    ctor.prototype = parent.prototype;\n    child.prototype = new ctor();\n  }\n\n  function SyntaxError(message, expected, found, offset, line, column) {\n    this.message  = message;\n    this.expected = expected;\n    this.found    = found;\n    this.offset   = offset;\n    this.line     = line;\n    this.column   = column;\n\n    this.name     = \"SyntaxError\";\n  }\n\n  peg$subclass(SyntaxError, Error);\n\n  function parse(input) {\n    var options = arguments.length > 1 ? arguments[1] : {},\n\n        peg$FAILED = {},\n\n        peg$startRuleIndices = { Contact: 118, Name_Addr_Header: 155, Record_Route: 175, Request_Response: 81, SIP_URI: 45, Subscription_State: 182, Via: 190, absoluteURI: 84, Call_ID: 117, Content_Disposition: 129, Content_Length: 134, Content_Type: 135, CSeq: 145, displayName: 121, Event: 148, From: 150, host: 52, Max_Forwards: 153, Proxy_Authenticate: 156, quoted_string: 40, Refer_To: 177, stun_URI: 209, To: 188, turn_URI: 216, uuid: 219, WWW_Authenticate: 205, challenge: 157 },\n        peg$startRuleIndex   = 118,\n\n        peg$consts = [\n          \"\\r\\n\",\n          { type: \"literal\", value: \"\\r\\n\", description: \"\\\"\\\\r\\\\n\\\"\" },\n          /^[0-9]/,\n          { type: \"class\", value: \"[0-9]\", description: \"[0-9]\" },\n          /^[a-zA-Z]/,\n          { type: \"class\", value: \"[a-zA-Z]\", description: \"[a-zA-Z]\" },\n          /^[0-9a-fA-F]/,\n          { type: \"class\", value: \"[0-9a-fA-F]\", description: \"[0-9a-fA-F]\" },\n          /^[\\0-\\xFF]/,\n          { type: \"class\", value: \"[\\\\0-\\\\xFF]\", description: \"[\\\\0-\\\\xFF]\" },\n          /^[\"]/,\n          { type: \"class\", value: \"[\\\"]\", description: \"[\\\"]\" },\n          \" \",\n          { type: \"literal\", value: \" \", description: \"\\\" \\\"\" },\n          \"\\t\",\n          { type: \"literal\", value: \"\\t\", description: \"\\\"\\\\t\\\"\" },\n          /^[a-zA-Z0-9]/,\n          { type: \"class\", value: \"[a-zA-Z0-9]\", description: \"[a-zA-Z0-9]\" },\n          \";\",\n          { type: \"literal\", value: \";\", description: \"\\\";\\\"\" },\n          \"/\",\n          { type: \"literal\", value: \"/\", description: \"\\\"/\\\"\" },\n          \"?\",\n          { type: \"literal\", value: \"?\", description: \"\\\"?\\\"\" },\n          \":\",\n          { type: \"literal\", value: \":\", description: \"\\\":\\\"\" },\n          \"@\",\n          { type: \"literal\", value: \"@\", description: \"\\\"@\\\"\" },\n          \"&\",\n          { type: \"literal\", value: \"&\", description: \"\\\"&\\\"\" },\n          \"=\",\n          { type: \"literal\", value: \"=\", description: \"\\\"=\\\"\" },\n          \"+\",\n          { type: \"literal\", value: \"+\", description: \"\\\"+\\\"\" },\n          \"$\",\n          { type: \"literal\", value: \"$\", description: \"\\\"$\\\"\" },\n          \",\",\n          { type: \"literal\", value: \",\", description: \"\\\",\\\"\" },\n          \"-\",\n          { type: \"literal\", value: \"-\", description: \"\\\"-\\\"\" },\n          \"_\",\n          { type: \"literal\", value: \"_\", description: \"\\\"_\\\"\" },\n          \".\",\n          { type: \"literal\", value: \".\", description: \"\\\".\\\"\" },\n          \"!\",\n          { type: \"literal\", value: \"!\", description: \"\\\"!\\\"\" },\n          \"~\",\n          { type: \"literal\", value: \"~\", description: \"\\\"~\\\"\" },\n          \"*\",\n          { type: \"literal\", value: \"*\", description: \"\\\"*\\\"\" },\n          \"'\",\n          { type: \"literal\", value: \"'\", description: \"\\\"'\\\"\" },\n          \"(\",\n          { type: \"literal\", value: \"(\", description: \"\\\"(\\\"\" },\n          \")\",\n          { type: \"literal\", value: \")\", description: \"\\\")\\\"\" },\n          peg$FAILED,\n          \"%\",\n          { type: \"literal\", value: \"%\", description: \"\\\"%\\\"\" },\n          function(escaped) {return escaped.join(''); },\n          null,\n          [],\n          function() {return \" \"; },\n          function() {return ':'; },\n          function() {\n                              return text(); },\n          /^[!-~]/,\n          { type: \"class\", value: \"[!-~]\", description: \"[!-~]\" },\n          /^[\\x80-\\uFFFF]/,\n          { type: \"class\", value: \"[\\\\x80-\\\\uFFFF]\", description: \"[\\\\x80-\\\\uFFFF]\" },\n          /^[\\x80-\\xBF]/,\n          { type: \"class\", value: \"[\\\\x80-\\\\xBF]\", description: \"[\\\\x80-\\\\xBF]\" },\n          /^[a-f]/,\n          { type: \"class\", value: \"[a-f]\", description: \"[a-f]\" },\n          \"`\",\n          { type: \"literal\", value: \"`\", description: \"\\\"`\\\"\" },\n          function() {\n                            return text(); },\n          \"<\",\n          { type: \"literal\", value: \"<\", description: \"\\\"<\\\"\" },\n          \">\",\n          { type: \"literal\", value: \">\", description: \"\\\">\\\"\" },\n          \"\\\\\",\n          { type: \"literal\", value: \"\\\\\", description: \"\\\"\\\\\\\\\\\"\" },\n          \"[\",\n          { type: \"literal\", value: \"[\", description: \"\\\"[\\\"\" },\n          \"]\",\n          { type: \"literal\", value: \"]\", description: \"\\\"]\\\"\" },\n          \"{\",\n          { type: \"literal\", value: \"{\", description: \"\\\"{\\\"\" },\n          \"}\",\n          { type: \"literal\", value: \"}\", description: \"\\\"}\\\"\" },\n          function() {return \"*\"; },\n          function() {return \"/\"; },\n          function() {return \"=\"; },\n          function() {return \"(\"; },\n          function() {return \")\"; },\n          function() {return \">\"; },\n          function() {return \"<\"; },\n          function() {return \",\"; },\n          function() {return \";\"; },\n          function() {return \":\"; },\n          function() {return \"\\\"\"; },\n          /^[!-']/,\n          { type: \"class\", value: \"[!-']\", description: \"[!-']\" },\n          /^[*-[]/,\n          { type: \"class\", value: \"[*-[]\", description: \"[*-[]\" },\n          /^[\\]-~]/,\n          { type: \"class\", value: \"[\\\\]-~]\", description: \"[\\\\]-~]\" },\n          function(contents) {\n                                  return contents; },\n          /^[#-[]/,\n          { type: \"class\", value: \"[#-[]\", description: \"[#-[]\" },\n          /^[\\0-\\t]/,\n          { type: \"class\", value: \"[\\\\0-\\\\t]\", description: \"[\\\\0-\\\\t]\" },\n          /^[\\x0B-\\f]/,\n          { type: \"class\", value: \"[\\\\x0B-\\\\f]\", description: \"[\\\\x0B-\\\\f]\" },\n          /^[\\x0E-]/,\n          { type: \"class\", value: \"[\\\\x0E-]\", description: \"[\\\\x0E-]\" },\n          function() {\n                                  data.uri = new SIP.URI(data.scheme, data.user, data.host, data.port);\n                                  delete data.scheme;\n                                  delete data.user;\n                                  delete data.host;\n                                  delete data.host_type;\n                                  delete data.port;\n                                },\n          function() {\n                                  data.uri = new SIP.URI(data.scheme, data.user, data.host, data.port, data.uri_params, data.uri_headers);\n                                  delete data.scheme;\n                                  delete data.user;\n                                  delete data.host;\n                                  delete data.host_type;\n                                  delete data.port;\n                                  delete data.uri_params;\n\n                                  if (options.startRule === 'SIP_URI') { data = data.uri;}\n                                },\n          \"sips\",\n          { type: \"literal\", value: \"sips\", description: \"\\\"sips\\\"\" },\n          \"sip\",\n          { type: \"literal\", value: \"sip\", description: \"\\\"sip\\\"\" },\n          function(uri_scheme) {\n                              data.scheme = uri_scheme.toLowerCase(); },\n          function() {\n                              data.user = decodeURIComponent(text().slice(0, -1));},\n          function() {\n                              data.password = text(); },\n          function() {\n                              data.host = text().toLowerCase();\n                              return data.host; },\n          function() {\n                            data.host_type = 'domain';\n                            return text(); },\n          /^[a-zA-Z0-9_\\-]/,\n          { type: \"class\", value: \"[a-zA-Z0-9_\\\\-]\", description: \"[a-zA-Z0-9_\\\\-]\" },\n          /^[a-zA-Z0-9\\-]/,\n          { type: \"class\", value: \"[a-zA-Z0-9\\\\-]\", description: \"[a-zA-Z0-9\\\\-]\" },\n          function() {\n                              data.host_type = 'IPv6';\n                              return text(); },\n          \"::\",\n          { type: \"literal\", value: \"::\", description: \"\\\"::\\\"\" },\n          function() {\n                            data.host_type = 'IPv6';\n                            return text(); },\n          function() {\n                              data.host_type = 'IPv4';\n                              return text(); },\n          \"25\",\n          { type: \"literal\", value: \"25\", description: \"\\\"25\\\"\" },\n          /^[0-5]/,\n          { type: \"class\", value: \"[0-5]\", description: \"[0-5]\" },\n          \"2\",\n          { type: \"literal\", value: \"2\", description: \"\\\"2\\\"\" },\n          /^[0-4]/,\n          { type: \"class\", value: \"[0-4]\", description: \"[0-4]\" },\n          \"1\",\n          { type: \"literal\", value: \"1\", description: \"\\\"1\\\"\" },\n          /^[1-9]/,\n          { type: \"class\", value: \"[1-9]\", description: \"[1-9]\" },\n          function(port) {\n                              port = parseInt(port.join(''));\n                              data.port = port;\n                              return port; },\n          \"transport=\",\n          { type: \"literal\", value: \"transport=\", description: \"\\\"transport=\\\"\" },\n          \"udp\",\n          { type: \"literal\", value: \"udp\", description: \"\\\"udp\\\"\" },\n          \"tcp\",\n          { type: \"literal\", value: \"tcp\", description: \"\\\"tcp\\\"\" },\n          \"sctp\",\n          { type: \"literal\", value: \"sctp\", description: \"\\\"sctp\\\"\" },\n          \"tls\",\n          { type: \"literal\", value: \"tls\", description: \"\\\"tls\\\"\" },\n          function(transport) {\n                                if(!data.uri_params) data.uri_params={};\n                                data.uri_params['transport'] = transport.toLowerCase(); },\n          \"user=\",\n          { type: \"literal\", value: \"user=\", description: \"\\\"user=\\\"\" },\n          \"phone\",\n          { type: \"literal\", value: \"phone\", description: \"\\\"phone\\\"\" },\n          \"ip\",\n          { type: \"literal\", value: \"ip\", description: \"\\\"ip\\\"\" },\n          function(user) {\n                                if(!data.uri_params) data.uri_params={};\n                                data.uri_params['user'] = user.toLowerCase(); },\n          \"method=\",\n          { type: \"literal\", value: \"method=\", description: \"\\\"method=\\\"\" },\n          function(method) {\n                                if(!data.uri_params) data.uri_params={};\n                                data.uri_params['method'] = method; },\n          \"ttl=\",\n          { type: \"literal\", value: \"ttl=\", description: \"\\\"ttl=\\\"\" },\n          function(ttl) {\n                                if(!data.params) data.params={};\n                                data.params['ttl'] = ttl; },\n          \"maddr=\",\n          { type: \"literal\", value: \"maddr=\", description: \"\\\"maddr=\\\"\" },\n          function(maddr) {\n                                if(!data.uri_params) data.uri_params={};\n                                data.uri_params['maddr'] = maddr; },\n          \"lr\",\n          { type: \"literal\", value: \"lr\", description: \"\\\"lr\\\"\" },\n          function() {\n                                if(!data.uri_params) data.uri_params={};\n                                data.uri_params['lr'] = undefined; },\n          function(param, value) {\n                                if(!data.uri_params) data.uri_params = {};\n                                if (value === null){\n                                  value = undefined;\n                                }\n                                else {\n                                  value = value[1];\n                                }\n                                data.uri_params[param.toLowerCase()] = value && value.toLowerCase();},\n          function(pname) {return pname.join(''); },\n          function(pvalue) {return pvalue.join(''); },\n          function(hname, hvalue) {\n                                hname = hname.join('').toLowerCase();\n                                hvalue = hvalue.join('');\n                                if(!data.uri_headers) data.uri_headers = {};\n                                if (!data.uri_headers[hname]) {\n                                  data.uri_headers[hname] = [hvalue];\n                                } else {\n                                  data.uri_headers[hname].push(hvalue);\n                                }},\n          function() {\n                                // lots of tests fail if this isn't guarded...\n                                if (options.startRule === 'Refer_To') {\n                                  data.uri = new SIP.URI(data.scheme, data.user, data.host, data.port, data.uri_params, data.uri_headers);\n                                  delete data.scheme;\n                                  delete data.user;\n                                  delete data.host;\n                                  delete data.host_type;\n                                  delete data.port;\n                                  delete data.uri_params;\n                                }\n                              },\n          \"//\",\n          { type: \"literal\", value: \"//\", description: \"\\\"//\\\"\" },\n          function() {\n                              data.scheme= text(); },\n          { type: \"literal\", value: \"SIP\", description: \"\\\"SIP\\\"\" },\n          function() {\n                              data.sip_version = text(); },\n          \"INVITE\",\n          { type: \"literal\", value: \"INVITE\", description: \"\\\"INVITE\\\"\" },\n          \"ACK\",\n          { type: \"literal\", value: \"ACK\", description: \"\\\"ACK\\\"\" },\n          \"VXACH\",\n          { type: \"literal\", value: \"VXACH\", description: \"\\\"VXACH\\\"\" },\n          \"OPTIONS\",\n          { type: \"literal\", value: \"OPTIONS\", description: \"\\\"OPTIONS\\\"\" },\n          \"BYE\",\n          { type: \"literal\", value: \"BYE\", description: \"\\\"BYE\\\"\" },\n          \"CANCEL\",\n          { type: \"literal\", value: \"CANCEL\", description: \"\\\"CANCEL\\\"\" },\n          \"REGISTER\",\n          { type: \"literal\", value: \"REGISTER\", description: \"\\\"REGISTER\\\"\" },\n          \"SUBSCRIBE\",\n          { type: \"literal\", value: \"SUBSCRIBE\", description: \"\\\"SUBSCRIBE\\\"\" },\n          \"NOTIFY\",\n          { type: \"literal\", value: \"NOTIFY\", description: \"\\\"NOTIFY\\\"\" },\n          \"REFER\",\n          { type: \"literal\", value: \"REFER\", description: \"\\\"REFER\\\"\" },\n          function() {\n\n                              data.method = text();\n                              return data.method; },\n          function(status_code) {\n                            data.status_code = parseInt(status_code.join('')); },\n          function() {\n                            data.reason_phrase = text(); },\n          function() {\n                        data = text(); },\n          function() {\n                                  var idx, length;\n                                  length = data.multi_header.length;\n                                  for (idx = 0; idx < length; idx++) {\n                                    if (data.multi_header[idx].parsed === null) {\n                                      data = null;\n                                      break;\n                                    }\n                                  }\n                                  if (data !== null) {\n                                    data = data.multi_header;\n                                  } else {\n                                    data = -1;\n                                  }},\n          function() {\n                                  var header;\n                                  if(!data.multi_header) data.multi_header = [];\n                                  try {\n                                    header = new SIP.NameAddrHeader(data.uri, data.displayName, data.params);\n                                    delete data.uri;\n                                    delete data.displayName;\n                                    delete data.params;\n                                  } catch(e) {\n                                    header = null;\n                                  }\n                                  data.multi_header.push( { 'position': peg$currPos,\n                                                            'offset': offset(),\n                                                            'parsed': header\n                                                          });},\n          function(displayName) {\n                                  displayName = text().trim();\n                                  if (displayName[0] === '\\\"') {\n                                    displayName = displayName.substring(1, displayName.length-1);\n                                  }\n                                  data.displayName = displayName; },\n          \"q\",\n          { type: \"literal\", value: \"q\", description: \"\\\"q\\\"\" },\n          function(q) {\n                                  if(!data.params) data.params = {};\n                                  data.params['q'] = q; },\n          \"expires\",\n          { type: \"literal\", value: \"expires\", description: \"\\\"expires\\\"\" },\n          function(expires) {\n                                  if(!data.params) data.params = {};\n                                  data.params['expires'] = expires; },\n          function(delta_seconds) {\n                                  return parseInt(delta_seconds.join('')); },\n          \"0\",\n          { type: \"literal\", value: \"0\", description: \"\\\"0\\\"\" },\n          function() {\n                                  return parseFloat(text()); },\n          function(param, value) {\n                                  if(!data.params) data.params = {};\n                                  if (value === null){\n                                    value = undefined;\n                                  }\n                                  else {\n                                    value = value[1];\n                                  }\n                                  data.params[param.toLowerCase()] = value;},\n          \"render\",\n          { type: \"literal\", value: \"render\", description: \"\\\"render\\\"\" },\n          \"session\",\n          { type: \"literal\", value: \"session\", description: \"\\\"session\\\"\" },\n          \"icon\",\n          { type: \"literal\", value: \"icon\", description: \"\\\"icon\\\"\" },\n          \"alert\",\n          { type: \"literal\", value: \"alert\", description: \"\\\"alert\\\"\" },\n          function() {\n                                      if (options.startRule === 'Content_Disposition') {\n                                        data.type = text().toLowerCase();\n                                      }\n                                    },\n          \"handling\",\n          { type: \"literal\", value: \"handling\", description: \"\\\"handling\\\"\" },\n          \"optional\",\n          { type: \"literal\", value: \"optional\", description: \"\\\"optional\\\"\" },\n          \"required\",\n          { type: \"literal\", value: \"required\", description: \"\\\"required\\\"\" },\n          function(length) {\n                                  data = parseInt(length.join('')); },\n          function() {\n                                  data = text(); },\n          \"text\",\n          { type: \"literal\", value: \"text\", description: \"\\\"text\\\"\" },\n          \"image\",\n          { type: \"literal\", value: \"image\", description: \"\\\"image\\\"\" },\n          \"audio\",\n          { type: \"literal\", value: \"audio\", description: \"\\\"audio\\\"\" },\n          \"video\",\n          { type: \"literal\", value: \"video\", description: \"\\\"video\\\"\" },\n          \"application\",\n          { type: \"literal\", value: \"application\", description: \"\\\"application\\\"\" },\n          \"message\",\n          { type: \"literal\", value: \"message\", description: \"\\\"message\\\"\" },\n          \"multipart\",\n          { type: \"literal\", value: \"multipart\", description: \"\\\"multipart\\\"\" },\n          \"x-\",\n          { type: \"literal\", value: \"x-\", description: \"\\\"x-\\\"\" },\n          function(cseq_value) {\n                            data.value=parseInt(cseq_value.join('')); },\n          function(expires) {data = expires; },\n          function(event_type) {\n                                 data.event = event_type.toLowerCase(); },\n          function() {\n                          var tag = data.tag;\n                            data = new SIP.NameAddrHeader(data.uri, data.displayName, data.params);\n                            if (tag) {data.setParam('tag',tag)}\n                          },\n          \"tag\",\n          { type: \"literal\", value: \"tag\", description: \"\\\"tag\\\"\" },\n          function(tag) {data.tag = tag; },\n          function(forwards) {\n                            data = parseInt(forwards.join('')); },\n          function(min_expires) {data = min_expires; },\n          function() {\n                                  data = new SIP.NameAddrHeader(data.uri, data.displayName, data.params);\n                                },\n          \"digest\",\n          { type: \"literal\", value: \"Digest\", description: \"\\\"Digest\\\"\" },\n          \"realm\",\n          { type: \"literal\", value: \"realm\", description: \"\\\"realm\\\"\" },\n          function(realm) { data.realm = realm; },\n          \"domain\",\n          { type: \"literal\", value: \"domain\", description: \"\\\"domain\\\"\" },\n          \"nonce\",\n          { type: \"literal\", value: \"nonce\", description: \"\\\"nonce\\\"\" },\n          function(nonce) { data.nonce=nonce; },\n          \"opaque\",\n          { type: \"literal\", value: \"opaque\", description: \"\\\"opaque\\\"\" },\n          function(opaque) { data.opaque=opaque; },\n          \"stale\",\n          { type: \"literal\", value: \"stale\", description: \"\\\"stale\\\"\" },\n          \"true\",\n          { type: \"literal\", value: \"true\", description: \"\\\"true\\\"\" },\n          function() { data.stale=true; },\n          \"false\",\n          { type: \"literal\", value: \"false\", description: \"\\\"false\\\"\" },\n          function() { data.stale=false; },\n          \"algorithm\",\n          { type: \"literal\", value: \"algorithm\", description: \"\\\"algorithm\\\"\" },\n          \"md5\",\n          { type: \"literal\", value: \"MD5\", description: \"\\\"MD5\\\"\" },\n          \"md5-sess\",\n          { type: \"literal\", value: \"MD5-sess\", description: \"\\\"MD5-sess\\\"\" },\n          function(algorithm) {\n                                data.algorithm=algorithm.toUpperCase(); },\n          \"qop\",\n          { type: \"literal\", value: \"qop\", description: \"\\\"qop\\\"\" },\n          \"auth-int\",\n          { type: \"literal\", value: \"auth-int\", description: \"\\\"auth-int\\\"\" },\n          \"auth\",\n          { type: \"literal\", value: \"auth\", description: \"\\\"auth\\\"\" },\n          function(qop_value) {\n                                  data.qop || (data.qop=[]);\n                                  data.qop.push(qop_value.toLowerCase()); },\n          function(rack_value) {\n                            data.value=parseInt(rack_value.join('')); },\n          function() {\n                            var idx, length;\n                            length = data.multi_header.length;\n                            for (idx = 0; idx < length; idx++) {\n                              if (data.multi_header[idx].parsed === null) {\n                                data = null;\n                                break;\n                              }\n                            }\n                            if (data !== null) {\n                              data = data.multi_header;\n                            } else {\n                              data = -1;\n                            }},\n          function() {\n                            var header;\n                            if(!data.multi_header) data.multi_header = [];\n                            try {\n                              header = new SIP.NameAddrHeader(data.uri, data.displayName, data.params);\n                              delete data.uri;\n                              delete data.displayName;\n                              delete data.params;\n                            } catch(e) {\n                              header = null;\n                            }\n                            data.multi_header.push( { 'position': peg$currPos,\n                                                      'offset': offset(),\n                                                      'parsed': header\n                                                    });},\n          function() {\n                        data = new SIP.NameAddrHeader(data.uri, data.displayName, data.params);\n                      },\n          function(rseq_value) {\n                            data.value=parseInt(rseq_value.join('')); },\n          \"active\",\n          { type: \"literal\", value: \"active\", description: \"\\\"active\\\"\" },\n          \"pending\",\n          { type: \"literal\", value: \"pending\", description: \"\\\"pending\\\"\" },\n          \"terminated\",\n          { type: \"literal\", value: \"terminated\", description: \"\\\"terminated\\\"\" },\n          function() {\n                                  data.state = text(); },\n          \"reason\",\n          { type: \"literal\", value: \"reason\", description: \"\\\"reason\\\"\" },\n          function(reason) {\n                                  if (typeof reason !== 'undefined') data.reason = reason; },\n          function(expires) {\n                                  if (typeof expires !== 'undefined') data.expires = expires; },\n          \"retry_after\",\n          { type: \"literal\", value: \"retry_after\", description: \"\\\"retry_after\\\"\" },\n          function(retry_after) {\n                                  if (typeof retry_after !== 'undefined') data.retry_after = retry_after; },\n          \"deactivated\",\n          { type: \"literal\", value: \"deactivated\", description: \"\\\"deactivated\\\"\" },\n          \"probation\",\n          { type: \"literal\", value: \"probation\", description: \"\\\"probation\\\"\" },\n          \"rejected\",\n          { type: \"literal\", value: \"rejected\", description: \"\\\"rejected\\\"\" },\n          \"timeout\",\n          { type: \"literal\", value: \"timeout\", description: \"\\\"timeout\\\"\" },\n          \"giveup\",\n          { type: \"literal\", value: \"giveup\", description: \"\\\"giveup\\\"\" },\n          \"noresource\",\n          { type: \"literal\", value: \"noresource\", description: \"\\\"noresource\\\"\" },\n          \"invariant\",\n          { type: \"literal\", value: \"invariant\", description: \"\\\"invariant\\\"\" },\n          function() {\n                        var tag = data.tag;\n                          data = new SIP.NameAddrHeader(data.uri, data.displayName, data.params);\n                          if (tag) {data.setParam('tag',tag)}\n                        },\n          \"ttl\",\n          { type: \"literal\", value: \"ttl\", description: \"\\\"ttl\\\"\" },\n          function(via_ttl_value) {\n                                data.ttl = via_ttl_value; },\n          \"maddr\",\n          { type: \"literal\", value: \"maddr\", description: \"\\\"maddr\\\"\" },\n          function(via_maddr) {\n                                data.maddr = via_maddr; },\n          \"received\",\n          { type: \"literal\", value: \"received\", description: \"\\\"received\\\"\" },\n          function(via_received) {\n                                data.received = via_received; },\n          \"branch\",\n          { type: \"literal\", value: \"branch\", description: \"\\\"branch\\\"\" },\n          function(via_branch) {\n                                data.branch = via_branch; },\n          \"rport\",\n          { type: \"literal\", value: \"rport\", description: \"\\\"rport\\\"\" },\n          function() {\n                                if(typeof response_port !== 'undefined')\n                                  data.rport = response_port.join(''); },\n          function(via_protocol) {\n                                data.protocol = via_protocol; },\n          { type: \"literal\", value: \"UDP\", description: \"\\\"UDP\\\"\" },\n          { type: \"literal\", value: \"TCP\", description: \"\\\"TCP\\\"\" },\n          { type: \"literal\", value: \"TLS\", description: \"\\\"TLS\\\"\" },\n          { type: \"literal\", value: \"SCTP\", description: \"\\\"SCTP\\\"\" },\n          function(via_transport) {\n                                data.transport = via_transport; },\n          function() {\n                                data.host = text(); },\n          function(via_sent_by_port) {\n                                data.port = parseInt(via_sent_by_port.join('')); },\n          function(ttl) {\n                                return parseInt(ttl.join('')); },\n          \"stuns\",\n          { type: \"literal\", value: \"stuns\", description: \"\\\"stuns\\\"\" },\n          \"stun\",\n          { type: \"literal\", value: \"stun\", description: \"\\\"stun\\\"\" },\n          function(scheme) {\n                                data.scheme = scheme; },\n          function(host) {\n                                data.host = host; },\n          function() {\n                                return text(); },\n          \"?transport=\",\n          { type: \"literal\", value: \"?transport=\", description: \"\\\"?transport=\\\"\" },\n          \"turns\",\n          { type: \"literal\", value: \"turns\", description: \"\\\"turns\\\"\" },\n          \"turn\",\n          { type: \"literal\", value: \"turn\", description: \"\\\"turn\\\"\" },\n          function() {\n                                data.transport = transport; },\n          function() {\n                            data = text(); }\n        ],\n\n        peg$bytecode = [\n          peg$decode(\". \\\"\\\"2 3!\"),\n          peg$decode(\"0\\\"\\\"\\\"1!3#\"),\n          peg$decode(\"0$\\\"\\\"1!3%\"),\n          peg$decode(\"0&\\\"\\\"1!3'\"),\n          peg$decode(\"7'*# \\\"7(\"),\n          peg$decode(\"0(\\\"\\\"1!3)\"),\n          peg$decode(\"0*\\\"\\\"1!3+\"),\n          peg$decode(\".,\\\"\\\"2,3-\"),\n          peg$decode(\"..\\\"\\\"2.3/\"),\n          peg$decode(\"00\\\"\\\"1!31\"),\n          peg$decode(\".2\\\"\\\"2233*\\x89 \\\".4\\\"\\\"2435*} \\\".6\\\"\\\"2637*q \\\".8\\\"\\\"2839*e \\\".:\\\"\\\"2:3;*Y \\\".<\\\"\\\"2<3=*M \\\".>\\\"\\\"2>3?*A \\\".@\\\"\\\"2@3A*5 \\\".B\\\"\\\"2B3C*) \\\".D\\\"\\\"2D3E\"),\n          peg$decode(\"7)*# \\\"7,\"),\n          peg$decode(\".F\\\"\\\"2F3G*} \\\".H\\\"\\\"2H3I*q \\\".J\\\"\\\"2J3K*e \\\".L\\\"\\\"2L3M*Y \\\".N\\\"\\\"2N3O*M \\\".P\\\"\\\"2P3Q*A \\\".R\\\"\\\"2R3S*5 \\\".T\\\"\\\"2T3U*) \\\".V\\\"\\\"2V3W\"),\n          peg$decode(\"!!.Y\\\"\\\"2Y3Z+7$7#+-%7#+#%'#%$## X$\\\"# X\\\"# X+' 4!6[!! %\"),\n          peg$decode(\"!! ]7$,#&7$\\\"+-$7 +#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\+@$ ]7$+&$,#&7$\\\"\\\"\\\" X+'%4\\\"6^\\\" %$\\\"# X\\\"# X\"),\n          peg$decode(\"7.*# \\\" \\\\\"),\n          peg$decode(\"! ]7'*# \\\"7(,)&7'*# \\\"7(\\\"+A$.8\\\"\\\"2839+1%7/+'%4#6_# %$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"! ]72+&$,#&72\\\"\\\"\\\" X+s$ ]! ]7.,#&7.\\\"+-$72+#%'\\\"%$\\\"# X\\\"# X,@&! ]7.,#&7.\\\"+-$72+#%'\\\"%$\\\"# X\\\"# X\\\"+'%4\\\"6`\\\" %$\\\"# X\\\"# X\"),\n          peg$decode(\"0a\\\"\\\"1!3b*# \\\"73\"),\n          peg$decode(\"0c\\\"\\\"1!3d\"),\n          peg$decode(\"0e\\\"\\\"1!3f\"),\n          peg$decode(\"7!*) \\\"0g\\\"\\\"1!3h\"),\n          peg$decode(\"! ]7)*\\x95 \\\".F\\\"\\\"2F3G*\\x89 \\\".J\\\"\\\"2J3K*} \\\".L\\\"\\\"2L3M*q \\\".Y\\\"\\\"2Y3Z*e \\\".P\\\"\\\"2P3Q*Y \\\".H\\\"\\\"2H3I*M \\\".@\\\"\\\"2@3A*A \\\".i\\\"\\\"2i3j*5 \\\".R\\\"\\\"2R3S*) \\\".N\\\"\\\"2N3O+\\x9E$,\\x9B&7)*\\x95 \\\".F\\\"\\\"2F3G*\\x89 \\\".J\\\"\\\"2J3K*} \\\".L\\\"\\\"2L3M*q \\\".Y\\\"\\\"2Y3Z*e \\\".P\\\"\\\"2P3Q*Y \\\".H\\\"\\\"2H3I*M \\\".@\\\"\\\"2@3A*A \\\".i\\\"\\\"2i3j*5 \\\".R\\\"\\\"2R3S*) \\\".N\\\"\\\"2N3O\\\"\\\"\\\" X+& 4!6k! %\"),\n          peg$decode(\"! ]7)*\\x89 \\\".F\\\"\\\"2F3G*} \\\".L\\\"\\\"2L3M*q \\\".Y\\\"\\\"2Y3Z*e \\\".P\\\"\\\"2P3Q*Y \\\".H\\\"\\\"2H3I*M \\\".@\\\"\\\"2@3A*A \\\".i\\\"\\\"2i3j*5 \\\".R\\\"\\\"2R3S*) \\\".N\\\"\\\"2N3O+\\x92$,\\x8F&7)*\\x89 \\\".F\\\"\\\"2F3G*} \\\".L\\\"\\\"2L3M*q \\\".Y\\\"\\\"2Y3Z*e \\\".P\\\"\\\"2P3Q*Y \\\".H\\\"\\\"2H3I*M \\\".@\\\"\\\"2@3A*A \\\".i\\\"\\\"2i3j*5 \\\".R\\\"\\\"2R3S*) \\\".N\\\"\\\"2N3O\\\"\\\"\\\" X+& 4!6k! %\"),\n          peg$decode(\".T\\\"\\\"2T3U*\\xE3 \\\".V\\\"\\\"2V3W*\\xD7 \\\".l\\\"\\\"2l3m*\\xCB \\\".n\\\"\\\"2n3o*\\xBF \\\".:\\\"\\\"2:3;*\\xB3 \\\".D\\\"\\\"2D3E*\\xA7 \\\".2\\\"\\\"2233*\\x9B \\\".8\\\"\\\"2839*\\x8F \\\".p\\\"\\\"2p3q*\\x83 \\\"7&*} \\\".4\\\"\\\"2435*q \\\".r\\\"\\\"2r3s*e \\\".t\\\"\\\"2t3u*Y \\\".6\\\"\\\"2637*M \\\".>\\\"\\\"2>3?*A \\\".v\\\"\\\"2v3w*5 \\\".x\\\"\\\"2x3y*) \\\"7'*# \\\"7(\"),\n          peg$decode(\"! ]7)*\\u012B \\\".F\\\"\\\"2F3G*\\u011F \\\".J\\\"\\\"2J3K*\\u0113 \\\".L\\\"\\\"2L3M*\\u0107 \\\".Y\\\"\\\"2Y3Z*\\xFB \\\".P\\\"\\\"2P3Q*\\xEF \\\".H\\\"\\\"2H3I*\\xE3 \\\".@\\\"\\\"2@3A*\\xD7 \\\".i\\\"\\\"2i3j*\\xCB \\\".R\\\"\\\"2R3S*\\xBF \\\".N\\\"\\\"2N3O*\\xB3 \\\".T\\\"\\\"2T3U*\\xA7 \\\".V\\\"\\\"2V3W*\\x9B \\\".l\\\"\\\"2l3m*\\x8F \\\".n\\\"\\\"2n3o*\\x83 \\\".8\\\"\\\"2839*w \\\".p\\\"\\\"2p3q*k \\\"7&*e \\\".4\\\"\\\"2435*Y \\\".r\\\"\\\"2r3s*M \\\".t\\\"\\\"2t3u*A \\\".6\\\"\\\"2637*5 \\\".v\\\"\\\"2v3w*) \\\".x\\\"\\\"2x3y+\\u0134$,\\u0131&7)*\\u012B \\\".F\\\"\\\"2F3G*\\u011F \\\".J\\\"\\\"2J3K*\\u0113 \\\".L\\\"\\\"2L3M*\\u0107 \\\".Y\\\"\\\"2Y3Z*\\xFB \\\".P\\\"\\\"2P3Q*\\xEF \\\".H\\\"\\\"2H3I*\\xE3 \\\".@\\\"\\\"2@3A*\\xD7 \\\".i\\\"\\\"2i3j*\\xCB \\\".R\\\"\\\"2R3S*\\xBF \\\".N\\\"\\\"2N3O*\\xB3 \\\".T\\\"\\\"2T3U*\\xA7 \\\".V\\\"\\\"2V3W*\\x9B \\\".l\\\"\\\"2l3m*\\x8F \\\".n\\\"\\\"2n3o*\\x83 \\\".8\\\"\\\"2839*w \\\".p\\\"\\\"2p3q*k \\\"7&*e \\\".4\\\"\\\"2435*Y \\\".r\\\"\\\"2r3s*M \\\".t\\\"\\\"2t3u*A \\\".6\\\"\\\"2637*5 \\\".v\\\"\\\"2v3w*) \\\".x\\\"\\\"2x3y\\\"\\\"\\\" X+& 4!6k! %\"),\n          peg$decode(\"!7/+A$.P\\\"\\\"2P3Q+1%7/+'%4#6z# %$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!7/+A$.4\\\"\\\"2435+1%7/+'%4#6{# %$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!7/+A$.>\\\"\\\"2>3?+1%7/+'%4#6|# %$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!7/+A$.T\\\"\\\"2T3U+1%7/+'%4#6}# %$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!7/+A$.V\\\"\\\"2V3W+1%7/+'%4#6~# %$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!.n\\\"\\\"2n3o+1$7/+'%4\\\"6\\\" %$\\\"# X\\\"# X\"),\n          peg$decode(\"!7/+7$.l\\\"\\\"2l3m+'%4\\\"6\\x80\\\" %$\\\"# X\\\"# X\"),\n          peg$decode(\"!7/+A$.D\\\"\\\"2D3E+1%7/+'%4#6\\x81# %$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!7/+A$.2\\\"\\\"2233+1%7/+'%4#6\\x82# %$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!7/+A$.8\\\"\\\"2839+1%7/+'%4#6\\x83# %$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!7/+1$7&+'%4\\\"6\\x84\\\" %$\\\"# X\\\"# X\"),\n          peg$decode(\"!7&+1$7/+'%4\\\"6\\x84\\\" %$\\\"# X\\\"# X\"),\n          peg$decode(\"!7=+W$ ]7G*) \\\"7K*# \\\"7F,/&7G*) \\\"7K*# \\\"7F\\\"+-%7>+#%'#%$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"0\\x85\\\"\\\"1!3\\x86*A \\\"0\\x87\\\"\\\"1!3\\x88*5 \\\"0\\x89\\\"\\\"1!3\\x8A*) \\\"73*# \\\"7.\"),\n          peg$decode(\"!7/+Y$7&+O% ]7J*# \\\"7K,)&7J*# \\\"7K\\\"+1%7&+'%4$6k$ %$$# X$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!7/+`$7&+V%! ]7J*# \\\"7K,)&7J*# \\\"7K\\\"+! (%+2%7&+(%4$6\\x8B$!!%$$# X$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"7.*G \\\".L\\\"\\\"2L3M*; \\\"0\\x8C\\\"\\\"1!3\\x8D*/ \\\"0\\x89\\\"\\\"1!3\\x8A*# \\\"73\"),\n          peg$decode(\"!.p\\\"\\\"2p3q+K$0\\x8E\\\"\\\"1!3\\x8F*5 \\\"0\\x90\\\"\\\"1!3\\x91*) \\\"0\\x92\\\"\\\"1!3\\x93+#%'\\\"%$\\\"# X\\\"# X\"),\n          peg$decode(\"!7N+Q$.8\\\"\\\"2839+A%7O*# \\\" \\\\+1%7S+'%4$6\\x94$ %$$# X$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!7N+k$.8\\\"\\\"2839+[%7O*# \\\" \\\\+K%7S+A%7_+7%7l*# \\\" \\\\+'%4&6\\x95& %$&# X$%# X$$# X$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!/\\x96\\\"\\\"1$3\\x97*) \\\"/\\x98\\\"\\\"1#3\\x99+' 4!6\\x9A!! %\"),\n          peg$decode(\"!7P+b$!.8\\\"\\\"2839+-$7R+#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\+7%.:\\\"\\\"2:3;+'%4#6\\x9B# %$## X$\\\"# X\\\"# X\"),\n          peg$decode(\" ]7+*) \\\"7-*# \\\"7Q+2$,/&7+*) \\\"7-*# \\\"7Q\\\"\\\"\\\" X\"),\n          peg$decode(\".<\\\"\\\"2<3=*q \\\".>\\\"\\\"2>3?*e \\\".@\\\"\\\"2@3A*Y \\\".B\\\"\\\"2B3C*M \\\".D\\\"\\\"2D3E*A \\\".2\\\"\\\"2233*5 \\\".6\\\"\\\"2637*) \\\".4\\\"\\\"2435\"),\n          peg$decode(\"! ]7+*_ \\\"7-*Y \\\".<\\\"\\\"2<3=*M \\\".>\\\"\\\"2>3?*A \\\".@\\\"\\\"2@3A*5 \\\".B\\\"\\\"2B3C*) \\\".D\\\"\\\"2D3E,e&7+*_ \\\"7-*Y \\\".<\\\"\\\"2<3=*M \\\".>\\\"\\\"2>3?*A \\\".@\\\"\\\"2@3A*5 \\\".B\\\"\\\"2B3C*) \\\".D\\\"\\\"2D3E\\\"+& 4!6\\x9C! %\"),\n          peg$decode(\"!7T+N$!.8\\\"\\\"2839+-$7^+#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\+#%'\\\"%$\\\"# X\\\"# X\"),\n          peg$decode(\"!7U*) \\\"7\\\\*# \\\"7X+& 4!6\\x9D! %\"),\n          peg$decode(\"! ]!7V+3$.J\\\"\\\"2J3K+#%'\\\"%$\\\"# X\\\"# X,>&!7V+3$.J\\\"\\\"2J3K+#%'\\\"%$\\\"# X\\\"# X\\\"+G$7W+=%.J\\\"\\\"2J3K*# \\\" \\\\+'%4#6\\x9E# %$## X$\\\"# X\\\"# X\"),\n          peg$decode(\" ]0\\x9F\\\"\\\"1!3\\xA0+,$,)&0\\x9F\\\"\\\"1!3\\xA0\\\"\\\"\\\" X\"),\n          peg$decode(\"!0$\\\"\\\"1!3%+A$ ]0\\xA1\\\"\\\"1!3\\xA2,)&0\\xA1\\\"\\\"1!3\\xA2\\\"+#%'\\\"%$\\\"# X\\\"# X\"),\n          peg$decode(\"!.r\\\"\\\"2r3s+A$7Y+7%.t\\\"\\\"2t3u+'%4#6\\xA3# %$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!!7Z+\\xBF$.8\\\"\\\"2839+\\xAF%7Z+\\xA5%.8\\\"\\\"2839+\\x95%7Z+\\x8B%.8\\\"\\\"2839+{%7Z+q%.8\\\"\\\"2839+a%7Z+W%.8\\\"\\\"2839+G%7Z+=%.8\\\"\\\"2839+-%7[+#%'-%$-# X$,# X$+# X$*# X$)# X$(# X$'# X$&# X$%# X$$# X$## X$\\\"# X\\\"# X*\\u0838 \\\"!.\\xA4\\\"\\\"2\\xA43\\xA5+\\xAF$7Z+\\xA5%.8\\\"\\\"2839+\\x95%7Z+\\x8B%.8\\\"\\\"2839+{%7Z+q%.8\\\"\\\"2839+a%7Z+W%.8\\\"\\\"2839+G%7Z+=%.8\\\"\\\"2839+-%7[+#%',%$,# X$+# X$*# X$)# X$(# X$'# X$&# X$%# X$$# X$## X$\\\"# X\\\"# X*\\u0795 \\\"!.\\xA4\\\"\\\"2\\xA43\\xA5+\\x95$7Z+\\x8B%.8\\\"\\\"2839+{%7Z+q%.8\\\"\\\"2839+a%7Z+W%.8\\\"\\\"2839+G%7Z+=%.8\\\"\\\"2839+-%7[+#%'*%$*# X$)# X$(# X$'# X$&# X$%# X$$# X$## X$\\\"# X\\\"# X*\\u070C \\\"!.\\xA4\\\"\\\"2\\xA43\\xA5+{$7Z+q%.8\\\"\\\"2839+a%7Z+W%.8\\\"\\\"2839+G%7Z+=%.8\\\"\\\"2839+-%7[+#%'(%$(# X$'# X$&# X$%# X$$# X$## X$\\\"# X\\\"# X*\\u069D \\\"!.\\xA4\\\"\\\"2\\xA43\\xA5+a$7Z+W%.8\\\"\\\"2839+G%7Z+=%.8\\\"\\\"2839+-%7[+#%'&%$&# X$%# X$$# X$## X$\\\"# X\\\"# X*\\u0648 \\\"!.\\xA4\\\"\\\"2\\xA43\\xA5+G$7Z+=%.8\\\"\\\"2839+-%7[+#%'$%$$# X$## X$\\\"# X\\\"# X*\\u060D \\\"!.\\xA4\\\"\\\"2\\xA43\\xA5+-$7[+#%'\\\"%$\\\"# X\\\"# X*\\u05EC \\\"!.\\xA4\\\"\\\"2\\xA43\\xA5+-$7Z+#%'\\\"%$\\\"# X\\\"# X*\\u05CB \\\"!7Z+\\xA5$.\\xA4\\\"\\\"2\\xA43\\xA5+\\x95%7Z+\\x8B%.8\\\"\\\"2839+{%7Z+q%.8\\\"\\\"2839+a%7Z+W%.8\\\"\\\"2839+G%7Z+=%.8\\\"\\\"2839+-%7[+#%'+%$+# X$*# X$)# X$(# X$'# X$&# X$%# X$$# X$## X$\\\"# X\\\"# X*\\u0538 \\\"!7Z+\\xB6$!.8\\\"\\\"2839+-$7Z+#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\+\\x8B%.\\xA4\\\"\\\"2\\xA43\\xA5+{%7Z+q%.8\\\"\\\"2839+a%7Z+W%.8\\\"\\\"2839+G%7Z+=%.8\\\"\\\"2839+-%7[+#%'*%$*# X$)# X$(# X$'# X$&# X$%# X$$# X$## X$\\\"# X\\\"# X*\\u0494 \\\"!7Z+\\xC7$!.8\\\"\\\"2839+-$7Z+#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\+\\x9C%!.8\\\"\\\"2839+-$7Z+#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\+q%.\\xA4\\\"\\\"2\\xA43\\xA5+a%7Z+W%.8\\\"\\\"2839+G%7Z+=%.8\\\"\\\"2839+-%7[+#%')%$)# X$(# X$'# X$&# X$%# X$$# X$## X$\\\"# X\\\"# X*\\u03DF \\\"!7Z+\\xD8$!.8\\\"\\\"2839+-$7Z+#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\+\\xAD%!.8\\\"\\\"2839+-$7Z+#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\+\\x82%!.8\\\"\\\"2839+-$7Z+#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\+W%.\\xA4\\\"\\\"2\\xA43\\xA5+G%7Z+=%.8\\\"\\\"2839+-%7[+#%'(%$(# X$'# X$&# X$%# X$$# X$## X$\\\"# X\\\"# X*\\u0319 \\\"!7Z+\\xE9$!.8\\\"\\\"2839+-$7Z+#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\+\\xBE%!.8\\\"\\\"2839+-$7Z+#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\+\\x93%!.8\\\"\\\"2839+-$7Z+#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\+h%!.8\\\"\\\"2839+-$7Z+#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\+=%.\\xA4\\\"\\\"2\\xA43\\xA5+-%7[+#%''%$'# X$&# X$%# X$$# X$## X$\\\"# X\\\"# X*\\u0242 \\\"!7Z+\\u0114$!.8\\\"\\\"2839+-$7Z+#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\+\\xE9%!.8\\\"\\\"2839+-$7Z+#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\+\\xBE%!.8\\\"\\\"2839+-$7Z+#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\+\\x93%!.8\\\"\\\"2839+-$7Z+#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\+h%!.8\\\"\\\"2839+-$7Z+#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\+=%.\\xA4\\\"\\\"2\\xA43\\xA5+-%7Z+#%'(%$(# X$'# X$&# X$%# X$$# X$## X$\\\"# X\\\"# X*\\u0140 \\\"!7Z+\\u0135$!.8\\\"\\\"2839+-$7Z+#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\+\\u010A%!.8\\\"\\\"2839+-$7Z+#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\+\\xDF%!.8\\\"\\\"2839+-$7Z+#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\+\\xB4%!.8\\\"\\\"2839+-$7Z+#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\+\\x89%!.8\\\"\\\"2839+-$7Z+#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\+^%!.8\\\"\\\"2839+-$7Z+#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\+3%.\\xA4\\\"\\\"2\\xA43\\xA5+#%'(%$(# X$'# X$&# X$%# X$$# X$## X$\\\"# X\\\"# X+& 4!6\\xA6! %\"),\n          peg$decode(\"!7#+S$7#*# \\\" \\\\+C%7#*# \\\" \\\\+3%7#*# \\\" \\\\+#%'$%$$# X$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!7Z+=$.8\\\"\\\"2839+-%7Z+#%'#%$## X$\\\"# X\\\"# X*# \\\"7\\\\\"),\n          peg$decode(\"!7]+u$.J\\\"\\\"2J3K+e%7]+[%.J\\\"\\\"2J3K+K%7]+A%.J\\\"\\\"2J3K+1%7]+'%4'6\\xA7' %$'# X$&# X$%# X$$# X$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!.\\xA8\\\"\\\"2\\xA83\\xA9+3$0\\xAA\\\"\\\"1!3\\xAB+#%'\\\"%$\\\"# X\\\"# X*\\xA0 \\\"!.\\xAC\\\"\\\"2\\xAC3\\xAD+=$0\\xAE\\\"\\\"1!3\\xAF+-%7!+#%'#%$## X$\\\"# X\\\"# X*o \\\"!.\\xB0\\\"\\\"2\\xB03\\xB1+7$7!+-%7!+#%'#%$## X$\\\"# X\\\"# X*D \\\"!0\\xB2\\\"\\\"1!3\\xB3+-$7!+#%'\\\"%$\\\"# X\\\"# X*# \\\"7!\"),\n          peg$decode(\"!!7!*# \\\" \\\\+c$7!*# \\\" \\\\+S%7!*# \\\" \\\\+C%7!*# \\\" \\\\+3%7!*# \\\" \\\\+#%'%%$%# X$$# X$## X$\\\"# X\\\"# X+' 4!6\\xB4!! %\"),\n          peg$decode(\" ]!.2\\\"\\\"2233+-$7`+#%'\\\"%$\\\"# X\\\"# X,>&!.2\\\"\\\"2233+-$7`+#%'\\\"%$\\\"# X\\\"# X\\\"\"),\n          peg$decode(\"7a*A \\\"7b*; \\\"7c*5 \\\"7d*/ \\\"7e*) \\\"7f*# \\\"7g\"),\n          peg$decode(\"!/\\xB5\\\"\\\"1*3\\xB6+b$/\\xB7\\\"\\\"1#3\\xB8*G \\\"/\\xB9\\\"\\\"1#3\\xBA*; \\\"/\\xBB\\\"\\\"1$3\\xBC*/ \\\"/\\xBD\\\"\\\"1#3\\xBE*# \\\"76+(%4\\\"6\\xBF\\\"! %$\\\"# X\\\"# X\"),\n          peg$decode(\"!/\\xC0\\\"\\\"1%3\\xC1+J$/\\xC2\\\"\\\"1%3\\xC3*/ \\\"/\\xC4\\\"\\\"1\\\"3\\xC5*# \\\"76+(%4\\\"6\\xC6\\\"! %$\\\"# X\\\"# X\"),\n          peg$decode(\"!/\\xC7\\\"\\\"1'3\\xC8+2$7\\x8F+(%4\\\"6\\xC9\\\"! %$\\\"# X\\\"# X\"),\n          peg$decode(\"!/\\xCA\\\"\\\"1$3\\xCB+2$7\\xEC+(%4\\\"6\\xCC\\\"! %$\\\"# X\\\"# X\"),\n          peg$decode(\"!/\\xCD\\\"\\\"1&3\\xCE+2$7T+(%4\\\"6\\xCF\\\"! %$\\\"# X\\\"# X\"),\n          peg$decode(\"!/\\xD0\\\"\\\"1\\\"3\\xD1+R$!.>\\\"\\\"2>3?+-$76+#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\+'%4\\\"6\\xD2\\\" %$\\\"# X\\\"# X\"),\n          peg$decode(\"!7h+T$!.>\\\"\\\"2>3?+-$7i+#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\+)%4\\\"6\\xD3\\\"\\\"! %$\\\"# X\\\"# X\"),\n          peg$decode(\"! ]7j+&$,#&7j\\\"\\\"\\\" X+' 4!6\\xD4!! %\"),\n          peg$decode(\"! ]7j+&$,#&7j\\\"\\\"\\\" X+' 4!6\\xD5!! %\"),\n          peg$decode(\"7k*) \\\"7+*# \\\"7-\"),\n          peg$decode(\".r\\\"\\\"2r3s*e \\\".t\\\"\\\"2t3u*Y \\\".4\\\"\\\"2435*M \\\".8\\\"\\\"2839*A \\\".<\\\"\\\"2<3=*5 \\\".@\\\"\\\"2@3A*) \\\".B\\\"\\\"2B3C\"),\n          peg$decode(\"!.6\\\"\\\"2637+u$7m+k% ]!.<\\\"\\\"2<3=+-$7m+#%'\\\"%$\\\"# X\\\"# X,>&!.<\\\"\\\"2<3=+-$7m+#%'\\\"%$\\\"# X\\\"# X\\\"+#%'#%$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!7n+C$.>\\\"\\\"2>3?+3%7o+)%4#6\\xD6#\\\"\\\" %$## X$\\\"# X\\\"# X\"),\n          peg$decode(\" ]7p*) \\\"7+*# \\\"7-+2$,/&7p*) \\\"7+*# \\\"7-\\\"\\\"\\\" X\"),\n          peg$decode(\" ]7p*) \\\"7+*# \\\"7-,/&7p*) \\\"7+*# \\\"7-\\\"\"),\n          peg$decode(\".r\\\"\\\"2r3s*e \\\".t\\\"\\\"2t3u*Y \\\".4\\\"\\\"2435*M \\\".6\\\"\\\"2637*A \\\".8\\\"\\\"2839*5 \\\".@\\\"\\\"2@3A*) \\\".B\\\"\\\"2B3C\"),\n          peg$decode(\"7\\x90*# \\\"7r\"),\n          peg$decode(\"!7\\x8F+K$7'+A%7s+7%7'+-%7\\x84+#%'%%$%# X$$# X$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"7M*# \\\"7t\"),\n          peg$decode(\"!7+G$.8\\\"\\\"2839+7%7u*# \\\"7x+'%4#6\\xD7# %$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!7v*# \\\"7w+N$!.6\\\"\\\"2637+-$7\\x83+#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\+#%'\\\"%$\\\"# X\\\"# X\"),\n          peg$decode(\"!.\\xD8\\\"\\\"2\\xD83\\xD9+=$7\\x80+3%7w*# \\\" \\\\+#%'#%$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!.4\\\"\\\"2435+-$7{+#%'\\\"%$\\\"# X\\\"# X\"),\n          peg$decode(\"!7z+5$ ]7y,#&7y\\\"+#%'\\\"%$\\\"# X\\\"# X\"),\n          peg$decode(\"7**) \\\"7+*# \\\"7-\"),\n          peg$decode(\"7+*\\x8F \\\"7-*\\x89 \\\".2\\\"\\\"2233*} \\\".6\\\"\\\"2637*q \\\".8\\\"\\\"2839*e \\\".:\\\"\\\"2:3;*Y \\\".<\\\"\\\"2<3=*M \\\".>\\\"\\\"2>3?*A \\\".@\\\"\\\"2@3A*5 \\\".B\\\"\\\"2B3C*) \\\".D\\\"\\\"2D3E\"),\n          peg$decode(\"!7|+k$ ]!.4\\\"\\\"2435+-$7|+#%'\\\"%$\\\"# X\\\"# X,>&!.4\\\"\\\"2435+-$7|+#%'\\\"%$\\\"# X\\\"# X\\\"+#%'\\\"%$\\\"# X\\\"# X\"),\n          peg$decode(\"! ]7~,#&7~\\\"+k$ ]!.2\\\"\\\"2233+-$7}+#%'\\\"%$\\\"# X\\\"# X,>&!.2\\\"\\\"2233+-$7}+#%'\\\"%$\\\"# X\\\"# X\\\"+#%'\\\"%$\\\"# X\\\"# X\"),\n          peg$decode(\" ]7~,#&7~\\\"\"),\n          peg$decode(\"7+*w \\\"7-*q \\\".8\\\"\\\"2839*e \\\".:\\\"\\\"2:3;*Y \\\".<\\\"\\\"2<3=*M \\\".>\\\"\\\"2>3?*A \\\".@\\\"\\\"2@3A*5 \\\".B\\\"\\\"2B3C*) \\\".D\\\"\\\"2D3E\"),\n          peg$decode(\"!7\\\"+\\x8D$ ]7\\\"*G \\\"7!*A \\\".@\\\"\\\"2@3A*5 \\\".F\\\"\\\"2F3G*) \\\".J\\\"\\\"2J3K,M&7\\\"*G \\\"7!*A \\\".@\\\"\\\"2@3A*5 \\\".F\\\"\\\"2F3G*) \\\".J\\\"\\\"2J3K\\\"+'%4\\\"6\\xDA\\\" %$\\\"# X\\\"# X\"),\n          peg$decode(\"7\\x81*# \\\"7\\x82\"),\n          peg$decode(\"!!7O+3$.:\\\"\\\"2:3;+#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\+-$7S+#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\\"),\n          peg$decode(\" ]7+*\\x83 \\\"7-*} \\\".B\\\"\\\"2B3C*q \\\".D\\\"\\\"2D3E*e \\\".2\\\"\\\"2233*Y \\\".8\\\"\\\"2839*M \\\".:\\\"\\\"2:3;*A \\\".<\\\"\\\"2<3=*5 \\\".>\\\"\\\"2>3?*) \\\".@\\\"\\\"2@3A+\\x8C$,\\x89&7+*\\x83 \\\"7-*} \\\".B\\\"\\\"2B3C*q \\\".D\\\"\\\"2D3E*e \\\".2\\\"\\\"2233*Y \\\".8\\\"\\\"2839*M \\\".:\\\"\\\"2:3;*A \\\".<\\\"\\\"2<3=*5 \\\".>\\\"\\\"2>3?*) \\\".@\\\"\\\"2@3A\\\"\\\"\\\" X\"),\n          peg$decode(\" ]7y,#&7y\\\"\"),\n          peg$decode(\"!/\\x98\\\"\\\"1#3\\xDB+y$.4\\\"\\\"2435+i% ]7!+&$,#&7!\\\"\\\"\\\" X+P%.J\\\"\\\"2J3K+@% ]7!+&$,#&7!\\\"\\\"\\\" X+'%4%6\\xDC% %$%# X$$# X$## X$\\\"# X\\\"# X\"),\n          peg$decode(\".\\xDD\\\"\\\"2\\xDD3\\xDE\"),\n          peg$decode(\".\\xDF\\\"\\\"2\\xDF3\\xE0\"),\n          peg$decode(\".\\xE1\\\"\\\"2\\xE13\\xE2\"),\n          peg$decode(\".\\xE3\\\"\\\"2\\xE33\\xE4\"),\n          peg$decode(\".\\xE5\\\"\\\"2\\xE53\\xE6\"),\n          peg$decode(\".\\xE7\\\"\\\"2\\xE73\\xE8\"),\n          peg$decode(\".\\xE9\\\"\\\"2\\xE93\\xEA\"),\n          peg$decode(\".\\xEB\\\"\\\"2\\xEB3\\xEC\"),\n          peg$decode(\".\\xED\\\"\\\"2\\xED3\\xEE\"),\n          peg$decode(\".\\xEF\\\"\\\"2\\xEF3\\xF0\"),\n          peg$decode(\"!7\\x85*S \\\"7\\x86*M \\\"7\\x88*G \\\"7\\x89*A \\\"7\\x8A*; \\\"7\\x8B*5 \\\"7\\x8C*/ \\\"7\\x8D*) \\\"7\\x8E*# \\\"76+& 4!6\\xF1! %\"),\n          peg$decode(\"!7\\x84+K$7'+A%7\\x91+7%7'+-%7\\x93+#%'%%$%# X$$# X$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!7\\x92+' 4!6\\xF2!! %\"),\n          peg$decode(\"!7!+7$7!+-%7!+#%'#%$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"! ]7**A \\\"7+*; \\\"7-*5 \\\"73*/ \\\"74*) \\\"7'*# \\\"7(,G&7**A \\\"7+*; \\\"7-*5 \\\"73*/ \\\"74*) \\\"7'*# \\\"7(\\\"+& 4!6\\xF3! %\"),\n          peg$decode(\"!7\\xB5+_$ ]!7A+-$7\\xB5+#%'\\\"%$\\\"# X\\\"# X,8&!7A+-$7\\xB5+#%'\\\"%$\\\"# X\\\"# X\\\"+#%'\\\"%$\\\"# X\\\"# X\"),\n          peg$decode(\"!79+R$!.:\\\"\\\"2:3;+-$79+#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\+'%4\\\"6\\xF4\\\" %$\\\"# X\\\"# X\"),\n          peg$decode(\"!7:*j \\\"!7\\x97+_$ ]!7A+-$7\\x97+#%'\\\"%$\\\"# X\\\"# X,8&!7A+-$7\\x97+#%'\\\"%$\\\"# X\\\"# X\\\"+#%'\\\"%$\\\"# X\\\"# X+& 4!6\\xF5! %\"),\n          peg$decode(\"!7L*# \\\"7\\x98+c$ ]!7B+-$7\\x9A+#%'\\\"%$\\\"# X\\\"# X,8&!7B+-$7\\x9A+#%'\\\"%$\\\"# X\\\"# X\\\"+'%4\\\"6\\xF6\\\" %$\\\"# X\\\"# X\"),\n          peg$decode(\"!7\\x99*# \\\" \\\\+A$7@+7%7M+-%7?+#%'$%$$# X$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!!76+_$ ]!7.+-$76+#%'\\\"%$\\\"# X\\\"# X,8&!7.+-$76+#%'\\\"%$\\\"# X\\\"# X\\\"+#%'\\\"%$\\\"# X\\\"# X*# \\\"7H+' 4!6\\xF7!! %\"),\n          peg$decode(\"7\\x9B*) \\\"7\\x9C*# \\\"7\\x9F\"),\n          peg$decode(\"!/\\xF8\\\"\\\"1!3\\xF9+<$7<+2%7\\x9E+(%4#6\\xFA#! %$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!/\\xFB\\\"\\\"1'3\\xFC+<$7<+2%7\\x9D+(%4#6\\xFD#! %$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"! ]7!+&$,#&7!\\\"\\\"\\\" X+' 4!6\\xFE!! %\"),\n          peg$decode(\"!.\\xFF\\\"\\\"2\\xFF3\\u0100+x$!.J\\\"\\\"2J3K+S$7!*# \\\" \\\\+C%7!*# \\\" \\\\+3%7!*# \\\" \\\\+#%'$%$$# X$## X$\\\"# X\\\"# X*# \\\" \\\\+'%4\\\"6\\u0101\\\" %$\\\"# X\\\"# X\"),\n          peg$decode(\"!76+N$!7<+-$7\\xA0+#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\+)%4\\\"6\\u0102\\\"\\\"! %$\\\"# X\\\"# X\"),\n          peg$decode(\"76*) \\\"7T*# \\\"7H\"),\n          peg$decode(\"!7\\xA2+_$ ]!7B+-$7\\xA3+#%'\\\"%$\\\"# X\\\"# X,8&!7B+-$7\\xA3+#%'\\\"%$\\\"# X\\\"# X\\\"+#%'\\\"%$\\\"# X\\\"# X\"),\n          peg$decode(\"!/\\u0103\\\"\\\"1&3\\u0104*G \\\"/\\u0105\\\"\\\"1'3\\u0106*; \\\"/\\u0107\\\"\\\"1$3\\u0108*/ \\\"/\\u0109\\\"\\\"1%3\\u010A*# \\\"76+& 4!6\\u010B! %\"),\n          peg$decode(\"7\\xA4*# \\\"7\\x9F\"),\n          peg$decode(\"!/\\u010C\\\"\\\"1(3\\u010D+O$7<+E%/\\u010E\\\"\\\"1(3\\u010F*/ \\\"/\\u0110\\\"\\\"1(3\\u0111*# \\\"76+#%'#%$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!76+_$ ]!7A+-$76+#%'\\\"%$\\\"# X\\\"# X,8&!7A+-$76+#%'\\\"%$\\\"# X\\\"# X\\\"+#%'\\\"%$\\\"# X\\\"# X\"),\n          peg$decode(\"! ]7!+&$,#&7!\\\"\\\"\\\" X+' 4!6\\u0112!! %\"),\n          peg$decode(\"!7\\xA8+& 4!6\\u0113! %\"),\n          peg$decode(\"!7\\xA9+s$7;+i%7\\xAE+_% ]!7B+-$7\\xAF+#%'\\\"%$\\\"# X\\\"# X,8&!7B+-$7\\xAF+#%'\\\"%$\\\"# X\\\"# X\\\"+#%'$%$$# X$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"7\\xAA*# \\\"7\\xAB\"),\n          peg$decode(\"/\\u0114\\\"\\\"1$3\\u0115*S \\\"/\\u0116\\\"\\\"1%3\\u0117*G \\\"/\\u0118\\\"\\\"1%3\\u0119*; \\\"/\\u011A\\\"\\\"1%3\\u011B*/ \\\"/\\u011C\\\"\\\"1+3\\u011D*# \\\"7\\xAC\"),\n          peg$decode(\"/\\u011E\\\"\\\"1'3\\u011F*/ \\\"/\\u0120\\\"\\\"1)3\\u0121*# \\\"7\\xAC\"),\n          peg$decode(\"76*# \\\"7\\xAD\"),\n          peg$decode(\"!/\\u0122\\\"\\\"1\\\"3\\u0123+-$76+#%'\\\"%$\\\"# X\\\"# X\"),\n          peg$decode(\"7\\xAC*# \\\"76\"),\n          peg$decode(\"!76+7$7<+-%7\\xB0+#%'#%$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"76*# \\\"7H\"),\n          peg$decode(\"!7\\xB2+7$7.+-%7\\x8F+#%'#%$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"! ]7!+&$,#&7!\\\"\\\"\\\" X+' 4!6\\u0124!! %\"),\n          peg$decode(\"!7\\x9D+' 4!6\\u0125!! %\"),\n          peg$decode(\"!7\\xB5+d$ ]!7B+-$7\\x9F+#%'\\\"%$\\\"# X\\\"# X,8&!7B+-$7\\x9F+#%'\\\"%$\\\"# X\\\"# X\\\"+(%4\\\"6\\u0126\\\"!!%$\\\"# X\\\"# X\"),\n          peg$decode(\"!!77+k$ ]!.J\\\"\\\"2J3K+-$77+#%'\\\"%$\\\"# X\\\"# X,>&!.J\\\"\\\"2J3K+-$77+#%'\\\"%$\\\"# X\\\"# X\\\"+#%'\\\"%$\\\"# X\\\"# X+! (%\"),\n          peg$decode(\"!7L*# \\\"7\\x98+c$ ]!7B+-$7\\xB7+#%'\\\"%$\\\"# X\\\"# X,8&!7B+-$7\\xB7+#%'\\\"%$\\\"# X\\\"# X\\\"+'%4\\\"6\\u0127\\\" %$\\\"# X\\\"# X\"),\n          peg$decode(\"7\\xB8*# \\\"7\\x9F\"),\n          peg$decode(\"!/\\u0128\\\"\\\"1#3\\u0129+<$7<+2%76+(%4#6\\u012A#! %$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"! ]7!+&$,#&7!\\\"\\\"\\\" X+' 4!6\\u012B!! %\"),\n          peg$decode(\"!7\\x9D+' 4!6\\u012C!! %\"),\n          peg$decode(\"! ]7\\x99,#&7\\x99\\\"+\\x81$7@+w%7M+m%7?+c% ]!7B+-$7\\x9F+#%'\\\"%$\\\"# X\\\"# X,8&!7B+-$7\\x9F+#%'\\\"%$\\\"# X\\\"# X\\\"+'%4%6\\u012D% %$%# X$$# X$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"7\\xBD\"),\n          peg$decode(\"!/\\u012E\\\"\\\"1&3\\u012F+s$7.+i%7\\xC0+_% ]!7A+-$7\\xC0+#%'\\\"%$\\\"# X\\\"# X,8&!7A+-$7\\xC0+#%'\\\"%$\\\"# X\\\"# X\\\"+#%'$%$$# X$## X$\\\"# X\\\"# X*# \\\"7\\xBE\"),\n          peg$decode(\"!76+s$7.+i%7\\xBF+_% ]!7A+-$7\\xBF+#%'\\\"%$\\\"# X\\\"# X,8&!7A+-$7\\xBF+#%'\\\"%$\\\"# X\\\"# X\\\"+#%'$%$$# X$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!76+=$7<+3%76*# \\\"7H+#%'#%$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"7\\xC1*G \\\"7\\xC3*A \\\"7\\xC5*; \\\"7\\xC7*5 \\\"7\\xC8*/ \\\"7\\xC9*) \\\"7\\xCA*# \\\"7\\xBF\"),\n          peg$decode(\"!/\\u0130\\\"\\\"1%3\\u0131+7$7<+-%7\\xC2+#%'#%$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!7I+' 4!6\\u0132!! %\"),\n          peg$decode(\"!/\\u0133\\\"\\\"1&3\\u0134+\\xA5$7<+\\x9B%7D+\\x91%7\\xC4+\\x87% ]! ]7'+&$,#&7'\\\"\\\"\\\" X+-$7\\xC4+#%'\\\"%$\\\"# X\\\"# X,G&! ]7'+&$,#&7'\\\"\\\"\\\" X+-$7\\xC4+#%'\\\"%$\\\"# X\\\"# X\\\"+-%7E+#%'&%$&# X$%# X$$# X$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"7t*# \\\"7w\"),\n          peg$decode(\"!/\\u0135\\\"\\\"1%3\\u0136+7$7<+-%7\\xC6+#%'#%$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!7I+' 4!6\\u0137!! %\"),\n          peg$decode(\"!/\\u0138\\\"\\\"1&3\\u0139+<$7<+2%7I+(%4#6\\u013A#! %$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!/\\u013B\\\"\\\"1%3\\u013C+_$7<+U%!/\\u013D\\\"\\\"1$3\\u013E+& 4!6\\u013F! %*4 \\\"!/\\u0140\\\"\\\"1%3\\u0141+& 4!6\\u0142! %+#%'#%$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!/\\u0143\\\"\\\"1)3\\u0144+T$7<+J%/\\u0145\\\"\\\"1#3\\u0146*/ \\\"/\\u0147\\\"\\\"1(3\\u0148*# \\\"76+(%4#6\\u0149#! %$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!/\\u014A\\\"\\\"1#3\\u014B+\\x9E$7<+\\x94%7D+\\x8A%!7\\xCB+k$ ]!.D\\\"\\\"2D3E+-$7\\xCB+#%'\\\"%$\\\"# X\\\"# X,>&!.D\\\"\\\"2D3E+-$7\\xCB+#%'\\\"%$\\\"# X\\\"# X\\\"+#%'\\\"%$\\\"# X\\\"# X+-%7E+#%'%%$%# X$$# X$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!/\\u014C\\\"\\\"1(3\\u014D*/ \\\"/\\u014E\\\"\\\"1$3\\u014F*# \\\"76+' 4!6\\u0150!! %\"),\n          peg$decode(\"!76+_$ ]!7A+-$76+#%'\\\"%$\\\"# X\\\"# X,8&!7A+-$76+#%'\\\"%$\\\"# X\\\"# X\\\"+#%'\\\"%$\\\"# X\\\"# X\"),\n          peg$decode(\"!7\\xCE+K$7.+A%7\\xCE+7%7.+-%7\\x8F+#%'%%$%# X$$# X$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"! ]7!+&$,#&7!\\\"\\\"\\\" X+' 4!6\\u0151!! %\"),\n          peg$decode(\"!7\\xD0+c$ ]!7A+-$7\\xD0+#%'\\\"%$\\\"# X\\\"# X,8&!7A+-$7\\xD0+#%'\\\"%$\\\"# X\\\"# X\\\"+'%4\\\"6\\u0152\\\" %$\\\"# X\\\"# X\"),\n          peg$decode(\"!7\\x98+c$ ]!7B+-$7\\x9F+#%'\\\"%$\\\"# X\\\"# X,8&!7B+-$7\\x9F+#%'\\\"%$\\\"# X\\\"# X\\\"+'%4\\\"6\\u0153\\\" %$\\\"# X\\\"# X\"),\n          peg$decode(\"!7L*) \\\"7\\x98*# \\\"7t+c$ ]!7B+-$7\\x9F+#%'\\\"%$\\\"# X\\\"# X,8&!7B+-$7\\x9F+#%'\\\"%$\\\"# X\\\"# X\\\"+'%4\\\"6\\u0154\\\" %$\\\"# X\\\"# X\"),\n          peg$decode(\"!76+_$ ]!7A+-$76+#%'\\\"%$\\\"# X\\\"# X,8&!7A+-$76+#%'\\\"%$\\\"# X\\\"# X\\\"+#%'\\\"%$\\\"# X\\\"# X\"),\n          peg$decode(\"!7\\xD4+_$ ]!7A+-$7\\xD4+#%'\\\"%$\\\"# X\\\"# X,8&!7A+-$7\\xD4+#%'\\\"%$\\\"# X\\\"# X\\\"+#%'\\\"%$\\\"# X\\\"# X\"),\n          peg$decode(\"!7\\x98+_$ ]!7B+-$7\\x9F+#%'\\\"%$\\\"# X\\\"# X,8&!7B+-$7\\x9F+#%'\\\"%$\\\"# X\\\"# X\\\"+#%'\\\"%$\\\"# X\\\"# X\"),\n          peg$decode(\"! ]7!+&$,#&7!\\\"\\\"\\\" X+' 4!6\\u0155!! %\"),\n          peg$decode(\"!7\\xD7+_$ ]!7B+-$7\\xD8+#%'\\\"%$\\\"# X\\\"# X,8&!7B+-$7\\xD8+#%'\\\"%$\\\"# X\\\"# X\\\"+#%'\\\"%$\\\"# X\\\"# X\"),\n          peg$decode(\"!/\\u0156\\\"\\\"1&3\\u0157*; \\\"/\\u0158\\\"\\\"1'3\\u0159*/ \\\"/\\u015A\\\"\\\"1*3\\u015B*# \\\"76+& 4!6\\u015C! %\"),\n          peg$decode(\"!/\\u015D\\\"\\\"1&3\\u015E+<$7<+2%7\\xD9+(%4#6\\u015F#! %$## X$\\\"# X\\\"# X*\\x83 \\\"!/\\xFB\\\"\\\"1'3\\xFC+<$7<+2%7\\x9D+(%4#6\\u0160#! %$## X$\\\"# X\\\"# X*S \\\"!/\\u0161\\\"\\\"1+3\\u0162+<$7<+2%7\\x9D+(%4#6\\u0163#! %$## X$\\\"# X\\\"# X*# \\\"7\\x9F\"),\n          peg$decode(\"/\\u0164\\\"\\\"1+3\\u0165*k \\\"/\\u0166\\\"\\\"1)3\\u0167*_ \\\"/\\u0168\\\"\\\"1(3\\u0169*S \\\"/\\u016A\\\"\\\"1'3\\u016B*G \\\"/\\u016C\\\"\\\"1&3\\u016D*; \\\"/\\u016E\\\"\\\"1*3\\u016F*/ \\\"/\\u0170\\\"\\\"1)3\\u0171*# \\\"76\"),\n          peg$decode(\"71*# \\\" \\\\\"),\n          peg$decode(\"!76+_$ ]!7A+-$76+#%'\\\"%$\\\"# X\\\"# X,8&!7A+-$76+#%'\\\"%$\\\"# X\\\"# X\\\"+#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\\"),\n          peg$decode(\"!7L*# \\\"7\\x98+c$ ]!7B+-$7\\xDD+#%'\\\"%$\\\"# X\\\"# X,8&!7B+-$7\\xDD+#%'\\\"%$\\\"# X\\\"# X\\\"+'%4\\\"6\\u0172\\\" %$\\\"# X\\\"# X\"),\n          peg$decode(\"7\\xB8*# \\\"7\\x9F\"),\n          peg$decode(\"!7\\xDF+_$ ]!7A+-$7\\xDF+#%'\\\"%$\\\"# X\\\"# X,8&!7A+-$7\\xDF+#%'\\\"%$\\\"# X\\\"# X\\\"+#%'\\\"%$\\\"# X\\\"# X\"),\n          peg$decode(\"!7\\xE6+s$7.+i%7\\xE9+_% ]!7B+-$7\\xE0+#%'\\\"%$\\\"# X\\\"# X,8&!7B+-$7\\xE0+#%'\\\"%$\\\"# X\\\"# X\\\"+#%'$%$$# X$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"7\\xE1*; \\\"7\\xE2*5 \\\"7\\xE3*/ \\\"7\\xE4*) \\\"7\\xE5*# \\\"7\\x9F\"),\n          peg$decode(\"!/\\u0173\\\"\\\"1#3\\u0174+<$7<+2%7\\xEC+(%4#6\\u0175#! %$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!/\\u0176\\\"\\\"1%3\\u0177+<$7<+2%7T+(%4#6\\u0178#! %$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!/\\u0179\\\"\\\"1(3\\u017A+B$7<+8%7\\\\*# \\\"7Y+(%4#6\\u017B#! %$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!/\\u017C\\\"\\\"1&3\\u017D+<$7<+2%76+(%4#6\\u017E#! %$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!/\\u017F\\\"\\\"1%3\\u0180+T$!7<+5$ ]7!,#&7!\\\"+#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\+'%4\\\"6\\u0181\\\" %$\\\"# X\\\"# X\"),\n          peg$decode(\"!7\\xE7+K$7;+A%76+7%7;+-%7\\xE8+#%'%%$%# X$$# X$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!/\\x98\\\"\\\"1#3\\xDB*# \\\"76+' 4!6\\u0182!! %\"),\n          peg$decode(\"!/\\xB7\\\"\\\"1#3\\u0183*G \\\"/\\xB9\\\"\\\"1#3\\u0184*; \\\"/\\xBD\\\"\\\"1#3\\u0185*/ \\\"/\\xBB\\\"\\\"1$3\\u0186*# \\\"76+' 4!6\\u0187!! %\"),\n          peg$decode(\"!7\\xEA+H$!7C+-$7\\xEB+#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\+#%'\\\"%$\\\"# X\\\"# X\"),\n          peg$decode(\"!7U*) \\\"7\\\\*# \\\"7X+& 4!6\\u0188! %\"),\n          peg$decode(\"!!7!*# \\\" \\\\+c$7!*# \\\" \\\\+S%7!*# \\\" \\\\+C%7!*# \\\" \\\\+3%7!*# \\\" \\\\+#%'%%$%# X$$# X$## X$\\\"# X\\\"# X+' 4!6\\u0189!! %\"),\n          peg$decode(\"!!7!+C$7!*# \\\" \\\\+3%7!*# \\\" \\\\+#%'#%$## X$\\\"# X\\\"# X+' 4!6\\u018A!! %\"),\n          peg$decode(\"7\\xBD\"),\n          peg$decode(\"!76+7$70+-%7\\xEF+#%'#%$## X$\\\"# X\\\"# X\"),\n          peg$decode(\" ]72*) \\\"74*# \\\"7.,/&72*) \\\"74*# \\\"7.\\\"\"),\n          peg$decode(\" ]7%,#&7%\\\"\"),\n          peg$decode(\"!7\\xF2+=$.8\\\"\\\"2839+-%7\\xF3+#%'#%$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!/\\u018B\\\"\\\"1%3\\u018C*) \\\"/\\u018D\\\"\\\"1$3\\u018E+' 4!6\\u018F!! %\"),\n          peg$decode(\"!7\\xF4+N$!.8\\\"\\\"2839+-$7^+#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\+#%'\\\"%$\\\"# X\\\"# X\"),\n          peg$decode(\"!7\\\\*) \\\"7X*# \\\"7\\x82+' 4!6\\u0190!! %\"),\n          peg$decode(\"! ]7\\xF6*) \\\"7-*# \\\"7\\xF7,/&7\\xF6*) \\\"7-*# \\\"7\\xF7\\\"+& 4!6\\u0191! %\"),\n          peg$decode(\"7\\\"*S \\\"7!*M \\\".F\\\"\\\"2F3G*A \\\".J\\\"\\\"2J3K*5 \\\".H\\\"\\\"2H3I*) \\\".N\\\"\\\"2N3O\"),\n          peg$decode(\".L\\\"\\\"2L3M*\\x95 \\\".B\\\"\\\"2B3C*\\x89 \\\".<\\\"\\\"2<3=*} \\\".R\\\"\\\"2R3S*q \\\".T\\\"\\\"2T3U*e \\\".V\\\"\\\"2V3W*Y \\\".P\\\"\\\"2P3Q*M \\\".@\\\"\\\"2@3A*A \\\".D\\\"\\\"2D3E*5 \\\".2\\\"\\\"2233*) \\\".>\\\"\\\"2>3?\"),\n          peg$decode(\"!7\\xF9+h$.8\\\"\\\"2839+X%7\\xF3+N%!.\\u0192\\\"\\\"2\\u01923\\u0193+-$7\\xE8+#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\+#%'$%$$# X$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!/\\u0194\\\"\\\"1%3\\u0195*) \\\"/\\u0196\\\"\\\"1$3\\u0197+' 4!6\\u018F!! %\"),\n          peg$decode(\"!7\\xE8+Q$/\\xB7\\\"\\\"1#3\\xB8*7 \\\"/\\xB9\\\"\\\"1#3\\xBA*+ \\\" ]7+,#&7+\\\"+'%4\\\"6\\u0198\\\" %$\\\"# X\\\"# X\"),\n          peg$decode(\"!7\\xFD+\\x8F$.F\\\"\\\"2F3G+%7\\xFC+u%.F\\\"\\\"2F3G+e%7\\xFC+[%.F\\\"\\\"2F3G+K%7\\xFC+A%.F\\\"\\\"2F3G+1%7\\xFE+'%4)6\\u0199) %$)# X$(# X$'# X$&# X$%# X$$# X$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!7#+A$7#+7%7#+-%7#+#%'$%$$# X$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!7\\xFC+-$7\\xFC+#%'\\\"%$\\\"# X\\\"# X\"),\n          peg$decode(\"!7\\xFC+7$7\\xFC+-%7\\xFC+#%'#%$## X$\\\"# X\\\"# X\")\n        ],\n\n        peg$currPos          = 0,\n        peg$reportedPos      = 0,\n        peg$cachedPos        = 0,\n        peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },\n        peg$maxFailPos       = 0,\n        peg$maxFailExpected  = [],\n        peg$silentFails      = 0,\n\n        peg$result;\n\n    if (\"startRule\" in options) {\n      if (!(options.startRule in peg$startRuleIndices)) {\n        throw new Error(\"Can't start parsing from rule \\\"\" + options.startRule + \"\\\".\");\n      }\n\n      peg$startRuleIndex = peg$startRuleIndices[options.startRule];\n    }\n\n    function text() {\n      return input.substring(peg$reportedPos, peg$currPos);\n    }\n\n    function offset() {\n      return peg$reportedPos;\n    }\n\n    function line() {\n      return peg$computePosDetails(peg$reportedPos).line;\n    }\n\n    function column() {\n      return peg$computePosDetails(peg$reportedPos).column;\n    }\n\n    function expected(description) {\n      throw peg$buildException(\n        null,\n        [{ type: \"other\", description: description }],\n        peg$reportedPos\n      );\n    }\n\n    function error(message) {\n      throw peg$buildException(message, null, peg$reportedPos);\n    }\n\n    function peg$computePosDetails(pos) {\n      function advance(details, startPos, endPos) {\n        var p, ch;\n\n        for (p = startPos; p < endPos; p++) {\n          ch = input.charAt(p);\n          if (ch === \"\\n\") {\n            if (!details.seenCR) { details.line++; }\n            details.column = 1;\n            details.seenCR = false;\n          } else if (ch === \"\\r\" || ch === \"\\u2028\" || ch === \"\\u2029\") {\n            details.line++;\n            details.column = 1;\n            details.seenCR = true;\n          } else {\n            details.column++;\n            details.seenCR = false;\n          }\n        }\n      }\n\n      if (peg$cachedPos !== pos) {\n        if (peg$cachedPos > pos) {\n          peg$cachedPos = 0;\n          peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };\n        }\n        advance(peg$cachedPosDetails, peg$cachedPos, pos);\n        peg$cachedPos = pos;\n      }\n\n      return peg$cachedPosDetails;\n    }\n\n    function peg$fail(expected) {\n      if (peg$currPos < peg$maxFailPos) { return; }\n\n      if (peg$currPos > peg$maxFailPos) {\n        peg$maxFailPos = peg$currPos;\n        peg$maxFailExpected = [];\n      }\n\n      peg$maxFailExpected.push(expected);\n    }\n\n    function peg$buildException(message, expected, pos) {\n      function cleanupExpected(expected) {\n        var i = 1;\n\n        expected.sort(function(a, b) {\n          if (a.description < b.description) {\n            return -1;\n          } else if (a.description > b.description) {\n            return 1;\n          } else {\n            return 0;\n          }\n        });\n\n        while (i < expected.length) {\n          if (expected[i - 1] === expected[i]) {\n            expected.splice(i, 1);\n          } else {\n            i++;\n          }\n        }\n      }\n\n      function buildMessage(expected, found) {\n        function stringEscape(s) {\n          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }\n\n          return s\n            .replace(/\\\\/g,   '\\\\\\\\')\n            .replace(/\"/g,    '\\\\\"')\n            .replace(/\\x08/g, '\\\\b')\n            .replace(/\\t/g,   '\\\\t')\n            .replace(/\\n/g,   '\\\\n')\n            .replace(/\\f/g,   '\\\\f')\n            .replace(/\\r/g,   '\\\\r')\n            .replace(/[\\x00-\\x07\\x0B\\x0E\\x0F]/g, function(ch) { return '\\\\x0' + hex(ch); })\n            .replace(/[\\x10-\\x1F\\x80-\\xFF]/g,    function(ch) { return '\\\\x'  + hex(ch); })\n            .replace(/[\\u0180-\\u0FFF]/g,         function(ch) { return '\\\\u0' + hex(ch); })\n            .replace(/[\\u1080-\\uFFFF]/g,         function(ch) { return '\\\\u'  + hex(ch); });\n        }\n\n        var expectedDescs = new Array(expected.length),\n            expectedDesc, foundDesc, i;\n\n        for (i = 0; i < expected.length; i++) {\n          expectedDescs[i] = expected[i].description;\n        }\n\n        expectedDesc = expected.length > 1\n          ? expectedDescs.slice(0, -1).join(\", \")\n              + \" or \"\n              + expectedDescs[expected.length - 1]\n          : expectedDescs[0];\n\n        foundDesc = found ? \"\\\"\" + stringEscape(found) + \"\\\"\" : \"end of input\";\n\n        return \"Expected \" + expectedDesc + \" but \" + foundDesc + \" found.\";\n      }\n\n      var posDetails = peg$computePosDetails(pos),\n          found      = pos < input.length ? input.charAt(pos) : null;\n\n      if (expected !== null) {\n        cleanupExpected(expected);\n      }\n\n      return new SyntaxError(\n        message !== null ? message : buildMessage(expected, found),\n        expected,\n        found,\n        pos,\n        posDetails.line,\n        posDetails.column\n      );\n    }\n\n    function peg$decode(s) {\n      var bc = new Array(s.length), i;\n\n      for (i = 0; i < s.length; i++) {\n        bc[i] = s.charCodeAt(i) - 32;\n      }\n\n      return bc;\n    }\n\n    function peg$parseRule(index) {\n      var bc    = peg$bytecode[index],\n          ip    = 0,\n          ips   = [],\n          end   = bc.length,\n          ends  = [],\n          stack = [],\n          params, i;\n\n      function protect(object) {\n        return Object.prototype.toString.apply(object) === \"[object Array]\" ? [] : object;\n      }\n\n      while (true) {\n        while (ip < end) {\n          switch (bc[ip]) {\n            case 0:\n              stack.push(protect(peg$consts[bc[ip + 1]]));\n              ip += 2;\n              break;\n\n            case 1:\n              stack.push(peg$currPos);\n              ip++;\n              break;\n\n            case 2:\n              stack.pop();\n              ip++;\n              break;\n\n            case 3:\n              peg$currPos = stack.pop();\n              ip++;\n              break;\n\n            case 4:\n              stack.length -= bc[ip + 1];\n              ip += 2;\n              break;\n\n            case 5:\n              stack.splice(-2, 1);\n              ip++;\n              break;\n\n            case 6:\n              stack[stack.length - 2].push(stack.pop());\n              ip++;\n              break;\n\n            case 7:\n              stack.push(stack.splice(stack.length - bc[ip + 1], bc[ip + 1]));\n              ip += 2;\n              break;\n\n            case 8:\n              stack.pop();\n              stack.push(input.substring(stack[stack.length - 1], peg$currPos));\n              ip++;\n              break;\n\n            case 9:\n              ends.push(end);\n              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);\n\n              if (stack[stack.length - 1]) {\n                end = ip + 3 + bc[ip + 1];\n                ip += 3;\n              } else {\n                end = ip + 3 + bc[ip + 1] + bc[ip + 2];\n                ip += 3 + bc[ip + 1];\n              }\n\n              break;\n\n            case 10:\n              ends.push(end);\n              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);\n\n              if (stack[stack.length - 1] === peg$FAILED) {\n                end = ip + 3 + bc[ip + 1];\n                ip += 3;\n              } else {\n                end = ip + 3 + bc[ip + 1] + bc[ip + 2];\n                ip += 3 + bc[ip + 1];\n              }\n\n              break;\n\n            case 11:\n              ends.push(end);\n              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);\n\n              if (stack[stack.length - 1] !== peg$FAILED) {\n                end = ip + 3 + bc[ip + 1];\n                ip += 3;\n              } else {\n                end = ip + 3 + bc[ip + 1] + bc[ip + 2];\n                ip += 3 + bc[ip + 1];\n              }\n\n              break;\n\n            case 12:\n              if (stack[stack.length - 1] !== peg$FAILED) {\n                ends.push(end);\n                ips.push(ip);\n\n                end = ip + 2 + bc[ip + 1];\n                ip += 2;\n              } else {\n                ip += 2 + bc[ip + 1];\n              }\n\n              break;\n\n            case 13:\n              ends.push(end);\n              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);\n\n              if (input.length > peg$currPos) {\n                end = ip + 3 + bc[ip + 1];\n                ip += 3;\n              } else {\n                end = ip + 3 + bc[ip + 1] + bc[ip + 2];\n                ip += 3 + bc[ip + 1];\n              }\n\n              break;\n\n            case 14:\n              ends.push(end);\n              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);\n\n              if (input.substr(peg$currPos, peg$consts[bc[ip + 1]].length) === peg$consts[bc[ip + 1]]) {\n                end = ip + 4 + bc[ip + 2];\n                ip += 4;\n              } else {\n                end = ip + 4 + bc[ip + 2] + bc[ip + 3];\n                ip += 4 + bc[ip + 2];\n              }\n\n              break;\n\n            case 15:\n              ends.push(end);\n              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);\n\n              if (input.substr(peg$currPos, peg$consts[bc[ip + 1]].length).toLowerCase() === peg$consts[bc[ip + 1]]) {\n                end = ip + 4 + bc[ip + 2];\n                ip += 4;\n              } else {\n                end = ip + 4 + bc[ip + 2] + bc[ip + 3];\n                ip += 4 + bc[ip + 2];\n              }\n\n              break;\n\n            case 16:\n              ends.push(end);\n              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);\n\n              if (peg$consts[bc[ip + 1]].test(input.charAt(peg$currPos))) {\n                end = ip + 4 + bc[ip + 2];\n                ip += 4;\n              } else {\n                end = ip + 4 + bc[ip + 2] + bc[ip + 3];\n                ip += 4 + bc[ip + 2];\n              }\n\n              break;\n\n            case 17:\n              stack.push(input.substr(peg$currPos, bc[ip + 1]));\n              peg$currPos += bc[ip + 1];\n              ip += 2;\n              break;\n\n            case 18:\n              stack.push(peg$consts[bc[ip + 1]]);\n              peg$currPos += peg$consts[bc[ip + 1]].length;\n              ip += 2;\n              break;\n\n            case 19:\n              stack.push(peg$FAILED);\n              if (peg$silentFails === 0) {\n                peg$fail(peg$consts[bc[ip + 1]]);\n              }\n              ip += 2;\n              break;\n\n            case 20:\n              peg$reportedPos = stack[stack.length - 1 - bc[ip + 1]];\n              ip += 2;\n              break;\n\n            case 21:\n              peg$reportedPos = peg$currPos;\n              ip++;\n              break;\n\n            case 22:\n              params = bc.slice(ip + 4, ip + 4 + bc[ip + 3]);\n              for (i = 0; i < bc[ip + 3]; i++) {\n                params[i] = stack[stack.length - 1 - params[i]];\n              }\n\n              stack.splice(\n                stack.length - bc[ip + 2],\n                bc[ip + 2],\n                peg$consts[bc[ip + 1]].apply(null, params)\n              );\n\n              ip += 4 + bc[ip + 3];\n              break;\n\n            case 23:\n              stack.push(peg$parseRule(bc[ip + 1]));\n              ip += 2;\n              break;\n\n            case 24:\n              peg$silentFails++;\n              ip++;\n              break;\n\n            case 25:\n              peg$silentFails--;\n              ip++;\n              break;\n\n            default:\n              throw new Error(\"Invalid opcode: \" + bc[ip] + \".\");\n          }\n        }\n\n        if (ends.length > 0) {\n          end = ends.pop();\n          ip = ips.pop();\n        } else {\n          break;\n        }\n      }\n\n      return stack[0];\n    }\n\n    var data = {};\n\n    peg$result = peg$parseRule(peg$startRuleIndex);\n\n    if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n      return data;\n    } else {\n      if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n        peg$fail({ type: \"end\", description: \"end of input\" });\n      }\n\n      return -1;\n    }\n  }\n\n  return {\n    SyntaxError: SyntaxError,\n    parse:       function (input, startRule) {return parse(input, {startRule: startRule});}\n  };\n};\n/* jshint ignore:end */\n\n\n/***/ },\n/* 35 */\n/***/ function(module, exports) {\n\nvar EventEmitter = function() {\n    this.handlers = {};\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nEventEmitter.prototype.emit = function(name /*, args */) {\n    var self = this, args = Array.prototype.slice.call(arguments, 1);\n    if (name in this.handlers) {\n        var list = this.handlers[name];\n        for (var i = 0; i < list.length; i++) {\n            setTimeout(executeListener(list[i]), 0);\n        }\n    }\n    function executeListener(listener) {\n        return function() {\n            listener.apply(self, args);\n        }\n    }\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nEventEmitter.prototype.on = function(name, listener) {\n    if (!Array.isArray(name)) name = [name];\n    for (var i = 0; i < name.length; i++) {\n        this.handlers[name[i]] = this.handlers[name[i]] || [];\n        var list = this.handlers[name[i]];\n        list.push(listener);\n    }\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nEventEmitter.prototype.off = function(name, listener) {\n    this.handlers[name] = this.handlers[name] || [];\n    var index = this.handlers[name].indexOf(listener);\n    if (index !== -1) {\n        this.handlers[name].splice(index, 1);\n    }\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\nEventEmitter.prototype.once = function(name, listener) {\n    var self = this;\n\n    function listenOnce() {\n        listener.apply(this, arguments);\n        self.off(name, listenOnce);\n    }\n\n    self.on(name, listenOnce);\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\n//FIXME Remove Angular-specific\n//monkey patching emit for assuring that $apply is called\nvar __emit = EventEmitter.prototype.emit;\nEventEmitter.prototype.emit = function() {\n    var self = this, args = arguments;\n    setTimeout(function() {\n        __emit.apply(self, args);\n    });\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nmodule.exports = EventEmitter;\n\n/***/ },\n/* 36 */\n/***/ function(module, exports, __webpack_require__) {\n\nvar SIP = __webpack_require__(2);\nvar EventEmitter = __webpack_require__(35);\nvar PhoneLine = __webpack_require__(37);\nvar utils = __webpack_require__(38);\n\nvar extend = utils.extend;\nvar uuid = utils.uuid;\n\nvar EVENT_NAMES = __webpack_require__(39);\nvar DomAudio = __webpack_require__(40);\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\n/**\n * @param options\n * @constructor\n */\nvar UserAgent = function(options) {\n    this.eventEmitter = new EventEmitter();\n    this.sipConfig = options ? (options.sipConfig || {}) : ({});\n    this.lines = {};\n    this.userAgent = undefined;\n    this.getUserMedia = undefined;\n    this.RTCPeerConnection = undefined;\n    this.RTCSessionDescription = undefined;\n    this.dom = new DomAudio();\n    this.checkConfig();\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nUserAgent.prototype.checkConfig = function() {\n    // set mootools expands to non-enumerables under ES5\n    if (typeof this.sipConfig.wsServers === 'string') {\n        this.sipConfig.wsServers = [\n            {ws_uri: this.sipConfig.wsServers}\n        ];\n    }\n    var key, enums = {enumerable: false};\n    for (key in this.sipConfig.wsServers) this.sipConfig.wsServers.hasOwnProperty(key) || Object.defineProperty(Array.prototype, key, enums);\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nUserAgent.prototype.setSIPConfig = function(config) {\n    var wsServers = config.wsServers,\n        useSecureConnection = (document.location.protocol == 'https:');\n\n    for (var i = 0; i < wsServers.length; i++) {\n        if (\n            (useSecureConnection && /^wss:/.test(wsServers[i]))\n            ||\n            (!useSecureConnection && /^ws:/.test(wsServers[i]))\n        ) {\n            config.wsServers = [wsServers[i]];\n            break;\n        }\n    }\n\n    this.sipConfig = config;\n    this.checkConfig();\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nUserAgent.prototype.__createLine = function(session, type) {\n    var self = this;\n    session.data.id = uuid();\n    self.eventEmitter.emit(EVENT_NAMES.sipRTCSession, session);\n    var line = new PhoneLine({\n        session: session,\n        userAgent: self,\n        instanceId: self.sipConfig.authorizationUser,\n        eventEmitter: self.eventEmitter,\n        type: type\n    });\n    self.__clearInactiveLines();\n    self.lines[session.data.id] = line;\n    window.line = line;\n    return line;\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nUserAgent.prototype.getActiveLines = function() {\n    this.__clearInactiveLines();\n    return this.lines;\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nUserAgent.prototype.getActiveLinesArray = function() {\n    var lines = this.getActiveLines();\n    var arr = [];\n    for (var id in lines) {\n        if (lines.hasOwnProperty(id)) {\n            arr.push(lines[id]);\n        }\n    }\n    return arr;\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nUserAgent.prototype.getIncomingLinesArray = function() {\n    return this.getActiveLinesArray().filter(function(el) {\n        return el.isIncoming();\n    });\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nUserAgent.prototype.__clearInactiveLines = function() {\n    for (var id in this.lines) {\n        if (this.lines.hasOwnProperty(id)) {\n            if (this.lines[id].isClosed()) {\n                delete this.lines[id];\n            }\n        }\n    }\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nvar __disconnectCount = 0;\n\n\nUserAgent.prototype.start = function(options) {\n    var self = this;\n\n    self.stop();\n    if (self.userAgent instanceof SIP.UA) {\n        self.userAgent.loadConfig(self.sipConfig);\n        self.userAgent.traceSip = true;\n    }\n    else {\n        self.userAgent = new SIP.UA(self.sipConfig);\n        self.__registerExtraOptions = options || {};\n        self.userAgent.on('connected', function(e) {\n            __disconnectCount = 0;\n            self.eventEmitter.emit(EVENT_NAMES.sipConnected, e);\n            self.userAgent.register({\n                extraHeaders: options.extraHeaders || []\n            });\n        });\n        self.userAgent.on('disconnected', function(e) {\n            if (++__disconnectCount >= (self.sipConfig.retryCount || 3)) {\n                __disconnectCount = 0;\n                self.stop();\n                self.eventEmitter.emit(EVENT_NAMES.sipConnectionFailed, new Error(\"Unable to connect to the WS server: exceeded number of attempts\"));\n            }\n            self.eventEmitter.emit(EVENT_NAMES.sipDisconnected, e);\n        });\n        self.userAgent.on('registered', function(e) {\n            self.eventEmitter.emit(EVENT_NAMES.sipRegistered, e);\n        });\n        self.userAgent.on('unregistered', function(e) {\n            self.eventEmitter.emit(EVENT_NAMES.sipUnRegistered, e);\n        });\n        self.userAgent.on('registrationFailed', function(e) {\n            self.eventEmitter.emit(EVENT_NAMES.sipRegistrationFailed, e);\n        });\n        //happens when call is incoming\n        self.userAgent.on('invite', function(session) {\n            var newLine;\n\n            if (session && session.request && session.request.hasHeader('replaces')) {\n                var replaces = session.request.getHeader('replaces').split(';'),\n                    callId = replaces[0],\n                    lines = self.getActiveLinesArray(),\n                    foundLine = null;\n                for (var i = 0; i < lines.length; i++) {\n                    if (lines[i].session.request.call_id) {\n                        if (callId === lines[i].session.request.call_id) {\n                            foundLine = lines[i];\n                            break;\n                        }\n                    }\n                }\n\n                if (foundLine) {\n                    var originalSessionId = foundLine.getId();\n                    newLine = self.__createLine(session, PhoneLine.types.incoming);\n                    newLine.answer().then(function() {\n                        self.eventEmitter.emit(EVENT_NAMES.callReplaced, newLine, foundLine);\n                        foundLine.cancel();\n                    });\n                }\n            }\n            else {\n                newLine = self.__createLine(session, PhoneLine.types.incoming);\n                self.eventEmitter.emit(EVENT_NAMES.sipIncomingCall, newLine);\n            }\n        });\n    }\n    //noop on transport connected (this will cause unwanted REGISTER)\n    self.userAgent.registerContext.onTransportConnected = function() {};\n    self.userAgent.start();\n\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nUserAgent.prototype.reregister = function(options, reconnect) {\n    var self = this, reconnect = !!reconnect;\n    options = extend(self.__registerExtraOptions, options);\n    if (!self.userAgent) {\n        self.start(options);\n    }\n    if (!reconnect) {\n        self.userAgent.register(options);\n    }\n    else {\n        if (!self.isConnected()) {\n            self.stop();\n            self.start(options);\n        }\n        else {\n            //This will be treated as abrupt disconnection and SIP.js will try to reconnect the WS\n            self.userAgent.transport.ws.close();\n        }\n    }\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nUserAgent.prototype.stop = function() {\n    if (this.userAgent instanceof SIP.UA) {\n        this.userAgent.stop();\n        this.userAgent = null;\n    }\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nUserAgent.prototype.call = function(number, inviteOptions) {\n    var self = this;\n    var options = {\n        media: {\n            constraints: {audio: true, video: false},\n            render: {\n                local: {\n                    audio: self.dom.localAudio\n                },\n                remote: {\n                    audio: self.dom.remoteAudio\n                }\n            }\n        },\n        RTCConstraints: {\n            \"optional\": [\n                {'DtlsSrtpKeyAgreement': 'true'}\n            ]\n        }\n    };\n    var fromNumber = inviteOptions.fromNumber;\n    var country = inviteOptions.country;\n\n    var headers = [];\n    if (fromNumber) {\n        headers.push('P-Asserted-Identity: sip:' + fromNumber + '@' + this.sipConfig.domain);\n    }\n    if (country) {\n        headers.push('P-rc-country-id: ' + country);\n    }\n    extend(options, {\n        extraHeaders: headers\n    });\n    var session = this.userAgent.invite('' + number, options);\n    var line = self.__createLine(session, PhoneLine.types.outgoing);\n    this.eventEmitter.emit(EVENT_NAMES.outgoingCall, line);\n    return line;\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nUserAgent.prototype.answer = function(line) {\n    return line && line.answer();\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\n\nUserAgent.prototype.hangup = function(line) {\n    if (line) {\n        line.cancel();\n        delete this.lines[line.getId()];\n    }\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nUserAgent.prototype.on = function(eventName, cb) {\n    this.eventEmitter.on(eventName, cb);\n    return this;\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nUserAgent.prototype.isConnected = function() {\n    return !!(this.userAgent && this.userAgent.transport && this.userAgent.transport.connected);\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nUserAgent.prototype.isConnecting = function() {\n    //websocket.readyState === CONNECTING (0)\n    return !this.isConnected() && !!(this.userAgent && this.userAgent.transport && this.userAgent.transport.ws && this.userAgent.transport.ws.readyState === 0);\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nUserAgent.prototype.forceDisconnect = function() {\n    console.warn(this.isConnecting(), this.isConnected())\n    if (this.isConnecting() || this.isConnected()) {\n        this.userAgent.transport.disconnect();\n        this.userAgent.stop();\n        this.userAgent = null;\n    }\n};\n\nmodule.exports = UserAgent;\n\n/***/ },\n/* 37 */\n/***/ function(module, exports, __webpack_require__) {\n\nvar SIP = __webpack_require__(2);\nvar utils = __webpack_require__(38);\nvar EVENT_NAMES = __webpack_require__(39);\nvar dom = __webpack_require__(40);\nvar LOCAL_AUDIO = dom.LOCAL_AUDIO;\nvar REMOTE_AUDIO = dom.REMOTE_AUDIO;\n\nvar delay = utils.delay;\nvar extend = utils.extend;\n\nvar index = 0;\n\n/**\n * @param options\n * @constructor\n */\nvar PhoneLine = function(options) {\n\n    var self = this;\n    this.index = index++;\n\n    this.session = options.session;\n    this.userAgent = options.userAgent;\n    this.eventEmitter = options.eventEmitter;\n    this.instanceId = options.instanceId;\n    this.sessionId = this.session && this.session.id;\n\n    this.onCall = false;\n    this.onRecord = false;\n    this.contact = {};\n    this.muted = false;\n    this.bothMuted = false;\n    this.onHold = false;\n    this.timeCallStarted = null;\n\n    this.accepted = false;\n    this.type = options.type;\n\n    this.responseTimeout = 10000;\n\n    this.controlSender = {\n        messages: {\n            park: {reqid: 1, command: 'callpark'},\n            startRecord: {reqid: 2, command: 'startcallrecord'},\n            stopRecord: {reqid: 3, command: 'stopcallrecord'},\n            flip: {reqid: 3, command: 'callflip', target: ''},\n            monitor: {reqid: 4, command: 'monitor'},\n            barge: {reqid: 5, command: 'barge'},\n            whisper: {reqid: 6, command: 'whisper'},\n            takeover: {reqid: 7, command: 'takeover'}\n        },\n        send: function(command, options) {\n\n            options = options || {};\n            extend(command, options);\n\n            var cseq = null;\n\n            return new Promise(function(resolve, reject){\n                self.session.sendRequest(SIP.C.INFO, {\n                    body: JSON.stringify({\n                        request: command\n                    }),\n                    extraHeaders: [\n                        \"Content-Type: application/json;charset=utf-8\"\n                    ],\n                    receiveResponse: function(response) {\n                        var timeout = null;\n                        if (response.status_code === 200) {\n                            cseq = response.cseq;\n                            function onInfo(request) {\n                                if (response.cseq === cseq) {\n                                    var body = request && request.body || '{}';\n                                    var obj;\n\n                                    try {\n                                        obj = JSON.parse(body);\n                                    }\n                                    catch (e) {\n                                        obj = {};\n                                    }\n\n                                    if (obj.response && obj.response.command === command.command) {\n                                        if (obj.response.result) {\n                                            if (obj.response.result.code == 0) {\n                                                resolve(obj.response.result);\n                                            }\n                                            else {\n                                                reject(obj.response.result);\n                                            }\n                                        }\n                                    }\n                                    timeout && clearTimeout(timeout);\n                                    self.eventEmitter.off('SIP_INFO', onInfo);\n                                    resolve(); //FIXME What to resolve\n                                }\n                            }\n\n                            timeout = setTimeout(function() {\n                                reject(new Error('Timeout: no reply'));\n                                self.eventEmitter.off('SIP_INFO', onInfo);\n                            }, self.responseTimeout);\n                            self.eventEmitter.on('SIP_INFO', onInfo);\n                        }\n                        else {\n                            reject(new Error('The INFO response status code is: ' + response.status_code + ' (waiting for 200)'));\n                        }\n                    }\n                });\n\n            });\n        }\n    };\n\n    /*--------------------------------------------------------------------------------------------------------------------*/\n\n    var __receiveRequest = this.session.receiveRequest;\n    this.session.receiveRequest = function(request) {\n        switch (request.method) {\n            case SIP.C.INFO:\n                self.eventEmitter.emit('SIP_INFO', request);\n                //SIP.js does not support application/json content type, so we monkey override its behaviour in this case\n                if (this.status === SIP.Session.C.STATUS_CONFIRMED || this.status === SIP.Session.C.STATUS_WAITING_FOR_ACK) {\n                    var contentType = request.getHeader('content-type');\n                    if (contentType.match(/^application\\/json/i)) {\n                        request.reply(200);\n                        return this;\n                    }\n                }\n                break;\n            //Refresh invite should not be rejected with 488\n            case SIP.C.INVITE:\n                var session = this;\n                if (session.status === SIP.Session.C.STATUS_CONFIRMED) {\n                    if (request.call_id && session.dialog && session.dialog.id && request.call_id == session.dialog.id.call_id) {\n                        //TODO: check that SDP did not change\n                        session.logger.log('re-INVITE received');\n                        var localSDP = session.mediaHandler.peerConnection.localDescription.sdp;\n                        request.reply(200, null, ['Contact: ' + self.contact], localSDP, function() {\n                            session.status = SIP.Session.C.STATUS_WAITING_FOR_ACK;\n                            session.setInvite2xxTimer(request, localSDP);\n                            session.setACKTimer();\n                        });\n                        return session;\n                    }\n                    //else will be rejected with 488 by SIP.js\n                }\n                break;\n            //We need to analize NOTIFY messages sometimes, so we fire an event\n            case SIP.C.NOTIFY:\n                self.eventEmitter.emit('SIP_NOTIFY', request);\n                break;\n        }\n        return __receiveRequest.apply(self.session, arguments);\n    };\n\n    /*--------------------------------------------------------------------------------------------------------------------*/\n\n    //Fired when ICE is starting to negotiate between the peers.\n    this.session.on('connecting', function(e) {\n        self.eventEmitter.emit(EVENT_NAMES.callConnecting, self, e);\n        setTimeout(function() {\n            if (self.session.mediaHandler.onIceCompleted !== undefined) {\n                self.session.mediaHandler.onIceCompleted(self.session);\n            }\n            else {\n                self.session.mediaHandler.callOnIceCompleted = true;\n            }\n        }, self.userAgent.sipConfig['iceGatheringTimeout'] || 3000);\n    });\n\n    this.__hasEarlyMedia = false;\n\n    /*--------------------------------------------------------------------------------------------------------------------*/\n\n\n    //Monkey patching for handling early media and to delay ACKs\n    var __receiveInviteReponse = this.session.receiveInviteResponse,\n        __waitingForIce = false;\n    this.session.receiveResponse = this.session.receiveInviteResponse = function(response) {\n        var sessionSelf = this, args = arguments;\n        switch (true) {\n            case (/^1[0-9]{2}$/.test(response.status_code)):\n                //Let's not allow the library to send PRACK\n                if (self.hasEarlyMedia()) {\n                    this.emit('progress', response);\n                    return;\n                }\n                break;\n            case /^(2[0-9]{2})|(4\\d{2})$/.test(response.status_code):\n                if (!self.hasEarlyMedia()) break;\n\n                //Let's check the ICE connection state\n                if (self.session.mediaHandler.peerConnection.iceConnectionState === 'completed' && !__waitingForIce) {\n                    __waitingForIce = false;\n                    //if ICE is connected, then let the library to handle the ACK\n                    break;\n                }\n                else {\n                    //If ICE is not connected, then we should send ACK after it has been connected\n                    if (!__waitingForIce) {\n                        self.eventEmitter.once(EVENT_NAMES.ICECompleted, function() {\n                            //let the library handle the ACK after ICE connection is completed\n                            __waitingForIce = false;\n                            __receiveInviteReponse.apply(sessionSelf, args);\n                        });\n\n                        self.eventEmitter.once(EVENT_NAMES.ICEFailed, function() {\n                            //handle the ICE Failed situation\n                            __waitingForIce = false;\n                            self.session.acceptAndTerminate(response, null, 'ICE Connection Failed');\n                        });\n\n                        __waitingForIce = true;\n                    }\n                    return;\n                }\n                break;\n        }\n        return __receiveInviteReponse.apply(sessionSelf, args);\n    };\n\n    /*--------------------------------------------------------------------------------------------------------------------*/\n\n    //Fired each time a provisional (100-199) response is received.\n    this.session.on('progress', function(e) {\n        self.onCall = true;\n\n        //Early media is supported by SIP.js library\n        //But in case it is sent without 100rel support we play it manually\n        //STATUS_EARLY_MEDIA === 11, it will be set by SIP.js if 100rel is supported\n        if (self.session.status !== SIP.Session.C.STATUS_EARLY_MEDIA && e.status_code === 183 && typeof(e.body) === 'string' && e.body.indexOf('\\n') !== -1) {\n            var session = self.session,\n                response = e;\n\n            if (session.hasOffer) {\n                if (!session.createDialog(response, 'UAC')) {\n                    return;\n                }\n                session.hasAnswer = true;\n                session.mediaHandler.setDescription(\n                    response.body,\n                    function() {\n                        session.dialog.pracked.push(response.getHeader('rseq'));\n                        session.status = SIP.Session.C.STATUS_EARLY_MEDIA;\n                        session.mute();\n                        self.__hasEarlyMedia = true;\n                        self.eventEmitter.emit(EVENT_NAMES.callProgress, self, e);\n                    },\n                    function(e) {\n                        session.logger.warn(e);\n                        session.acceptAndTerminate(response, 488, 'Not Acceptable Here');\n                        session.failed(response, SIP.C.causes.BAD_MEDIA_DESCRIPTION);\n                    }\n                );\n            }\n        }\n    });\n\n    /*--------------------------------------------------------------------------------------------------------------------*/\n\n    //Fired each time a successful final (200-299) response is received.\n    this.session.on('accepted', function(e) {\n        if (self.accepted === true) return;\n        self.onCall = true;\n        self.accepted = true;\n        self.timeCallStarted = new Date();\n        self.eventEmitter.emit(EVENT_NAMES.callStarted, self, e);\n    });\n\n\n    /*--------------------------------------------------------------------------------------------------------------------*/\n\n    function onEnd() {\n        self.onCall = false;\n        self.timeCallStarted = null;\n        self.accepted = true;\n    }\n\n    /*--------------------------------------------------------------------------------------------------------------------*/\n    //Fired each time an unsuccessful final (300-699) response is\n    //this will emit failed event\n    this.session.on('rejected', function(e) {\n        onEnd();\n        self.eventEmitter.emit(EVENT_NAMES.callRejected, self, e);\n        //terminated is not called by SIP.js when the call is rejected\n        //self.eventEmitter.emit(EVENT_NAMES.callTerminated, self, e);\n    });\n\n    /*--------------------------------------------------------------------------------------------------------------------*/\n\n    //Fired when the session was canceled by the client\n    this.session.on('cancel', function(e) {\n        onEnd();\n        self.eventEmitter.emit(EVENT_NAMES.callEnded, self, e);\n    });\n\n    /*--------------------------------------------------------------------------------------------------------------------*/\n\n    //Fired when a BYE is sent\n    this.session.on('bye', function(e) {\n        onEnd();\n        self.eventEmitter.emit(EVENT_NAMES.callEnded, self, e);\n    });\n\n    /*--------------------------------------------------------------------------------------------------------------------*/\n\n    //Fired when the request fails, whether due to an unsuccessful final response or due to timeout, transport, or other error\n    this.session.on('failed', function(response, cause) {\n        this.terminated(null, cause);\n        onEnd();\n        self.eventEmitter.emit(EVENT_NAMES.callFailed, self, response, cause);\n        //SIP.js 0.6.x does not call terminated event sometimes, so we call it ourselves\n        if (cause === SIP.C.causes.REQUEST_TIMEOUT) {\n            //this === session\n            if (this.status !== SIP.Session.C.STATUS_CONFIRMED) {\n                this.terminated(null, SIP.C.causes.REQUEST_TIMEOUT);\n            }\n        }\n    });\n\n    /*--------------------------------------------------------------------------------------------------------------------*/\n\n    this.session.on('terminated', function(response, cause) {\n        onEnd();\n        self.eventEmitter.emit(EVENT_NAMES.callTerminated, self, response, cause);\n    });\n\n    /*--------------------------------------------------------------------------------------------------------------------*/\n\n    function terminateCallOnDisconnected(reason) {\n        self.session.terminated(null, reason || SIP.C.causes.CONNECTION_ERROR);\n        onEnd();\n        self.eventEmitter.emit(EVENT_NAMES.callFailed, self, null, 'Connection error');\n    }\n\n    /*--------------------------------------------------------------------------------------------------------------------*/\n//FIXME: Explore if it can be replaced with ref: http://sipjs.com/api/0.7.0/mediaHandler/\n\n    //Monkey patching oniceconnectionstatechange because SIP.js 0.6.x does not have this event\n    var onStateChange = this.session.mediaHandler.peerConnection.oniceconnectionstatechange || function(){},\n        __doubleCompleted = false;\n    this.session.mediaHandler.peerConnection.oniceconnectionstatechange = function() {\n        //this === peerConnection\n        var state = this.iceConnectionState;\n        onStateChange.apply(this, arguments);\n\n        switch (state) {\n            case 'connected':\n                self.eventEmitter.emit(EVENT_NAMES.ICEConnected, self);\n                break;\n            case 'completed':\n                //this may be called twice, see: https://code.google.com/p/chromium/issues/detail?id=371804\n                if (!__doubleCompleted) {\n                    self.eventEmitter.emit(EVENT_NAMES.ICECompleted, self);\n                    __doubleCompleted = true;\n                }\n                break;\n            case 'disconnected':\n                terminateCallOnDisconnected();\n                self.eventEmitter.emit(EVENT_NAMES.ICEDisconnected, self);\n                break;\n            case 'failed':\n                self.eventEmitter.emit(EVENT_NAMES.ICEFailed, self);\n                break;\n        }\n    };\n\n    /*--------------------------------------------------------------------------------------------------------------------*/\n\n    var __ignoreReinviteDuplicates = false;\n\n    //Monkey patching sendReinvite for better Hold handling\n    var __sendReinvite = this.session.sendReinvite;\n    this.session.sendReinvite = function() {\n        __ignoreReinviteDuplicates = false;\n        var res = __sendReinvite.apply(this, arguments);\n        var __reinviteSucceeded = this.reinviteSucceeded,\n            __reinviteFailed = this.reinviteFailed;\n        this.reinviteSucceeded = function() {\n            self.eventEmitter.emit(EVENT_NAMES.callReinviteSucceeded, self);\n            return __reinviteSucceeded.apply(this, []);\n        };\n        this.reinviteFailed = function() {\n            self.eventEmitter.emit(EVENT_NAMES.callReinviteFailed, self);\n            return __reinviteFailed.apply(this, []);\n        };\n        return res;\n    };\n\n    /*--------------------------------------------------------------------------------------------------------------------*/\n\n    //Monkey patching receiveReinviteResponse to ignore duplicates which may break Hold/Unhold\n    var __receiveReinviteResponse = this.session.receiveReinviteResponse;\n    this.session.receiveReinviteResponse = function(response) {\n        switch (true) {\n            case /^2[0-9]{2}$/.test(response.status_code):\n                if (__ignoreReinviteDuplicates) {\n                    this.sendRequest(SIP.C.ACK, {cseq: response.cseq});\n                    return;\n                }\n                __ignoreReinviteDuplicates = true;\n                break;\n        }\n        return __receiveReinviteResponse.apply(this, arguments);\n    };\n\n    /*--------------------------------------------------------------------------------------------------------------------*/\n\n    //defining if the session is incoming or outgoing\n    if (this.type === PhoneLine.types.incoming) {\n        this.contact.name = this.session.request.from.uri.displayName;\n        this.contact.number = this.session.request.from.uri.user;\n\n    } else {\n        if (this.type === PhoneLine.types.outgoing) {\n            this.contact.name = this.session.request.to.uri.displayName;\n            this.contact.number = this.session.request.to.uri.user;\n        }\n    }\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nPhoneLine.types = {\n    incoming: 'incoming',\n    outgoing: 'outgoing'\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nPhoneLine.prototype.getId = function() {\n    return this.session.data.id;\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nPhoneLine.prototype.getSession = function() {\n    return this.session;\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nPhoneLine.prototype.cancel = function() {\n    return new Promise(function(resolve, reject) {\n        var session = this.getSession();\n        session.terminate({statusCode: 486});\n        return null;\n    });\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nPhoneLine.prototype.record = function(val) {\n    var self = this;\n    return new Promise(function(resolve, reject){\n        if (self.onCall) {\n            var message = !!val\n                ? self.controlSender.messages.startRecord\n                : self.controlSender.messages.stopRecord;\n\n            if ((self.onRecord && !val) || (!self.onRecord && val)) {\n                return self.controlSender.send(message)\n                    .then(function(data) {\n                        self.onRecord = !!val;\n                        return data;\n                    });\n            }\n        }\n        else {\n         throw new Error('No line or no active line');\n        }\n    });\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nPhoneLine.prototype.flip = function(target) {\n    var self = this;\n\n    return new Promise(function(resolve, reject){\n        if (!target) return;\n        if (self.onCall) {\n            return self.controlSender.send(self.controlSender.messages.flip, {\n                target: target\n            });\n        }\n        else {\n           throw new Error('No line or no active line');\n        }\n    });\n};\n\nPhoneLine.prototype.park = function() {\n\n    var self = this;\n    return new Promise(function(resolve, reject){\n        if (self.onCall) {\n            return self.controlSender.send(self.controlSender.messages.park);\n        }\n        else\n            throw new Error('No line or no active line');\n    });\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n// Explore ref: http://sipjs.com/api/0.6.0/session/#dtmftone-options\n\n//PhoneLine.prototype.sendDTMF = function(value, duration) {\n//    duration = parseInt(duration) || 1000;\n//    var peer = this.session.mediaHandler.peerConnection;\n//    var stream = this.session.getLocalStreams()[0];\n//    var dtmfSender = peer.createDTMFSender(stream.getAudioTracks()[0]);\n//    if (dtmfSender !== undefined && dtmfSender.canInsertDTMF) {\n//        dtmfSender.insertDTMF(value, duration);\n//    }\n//    return Promise.resolve(null);\n//};\n\nPhoneLine.prototype.sendDTMF = function(value, duration) {\n    var self = this;\n    return new Promise(function(resolve, reject){\n        if(self.onCall) {\n            duration = parseInt(duration) || 1000;\n            var peer = self.session.mediaHandler.peerConnection;\n            var stream = self.session.getLocalStreams()[0];\n            var dtmfSender = peer.createDTMFSender(stream.getAudioTracks()[0]);\n            if (dtmfSender !== undefined && dtmfSender.canInsertDTMF) {\n                dtmfSender.insertDTMF(value, duration);\n            }\n            return null;\n        }\n        else\n            throw new Error('No line or no active line');\n    });\n};\n\n\n\nPhoneLine.prototype.sendInfoDTMF = function(value, duration) {\n    duration = parseInt(duration) || 1000;\n    var session = this.session;\n    session.dtmf(value.toString(), {\n        duration: duration\n    });\n    return Promise.resolve(null);\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nPhoneLine.prototype.blindTransfer = function(target, options) {\n\n    var session = this.session;\n    var self = this;\n    var extraHeaders = [];\n    var originalTarget = target;\n    options = options || {};\n\n    return new Promise(function(resolve, reject){\n        //Blind Transfer is taken from SIP.js source\n\n        // Check Session Status\n        if (session.status !== SIP.Session.C.STATUS_CONFIRMED) {\n            throw new SIP.Exceptions.InvalidStateError(session.status);\n        }\n\n        // normalizeTarget allows instances of SIP.URI to pass through unaltered,\n        // so try to make one ahead of time\n        try {\n            target = SIP.Grammar.parse(target, 'Refer_To').uri || target;\n        } catch (e) {\n            session.logger.debug(\".refer() cannot parse Refer_To from\", target);\n            session.logger.debug(\"...falling through to normalizeTarget()\");\n        }\n\n        // Check target validity\n        target = session.ua.normalizeTarget(target);\n        if (!target) {\n            throw new TypeError('Invalid target: ' + originalTarget);\n        }\n\n        extraHeaders.push('Contact: ' + session.contact);\n        extraHeaders.push('Allow: ' + SIP.Utils.getAllowedMethods(session.ua));\n        extraHeaders.push('Refer-To: ' + target);\n\n        // Send the request\n        session.sendRequest(SIP.C.REFER, {\n            extraHeaders: extraHeaders,\n            body: options.body,\n            receiveResponse: function(response) {\n                var timeout = null;\n                if (response.status_code === 202) {\n                    var callId = response.call_id;\n\n                    function onNotify(request) {\n                        if (request.call_id === callId) {\n                            var body = request && request.body || '';\n                            switch (true) {\n                                case /1[0-9]{2}/.test(body):\n                                    request.reply(200);\n                                    break;\n                                case /2[0-9]{2}/.test(body):\n                                    self.session.terminate();\n                                    clearTimeout(timeout);\n                                    self.eventEmitter.off('SIP_NOTIFY', onNotify);\n                                    resolve();\n                                    break;\n                                default:\n                                    reject(body);\n                                    break;\n                            }\n                        }\n                    }\n\n                    timeout = setTimeout(function() {\n                        reject(new Error('Timeout: no reply'));\n                        self.eventEmitter.off('SIP_NOTIFY', onNotify);\n                    }, self.responseTimeout);\n                    self.eventEmitter.on('SIP_NOTIFY', onNotify);\n                }\n                else {\n                    reject(new Error('The response status code is: ' + response.status_code + ' (waiting for 202)'));\n                }\n            }\n        });\n\n    });\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nPhoneLine.prototype.transfer = function(target, options) {\n    var self = this;\n    return (self.onHold ? Promise.resolve(null) : self.setHold(true)).then(function(){ return delay(300); }).then(function() {\n        return self.blindTransfer(target, options);\n    });\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nPhoneLine.prototype.forward = function(target, options) {\n    var self = this, interval = null;\n    return self.answer().then(function() {\n        return new Promise(function(resolve, reject){\n            interval = setInterval(function() {\n                if (self.session.status === 12) {\n                    clearInterval(interval);\n                    self.setMute(true);\n                    setTimeout(function() {\n                        self.transfer(target, options);\n                        resolve();\n                    }, 700);\n                }\n            }, 50);\n        });\n    });\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n//ref: http://sipjs.com/api/0.6.0/session/#acceptoptions\n//make var option = {}\n\nPhoneLine.prototype.answer = function() {\n    var self = this;\n\n    return new Promise(function(resolve, reject){\n\n        function onAnswered() {\n            resolve();\n            self.eventEmitter.off(EVENT_NAMES.callStarted, onAnswered);\n            self.eventEmitter.off(EVENT_NAMES.callFailed, onFail);\n        }\n\n        function onFail(e) {\n            reject(e);\n            self.eventEmitter.off(EVENT_NAMES.callStarted, onAnswered);\n            self.eventEmitter.off(EVENT_NAMES.callFailed, onFail);\n        }\n\n        self.eventEmitter.on(EVENT_NAMES.callStarted, onAnswered);\n        self.eventEmitter.on(EVENT_NAMES.callFailed, onFail);\n\n        console.warn('emitting callProgress');\n        self.eventEmitter.emit(EVENT_NAMES.callProgress, self);\n\n        self.session.accept({\n            media: {\n                constraints: {audio: true, video: false},\n                render: {\n                    local: {\n                        audio: LOCAL_AUDIO\n                    },\n                    remote: {\n                        audio: REMOTE_AUDIO\n                    }\n                }\n            }\n        });\n\n    });\n\n};\n\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\n//FIXME: Use SIPJS mute() and unmute() ref: http://sipjs.com/api/0.7.0/session/#muteoptions\n\nPhoneLine.prototype.setMute = function(val) {\n    var self = this;\n    return new Promise(function(resolve, reject) {\n        self.muted = !!val;\n        if (self.onCall) {\n            setStreamMute(self.session.getLocalStreams()[0], self.muted);\n            val ? self.eventEmitter.emit(EVENT_NAMES.callMute, self) : self.eventEmitter.emit(EVENT_NAMES.callUnmute, self);\n        }\n        else\n            throw new Error('No line or no active line');\n    });\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\n//FIXME: Use SIPJS mute() and unmute() ref: http://sipjs.com/api/0.7.0/session/#muteoptions\n\nfunction setStreamMute(stream, val) {\n    var tracks = stream.getAudioTracks();\n    for (var i = 0; i < tracks.length; i++) {\n        tracks[i].enabled = !val;\n    }\n}\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\n////FIXME: Use SIPJS mute() and unmute() ref: http://sipjs.com/api/0.7.0/session/#muteoptions\n\nPhoneLine.prototype.setMuteBoth = function(val) {\n    var self = this;\n    return new Promise(function(resolve, reject) {\n        self.bothMuted = !!val;\n        self.muted = !!val;\n        if (self.onCall) {\n            setStreamMute(self.session.getLocalStreams()[0], self.bothMuted);\n            setStreamMute(self.session.getRemoteStreams()[0], self.bothMuted);\n            val ? self.eventEmitter.emit(EVENT_NAMES.callMute, self) : self.eventEmitter.emit(EVENT_NAMES.callUnmute, self);\n        }\n        else\n            throw new Error('No line or no active line');\n    });\n\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\n//FIXME: Explore send() ref: http://sipjs.com/api/0.7.0/transport/#sendmsg\n\n/* This is a direct and very tightly coupled code. Please, try to avoid using this method if possible */\nPhoneLine.prototype.sendRequest = function(method, body, options) {\n    var self = this;\n    options = options || {};\n\n    if (!this.session.dialog) return;\n\n    var request = new SIP.OutgoingRequest(\n        method,\n        self.session.dialog.remote_target,\n        self.session.ua,\n        {\n            cseq: options.cseq || (self.session.dialog.local_seqnum += 1),\n            call_id: self.session.dialog.id.call_id,\n            from_uri: self.session.dialog.local_uri,\n            from_tag: self.session.dialog.id.local_tag,\n            to_uri: self.session.dialog.remote_uri,\n            to_tag: self.session.dialog.id.remote_tag,\n            route_set: self.session.dialog.route_set,\n            statusCode: options.statusCode,\n            reasonPhrase: options.reasonPhrase\n        },\n        options.extraHeaders || [],\n        body || undefined\n    );\n\n    new SIP.RequestSender({\n        request: request,\n        onRequestTimeout: function() {\n            self.session.onRequestTimeout();\n        },\n        onTransportError: function() {\n            self.session.onTransportError();\n        },\n        receiveResponse: options.receiveResponse || function(response) {\n        }\n    }, self.session.ua).send();\n};\n\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\n//FIXME: should be replaced with __hold()\n//This can be removed\n//Legacy hold uses direct in-dialog messages to trick SIP.js, try to avoid using this method if possible\nPhoneLine.prototype.__legacyHold = function(val) {\n    var self = this;\n    self.onHold = !!val;\n    return new Promise(function(resolve, reject){\n        if (self.onCall && self.session.dialog) {\n            var body = self.session.mediaHandler.peerConnection.localDescription.sdp;\n            if (self.onHold) {\n                //body = body.replace(/c=IN IP4 \\d+\\.\\d+.\\d+.\\d+/, \"c=IN IP4 0.0.0.0\");\n                body = body.replace(/a=sendrecv/, \"a=sendonly\");\n                self.session.mediaHandler.hold();\n                self.session.onhold('local');\n            }\n            else {\n                self.session.mediaHandler.unhold();\n                self.session.onunhold('local');\n            }\n\n            self.sendRequest(SIP.C.INVITE, body, {\n                extraHeaders: [\n                    \"Content-Type: application/sdp\",\n                    \"Contact: \" + self.session.contact\n                ],\n                receiveResponse: function(response) {\n                    switch (true) {\n                        case /^1[0-9]{2}$/.test(response.status_code):\n                            break;\n                        case /^2[0-9]{2}$/.test(response.status_code):\n                            resolve();\n                            self.sendRequest(SIP.C.ACK, null, {\n                                cseq: response.cseq\n                            });\n                            break;\n                        default:\n                            reject('Status code is: ' + response.status_code);\n                            self.onHold = !self.onHold;\n                            break;\n                    }\n                }\n            });\n        }\n        else {\n            throw new Error('No line or no active line');\n        }\n    });\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\n\nPhoneLine.prototype.__hold = function(val) {\n    var self = this;\n    return new Promise(function(resolve, reject){\n        function onSucceeded() {\n            resolve();\n            self.eventEmitter.off(EVENT_NAMES.callReinviteFailed, onFailed);\n        }\n\n        function onFailed(e) {\n            reject(e);\n            self.eventEmitter.off(EVENT_NAMES.callReinviteSucceeded, onSucceeded);\n        }\n\n        self.eventEmitter.once(EVENT_NAMES.callReinviteSucceeded, onSucceeded);\n        self.eventEmitter.once(EVENT_NAMES.callReinviteFailed, onFailed);\n\n        val ? self.session.hold() : self.session.unhold();\n    });\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nPhoneLine.prototype.setHold = function(val) {\n    var self = this;\n\n    return new Promise(function(resolve, reject){\n        self.onHold = !!val;\n        if (self.onCall) {\n            promise = self.__hold(val).then(function() {\n                val ? self.eventEmitter.emit(EVENT_NAMES.callHold, self) : self.eventEmitter.emit(EVENT_NAMES.callUnhold, self);\n            }, function(e) {\n                self.onHold = !self.onHold;\n            });\n        }\n        else\n            throw new Error('No line or no active line');\n    });\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nPhoneLine.prototype.isOnHold = function() {\n    return this.onHold;\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nPhoneLine.prototype.isOnMute = function() {\n    return this.muted || this.bothMuted;\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nPhoneLine.prototype.isOnRecord = function() {\n    return this.onRecord;\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nPhoneLine.prototype.getContact = function() {\n    return this.contact;\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nPhoneLine.prototype.getCallDuration = function() {\n    if (this.timeCallStarted) {\n        return (new Date()).getTime() - this.timeCallStarted.getTime();\n    }\n    else {\n        return 0;\n    }\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nPhoneLine.prototype.isIncoming = function() {\n    return this.session.mediaHandler.peerConnection.signalingState !== \"closed\"\n        && !this.session.startTime;\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nPhoneLine.prototype.isClosed = function() {\n    return this.session.status === SIP.Session.C.STATUS_CANCELED || this.session.status === SIP.Session.C.STATUS_TERMINATED;\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nPhoneLine.prototype.hasEarlyMedia = function() {\n    return this.__hasEarlyMedia;\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nmodule.exports = PhoneLine;\n\n\n\n/***/ },\n/* 38 */\n/***/ function(module, exports) {\n\nmodule.exports = {\n\n    delay: function delay(ms) {\n        return new Promise(function(resolve, reject) {\n            setTimeout(resolve, ms);\n        });\n    },\n\n    defer: function defer() {\n        var deferred = {};\n        deferred.promise = new Promise(function(resolve, reject) {\n            deferred.resolve = resolve;\n            deferred.reject = reject;\n        });\n        return deferred;\n    },\n\n    extend: function extend(dst, src) {\n        src = src || {};\n        dst = dst || {};\n        Object.keys(src).forEach(function(k) {\n            dst[k] = src[k];\n        });\n        return dst;\n    },\n\n    copy: function(src){\n        return this.extend({}, src);\n    },\n\n    uuid: function uuid() {\n        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n            var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);\n            return v.toString(16);\n        });\n    }\n\n};\n\n/***/ },\n/* 39 */\n/***/ function(module, exports) {\n\nmodule.exports = {\n    'message': 'message',\n    'sipConnecting': 'sipConnecting',\n    'sipConnected': 'sipConnected',\n    'sipDisconnected': 'sipDisconnected',\n    'sipRegistered': 'sipRegistered',\n    'sipUnRegistered': 'sipUnregistered',\n    'sipRegistrationFailed': 'sipRegistrationFailed',\n    'incomingCall': 'incomingCall',                     //when incoming call is received\n    'sipIncomingCall': 'sipIncomingCall',               //same as incomingCall\n    'outgoingCall': 'outgoingCall',                     //when the outbound call is initiated\n    'callConnecting': 'callConnecting',                 //when ICE gathering is started\n    'callProgress': 'callProgress',                     //when 1xx provisional message is received (outbound only) or call is accepted, but ACK is still not sent (inbound only)\n    'callStarted': 'callStarted',                       //when ACK is sent\n    'callRejected': 'callRejected',                     //when the call is rejected by its party\n    'callEnded': 'callEnded',                           //when the call had ended without errors (BYE)\n    'callTerminated': 'callTerminated',                 //when the media is terminated, UNSTABLE in SIP.js 0.6.x\n    'callFailed': 'callFailed',                         //when the call is failed because of many different reasons (connection issues, 4xx errors, etc.)\n    'callHold': 'callHold',                             //when the call is put on hold\n    'callUnhold': 'callUnhold',                         //when the call is unholded\n    'callMute': 'callMute',                             //when the call is muted\n    'callUnmute': 'callUnmute',                         //when the call is unmuted\n    'callReplaced': 'callReplaced',                     //when the call has been replaced by an incoming invite\n    'sipRTCSession': 'sipRTCSession',\n    'sipConnectionFailed': 'sipConnectionFailed',\n    'ICEConnected': 'ICEConnected',\n    'ICECompleted': 'ICECompleted',\n    'ICEFailed': 'ICEFailed',\n    'ICEChecking': 'ICEChecking',\n    'ICEClosed': 'ICEClosed',\n    'ICEDisconnected': 'ICEDisconnected',\n    'callReinviteSucceeded': 'callReinviteSucceeded',\n    'callReinviteFailed': 'callReinviteFailed'\n};\n\n\n/***/ },\n/* 40 */\n/***/ function(module, exports, __webpack_require__) {\n\nvar uuid = __webpack_require__(38).uuid;\n\nfunction DomAudio(){\n\n    /*\n     * We create audio containers here\n     * Sorry for DOM manipulations inside a service, but it is for the good :)\n     */\n    var LOCAL_AUDIO = document.createElement('video'),\n        REMOTE_AUDIO = document.createElement('video'),\n        LOCAL_AUDIO_ID = 'local_' + uuid(),\n        REMOTE_AUDIO_ID = 'remote_' + uuid();\n\n    LOCAL_AUDIO.setAttribute('id', LOCAL_AUDIO_ID);\n    LOCAL_AUDIO.setAttribute('autoplay', 'true');\n    LOCAL_AUDIO.setAttribute('hidden', 'true');\n    LOCAL_AUDIO.setAttribute('muted', '');\n\n    REMOTE_AUDIO.setAttribute('id', REMOTE_AUDIO_ID);\n    REMOTE_AUDIO.setAttribute('autoplay', 'true');\n    REMOTE_AUDIO.setAttribute('hidden', 'true');\n\n    document.body.appendChild(LOCAL_AUDIO);\n    document.body.appendChild(REMOTE_AUDIO);\n\n    LOCAL_AUDIO.volume = 0;\n\n    this.localAudio = LOCAL_AUDIO;\n    this.remoteAudio = REMOTE_AUDIO;\n    this.localAudioId = LOCAL_AUDIO_ID;\n    this.remoteAudioId = REMOTE_AUDIO_ID;\n\n}\n\nmodule.exports = DomAudio;\n\n/***/ },\n/* 41 */\n/***/ function(module, exports, __webpack_require__) {\n\n'use strict';\n\nvar audio = __webpack_require__(42);\n\n/**\n * @param {WebPhone} rcSIPUA\n * @param options\n * @constructor\n */\nfunction AudioHelper(rcSIPUA, options) {\n\n    var self = this;\n\n    options = options || {};\n\n    this._rcSIPUA = rcSIPUA;\n    this._incoming = options.incoming || 'audio/incoming.ogg';\n    this._outgoing = options.outgoing || 'audio/outgoing.ogg';\n    this._audio = {};\n\n    rcSIPUA.on(rcSIPUA.events.incomingCall, function() {\n        self.playIncoming(true);\n    });\n\n    rcSIPUA.on(rcSIPUA.events.outgoingCall, function() {\n        self.playOutgoing(true);\n    });\n\n    rcSIPUA.on(rcSIPUA.events.callProgress, function(session) {\n        if (session.hasEarlyMedia()) {\n            self.playOutgoing(false);\n        }\n    });\n\n    rcSIPUA.on([rcSIPUA.events.callStarted, rcSIPUA.events.callRejected, rcSIPUA.events.callEnded, rcSIPUA.events.callFailed], function() {\n        self.playIncoming(false);\n        self.playOutgoing(false);\n    });\n\n}\n\nAudioHelper.prototype._playSound = function(url, val, volume) {\n\n    if (!this._audio[url]) {\n        if (val) {\n            volume !== undefined && (audio.volume = volume);\n            this._audio[url] = audio.play(url, {loop: true});\n        }\n    } else {\n        if (val) {\n            this._audio[url].reset();\n        }\n        else {\n            this._audio[url].stop();\n        }\n    }\n\n};\n\nAudioHelper.prototype.playIncoming = function(val) {\n    this._playSound(this._incoming, val, 0.5);\n};\n\nAudioHelper.prototype.playOutgoing = function(val) {\n    this._playSound(this._outgoing, val, 1);\n};\n\nmodule.exports = AudioHelper;\n\n\n\n/***/ },\n/* 42 */\n/***/ function(module, exports, __webpack_require__) {\n\nvar error = console.error;\nvar EventEmitter = __webpack_require__(35);\n\nmodule.exports = {\n\n    play: function(url, options) {\n\n        var emitter = new EventEmitter();\n\n        var audio = new Audio();\n\n        audio.volume = 1;\n\n        audio.addEventListener(\"timeupdate\", function(event) {\n            emitter.emit('progress', {\n                duration: audio.duration,\n                progress: audio.currentTime / audio.duration\n            });\n        });\n\n        audio.addEventListener(\"seeked\", function(event) {\n            emitter.emit('progress', {\n                    duration: audio.duration,\n                    progress: audio.currentTime / audio.duration\n            });\n        });\n        audio.addEventListener(\"ended\", function(event) {\n            emitter.emit('ended');\n        });\n        audio.addEventListener(\"pause\", function(event) {\n            emitter.emit('progress', {\n                    duration: audio.duration,\n                    paused: true,\n                    progress: audio.currentTime / audio.duration\n            });\n        });\n        audio.addEventListener(\"play\", function(event) {\n            emitter.emit('progress', {\n                    duration: audio.duration,\n                    resumed: true,\n                    progress: audio.currentTime / audio.duration\n            });\n        });\n        audio.addEventListener(\"error\", function() {\n            console.log(\"error\", audio.error); //FIXME\n            emitter.emit('error', audio.error);\n        });\n\n        emitter.stop = audio.pause.bind(audio);\n        emitter.pause = audio.pause.bind(audio);\n        emitter.resume = audio.play.bind(audio);\n        emitter.reset = function() {\n            audio.currentTime = 0;\n            audio.play();\n        };\n\n        emitter.duration = function() {\n            return Math.ceil(audio.duration);\n        };\n\n        audio.src = url;\n        audio.load(url);\n\n        if (options) { //FIXME angular.isObject\n            for (var prop in options) {\n                if (prop in audio) {\n                    audio[prop] = options[prop];\n                }\n            }\n        }\n\n        audio.play();\n\n        return emitter;\n\n    }\n};\n\n/***/ }\n/******/ ])\n});\n;\n"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 9a07dc903d9c4c4a228c\n **/","var SIP = require('sip.js');\nvar EventEmitter = require('./emitter');\nvar UserAgent = require('./userAgent');\nvar PhoneLine = require('./phoneLine');\nvar AudioHelper = require('./audioHelper');\nvar defer = require('./utils').defer;\nvar uuid = require('./utils').uuid;\nvar extend = require('./utils').extend;\nvar EVENT_NAMES = require('./eventNames');\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n/*--------------------------------------------------------------------------------------------------------------------*/\n\n//Patching proto because of https://developers.google.com/web/updates/2015/07/mediastream-deprecations\nvar mediaStreamManagerProto = Object.create(SIP.WebRTC.MediaStreamManager.prototype, {\n    'release': {\n        value: function release(stream) {\n            var streamId = SIP.WebRTC.MediaStreamManager.streamId(stream);\n            if (this.acquisitions[streamId] === false) {\n                //MediaStream.stop removed in M47\n                if (typeof (stream.stop) === 'function') {\n                    stream.stop();\n                }\n                else {\n                    stream.getTracks().forEach(function(track) {\n                        track.stop()\n                    });\n                }\n            }\n            delete this.acquisitions[streamId];\n        }\n    }\n});\n\nSIP.WebRTC.MediaStreamManager.prototype = mediaStreamManagerProto;\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n/*--------------------------------------------------------------------------------------------------------------------*/\n\n/**\n * @namespace RingCentral\n * @param {boolean} [options.audioHelper] Automatically create audio helper\n * @param {string} [options.uuid] Instance ID\n * @constructor\n */\nfunction WebPhone(options) {\n\n    options = options || {};\n\n    var service = this;\n\n    this.__registerDeferred = undefined;\n    this.__unregisterDeferred = undefined;\n    this.__callDeferred = undefined;\n    this.__sipRegistered = false;\n    this.__sipOutboundEnabled = false;\n\n    if (options.uuid) {\n        this.uuid = options.uuid;\n    } else {\n        localStorage['rc-webPhone-uuid'] = localStorage['rc-webPhone-uuid'] || uuid();\n        this.uuid = localStorage['rc-webPhone-uuid'];\n    }\n\n    this.activeLine = null;\n\n    this.onMute = false;\n    this.onHold = false;\n    this.onRecord = false;\n    this.contact = undefined;\n\n    var ua = new UserAgent();\n\n    this.ua = ua;\n    this.on = ua.on.bind(ua);\n\n    this.username = null;\n\n    this.isRegistered = false;\n    this.isRegistering = false;\n    this.isUnregistering = false;\n\n    this.events = EVENT_NAMES;\n\n    this.causes = SIP.C.causes;\n    this.reasons = SIP.C.REASON_PHRASE;\n\n    //naming convention: incoming or sipincoming?\n    service.on(EVENT_NAMES.sipIncomingCall, function(line) {\n        service.ua.eventEmitter.emit(EVENT_NAMES.incomingCall, line);\n    });\n\n    //naming convention: outgoing or sipoutgoing?\n    service.on(EVENT_NAMES.outgoingCall, function(line) {\n        if (service.activeLine && !service.activeLine.isOnHold()) {\n            service.activeLine.setHold();\n        }\n        service.__callDeferred && service.__callDeferred.resolve(line);\n        service.__callDeferred = null;\n    });\n\n    //naming convention: call or line?\n    service.on([EVENT_NAMES.callEnded, EVENT_NAMES.callFailed], function(call) {\n        //delete activeLine property if the call has ended on the other side\n        if (call && service.activeLine && call === service.activeLine) {\n            service.activeLine = null;\n        }\n    });\n\n    // On Call Failed due to 503 Invite Connection error reconnect the call\n    service.on(EVENT_NAMES.callFailed, function(call, response, cause) {\n        if (response) {\n            switch (true) {\n                //[WRTC-424] Should reconnect the websocket if received 503 on INVITE\n                case (/^503$/.test(response.status_code)):\n                    //This method will throw 'Connection Error', so we just remove it\n                    call.session.onTransportError = function() {};\n                    //Re-register after 500ms\n                    setTimeout(service.reregister.bind(service, true), 500);\n                    break;\n            }\n        }\n    });\n\n\n    // Setting flags for SIP Registration process\n    service.on(EVENT_NAMES.sipRegistered, function(e) {\n        service.__sipRegistered = true;\n        service.__registerDeferred && service.__registerDeferred.resolve(e);\n        service.isRegistered = true;\n        service.isRegistering = false;\n        service.isUnregistering = false;\n        service.isUnregistered = false;\n    });\n\n    service.on([EVENT_NAMES.sipRegistrationFailed, EVENT_NAMES.sipConnectionFailed], function(e) {\n        service.__sipRegistered = false;\n        service.__registerDeferred && service.__registerDeferred.reject(e);\n        service.isRegistered = false;\n        service.isRegistering = false;\n        service.isUnregistering = false;\n        service.isUnregistered = false;\n    });\n\n    service.on(EVENT_NAMES.sipUnRegistered, function(e) {\n        service.__sipRegistered = false;\n        service.__unregisterDeferred && service.__unregisterDeferred.resolve(e);\n        service.isRegistered = false;\n        service.isRegistering = false;\n        service.isUnregistered = true;\n        service.isUnregistering = false;\n    });\n\n    window.addEventListener('unload', function() {\n        service.hangup();\n        service.unregister();\n    });\n\n    this._audioHelper = null;\n    if (options.audioHelper) service.createAudioHelper();\n\n}\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nWebPhone.version = '0.1.0';\n\nWebPhone.PhoneLine = PhoneLine;\nWebPhone.EventEmitter = EventEmitter;\nWebPhone.UserAgent = UserAgent;\nWebPhone.AudioHelper = AudioHelper;\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\n/**\n * @param [options]\n * @return {AudioHelper}\n */\nWebPhone.prototype.createAudioHelper = function(options) {\n    if (!this._audioHelper) {\n        console.log('Helper Created');\n        this._audioHelper = new AudioHelper(this, options);\n    }\n    return this._audioHelper;\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nWebPhone.prototype.register = function(info, checkFlags) {\n\n    try {\n        var service = this;\n\n        // console.log(\"Sip Data\"+JSON.stringify(data));\n\n        if (!checkFlags || (\n            typeof(info.sipFlags) === 'object' &&\n                //checking for undefined for platform v7.3, which doesn't support this flag\n            (info.sipFlags.outboundCallsEnabled === undefined || info.sipFlags.outboundCallsEnabled === true))\n        ) {\n\n            // Access SIP flags\n            this.__sipOutboundEnabled = info.sipFlags.outboundCallsEnabled;\n\n            // console.log('SIP Provision data', data+'\\n');\n            info = info.sipInfo[0];\n\n        } else {\n            throw new Error('ERROR.sipOutboundNotAvailable'); //FIXME Better error reporting...\n        }\n\n        var headers = [];\n        var endpointId = this.uuid;\n        if (endpointId) {\n            headers.push('P-rc-endpoint-id: ' + endpointId);\n        }\n\n        extend(info, {\n            extraHeaders: headers\n        });\n\n        if (service.isRegistered) {\n            console.warn('Already registered, please unregister the UA first');\n            return service.__registerDeferred.promise;\n        }\n\n        if (service.isRegistering) {\n            console.warn('Already registering the UA');\n            return service.__registerDeferred.promise;\n        }\n\n        service.__registerDeferred = defer();\n        service.isRegistering = true;\n        service.isRegistered = false;\n\n        //compatability properties\n        info.wsServers = info.outboundProxy && info.transport\n            ? info.transport.toLowerCase() + '://' + info.outboundProxy\n            : info.wsServers;\n        info.domain = info.domain || info.sipDomain;\n        info.username = info.username || info.userName;\n        info.extraHeaders = Array.isArray(info.extraHeaders) ? info.extraHeaders : [];\n\n        var options = {\n            wsServers: info.wsServers,\n            uri: \"sip:\" + info.username + \"@\" + info.domain,\n            password: info.password,\n            authorizationUser: info.authorizationId,\n            traceSip: true,\n            stunServers: info.stunServers || ['stun:74.125.194.127:19302'],\n            turnServers: [],\n            log: {\n                level: 1 //FIXME LOG LEVEL 3\n            },\n            domain: info.domain,\n            autostart: false,   //turn off autostart on UA creation\n            register: false,     //turn off auto register on UA creation,\n            iceGatheringTimeout: info.iceGatheringTimeout || 3000\n        };\n\n        service.username = info.userName;\n        service.ua.setSIPConfig(options);\n        service.ua.start({\n            extraHeaders: info.extraHeaders\n        });\n    }\n    catch (e) {\n        service.isRegistering = false;\n        service.isRegistered = false;\n        return Promise.reject(e);\n    }\n\n    return service.__registerDeferred.promise;\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nWebPhone.prototype.reregister = function(reconnect) {\n    var service = this;\n    if (service.isRegistering) return service.__registerDeferred;\n    service.__registerDeferred = defer();\n    service.isRegistering = true;\n    service.ua.reregister({}, !!reconnect);\n    return service.__registerDeferred.promise;\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nWebPhone.prototype.unregister = function() {\n    var service = this;\n    if (service.isRegistering) {\n        service.ua.forceDisconnect();\n        service.isRegistering = false;\n        service.isUnregistering = false;\n        service.isRegistered = false;\n        service.isUnregistered = true;\n    }\n\n    if (service.isUnregistered || service.isUnregistering) return service.__unregisterDeferred;\n\n    service.isUnregistering = true;\n    service.isUnregistered = false;\n\n    service.__unregisterDeferred = defer();\n    if (service.__sipRegistered) {\n        service.ua.stop();\n    }\n    else {\n        service.__unregisterDeferred.resolve(null);\n    }\n    return service.__unregisterDeferred.promise.catch(function() {\n        return null;\n    });\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nWebPhone.prototype.forceDisconnect = function() {\n    this.ua.forceDisconnect();\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nWebPhone.prototype.call = function(toNumber, fromNumber, country) {\n\n    var service = this;\n    if(!this.__sipOutboundEnabled || false === Boolean(this.__sipOutboundEnabled)) {\n        throw new Error('Outbound calling is disabled'); // TODO: Fix this to be more robust error messaging\n    }\n\n    if(!toNumber)\n        throw new Error('Invalid or undefined [toNumber]');\n\n    if (!service.__callDeferred) {\n        service.__callDeferred = defer();\n        this.activeLine = service.ua.call.call(service.ua, toNumber, {\n            fromNumber: fromNumber,\n            country: country\n        });\n    }\n    return service.__callDeferred;\n};\n\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nWebPhone.prototype.answer = function(line) {\n        var incomingLines = this.ua.getIncomingLinesArray();\n        var activeLines = this.ua.getActiveLinesArray();\n        var self = this;\n\n        if (!line) {\n            line = incomingLines.length > 0 && arr[0];\n        }\n\n        if (line) {\n            var promises = [];\n            activeLines.forEach(function(activeLine) {\n                if (activeLine !== line) {\n                    !activeLine.isOnHold() && promises.push(activeLine.setHold(true));\n                }\n            });\n            Promise.all(promises).then(function() {\n                self.activeLine = line;\n                self.ua.answer(line);\n            }, function(e) {\n                self.hangup(line);\n            });\n        }\n\n        return Promise.resolve(null);\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nWebPhone.prototype.onCall = function() {\n    return this.ua.getActiveLinesArray().filter(function(line) {\n            return line.onCall;\n        }).length > 0;\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n/***\n * deprecated\n * @param line\n * @returns {*}\n */\nWebPhone.prototype.hangup = function(line) {\n    var self = this;\n    return new Promise(function(resolve, reject){\n        line = self.getLine(line);\n        self.ua.hangup(line);\n        if (line === self.activeLine) self.activeLine = null;\n        return null;\n    });\n};\n\nWebPhone.prototype.getLine = function(line) {\n    if (!line) line = this.activeLine;\n    if (!line) throw new Error('No line or no active line');\n    return line;\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\n//FIXME: Check if we can replace this with  SIPJS dtmf(tone,[options]) ref: http://sipjs.com/api/0.7.0/session/#dtmftone-options\n/***\n * deprecated\n * @param value\n * @param line\n * @returns {*}\n */\nWebPhone.prototype.sendDTMF = function(value, line) {\n    var self = this;\n    return new Promise(function(resolve, reject){\n        line = self.getLine(line);\n        line && line.sendDTMF.call(line, value);\n        return null;\n    });\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n/***\n * deprecated\n * @param line\n * @returns {*}\n */\nWebPhone.prototype.hold = function(line) {\n    var self = this;\n    return new Promise(function(resolve, reject){\n        line = self.getLine(line);\n        line && line.setHold(true);\n        if (line === self.activeLine) self.activeLine = null;\n        return null;\n    });\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n/***\n * deprecated\n * @param line\n * @returns {*}\n */\nWebPhone.prototype.unhold = function(line) {\n    var self = this;\n    return new Promise(function(resolve, reject){\n        line = self.getLine(line);\n        if (line) {\n            self.ua.getActiveLinesArray().forEach(function (activeLine) {\n                if (activeLine !== line && !activeLine.isIncoming() && !activeLine.isOnHold()) {\n                    activeLine.setHold(true);\n                }\n            });\n            line.setHold(false);\n            self.activeLine = line;\n        }\n        return null;\n    });\n};\n\n////FIXME: Use SIPJS mute() and unmute() ref:http://sipjs.com/api/0.7.0/session/#muteoptions\n/*--------------------------------------------------------------------------------------------------------------------*/\n/***\n * deprecated\n * @param line\n * @returns {*}\n */\nWebPhone.prototype.mute = function(line) {\n    var self = this;\n    return new Promise(function(resolve, reject){\n        line = self.getLine(line);\n        line && line.setMute(true);\n        return null;\n    });\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n/***\n * deprecated\n * @param line\n * @returns {*}\n */\nWebPhone.prototype.unmute = function(line) {\n    var self = this;\n    return new Promise(function(resolve, reject){\n        line = self.getLine(line);\n        line && line.setMute(false);\n        return null;\n    });\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n/***\n * deprecated\n * @param line\n * @param target\n * @param options\n * @returns {*}\n */\n//Phone-line->transfer->blindTransfer\nWebPhone.prototype.transfer = function(line, target, options) {\n    var self = this;\n    return new Promise(function(resolve, reject){\n        line = self.getLine(line);\n        line && line.transfer(target, options);\n        if (line === self.activeLine) self.activeLine = null;\n        return null;\n    });\n};\n\nmodule.exports = WebPhone;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/index.js\n ** module id = 1\n ** module chunks = 0\n **/","/**\n * @name SIP\n * @namespace\n */\nmodule.exports = (function(window) {\n  \"use strict\";\n\n  var SIP = {};\n\n  var pkg = require('../package.json');\n\n  Object.defineProperties(SIP, {\n    version: {\n      get: function(){ return pkg.version; }\n    },\n    name: {\n      get: function(){ return pkg.title; }\n    }\n  });\n\n  require('./Utils.js')(SIP);\n  var Logger = require('./Logger.js');\n  SIP.LoggerFactory = require('./LoggerFactory.js')(window, Logger);\n  require('./EventEmitter.js')(SIP);\n  SIP.C = require('./Constants.js')(SIP.name, SIP.version);\n  SIP.Exceptions = require('./Exceptions.js');\n  SIP.Timers = require('./Timers.js')(window);\n  require('./Transport.js')(SIP, window);\n  require('./Parser.js')(SIP);\n  require('./SIPMessage.js')(SIP);\n  require('./URI.js')(SIP);\n  require('./NameAddrHeader.js')(SIP);\n  require('./Transactions.js')(SIP, window);\n  var DialogRequestSender = require('./Dialog/RequestSender.js')(SIP, window);\n  require('./Dialogs.js')(SIP, DialogRequestSender);\n  require('./RequestSender.js')(SIP);\n  require('./RegisterContext.js')(SIP, window);\n  SIP.MediaHandler = require('./MediaHandler.js')(SIP.EventEmitter);\n  require('./ClientContext.js')(SIP);\n  require('./ServerContext.js')(SIP);\n  var SessionDTMF = require('./Session/DTMF.js')(SIP);\n  require('./Session.js')(SIP, window, SessionDTMF);\n  require('./Subscription.js')(SIP, window);\n  var WebRTCMediaHandler = require('./WebRTC/MediaHandler.js')(SIP);\n  var WebRTCMediaStreamManager = require('./WebRTC/MediaStreamManager.js')(SIP);\n  SIP.WebRTC = require('./WebRTC.js')(SIP.Utils, window, WebRTCMediaHandler, WebRTCMediaStreamManager);\n  require('./UA.js')(SIP, window);\n  SIP.Hacks = require('./Hacks.js')(SIP);\n  require('./SanityCheck.js')(SIP);\n  SIP.DigestAuthentication = require('./DigestAuthentication.js')(SIP.Utils);\n  SIP.Grammar = require('./Grammar/dist/Grammar')(SIP);\n\n  return SIP;\n})((typeof window !== 'undefined') ? window : global);\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/sip.js/src/SIP.js\n ** module id = 2\n ** module chunks = 0\n **/","module.exports = {\n\t\"_args\": [\n\t\t[\n\t\t\t\"sip.js@0.6.4\",\n\t\t\t\"/Users/vyshakh.babji/Desktop/WebRTC/kirill-webphone/web-phone-1\"\n\t\t]\n\t],\n\t\"_from\": \"sip.js@0.6.4\",\n\t\"_id\": \"sip.js@0.6.4\",\n\t\"_inCache\": true,\n\t\"_installable\": true,\n\t\"_location\": \"/sip.js\",\n\t\"_npmUser\": {\n\t\t\"email\": \"eric.green@onsip.com\",\n\t\t\"name\": \"egreen_onsip\"\n\t},\n\t\"_npmVersion\": \"1.4.13\",\n\t\"_phantomChildren\": {},\n\t\"_requested\": {\n\t\t\"name\": \"sip.js\",\n\t\t\"raw\": \"sip.js@0.6.4\",\n\t\t\"rawSpec\": \"0.6.4\",\n\t\t\"scope\": null,\n\t\t\"spec\": \"0.6.4\",\n\t\t\"type\": \"version\"\n\t},\n\t\"_requiredBy\": [\n\t\t\"/\"\n\t],\n\t\"_resolved\": \"https://registry.npmjs.org/sip.js/-/sip.js-0.6.4.tgz\",\n\t\"_shasum\": \"e080d4b0fa1a7dd803741d6bca6d32c29ae37380\",\n\t\"_shrinkwrap\": null,\n\t\"_spec\": \"sip.js@0.6.4\",\n\t\"_where\": \"/Users/vyshakh.babji/Desktop/WebRTC/kirill-webphone/web-phone-1\",\n\t\"author\": {\n\t\t\"email\": \"will@onsip.com\",\n\t\t\"name\": \"Will Mitchell\"\n\t},\n\t\"bugs\": {\n\t\t\"url\": \"https://github.com/onsip/SIP.js/issues\"\n\t},\n\t\"contributors\": [\n\t\t{\n\t\t\t\"url\": \"http://sipjs.com/authors/\"\n\t\t}\n\t],\n\t\"dependencies\": {},\n\t\"description\": \"A simple, intuitive, and powerful JavaScript signaling library\",\n\t\"devDependencies\": {\n\t\t\"browserify\": \"^4.1.8\",\n\t\t\"grunt\": \"~0.4.0\",\n\t\t\"grunt-browserify\": \"^2.1.0\",\n\t\t\"grunt-cli\": \"~0.1.6\",\n\t\t\"grunt-contrib-copy\": \"^0.5.0\",\n\t\t\"grunt-contrib-jasmine\": \"~0.6.0\",\n\t\t\"grunt-contrib-jshint\": \">0.5.0\",\n\t\t\"grunt-contrib-uglify\": \"~0.2.0\",\n\t\t\"grunt-peg\": \"~1.3.1\",\n\t\t\"grunt-trimtrailingspaces\": \"^0.4.0\",\n\t\t\"node-minify\": \"~0.7.2\",\n\t\t\"pegjs\": \"0.8.0\",\n\t\t\"sdp-transform\": \"~0.4.0\"\n\t},\n\t\"directories\": {},\n\t\"dist\": {\n\t\t\"shasum\": \"e080d4b0fa1a7dd803741d6bca6d32c29ae37380\",\n\t\t\"tarball\": \"http://registry.npmjs.org/sip.js/-/sip.js-0.6.4.tgz\"\n\t},\n\t\"engines\": {\n\t\t\"node\": \">=0.8\"\n\t},\n\t\"gitHead\": \"209fb9bb50f1918522d37a002b83f21abd6946ab\",\n\t\"homepage\": \"http://sipjs.com\",\n\t\"keywords\": [\n\t\t\"javascript\",\n\t\t\"library\",\n\t\t\"sip\",\n\t\t\"webrtc\",\n\t\t\"websocket\"\n\t],\n\t\"license\": \"MIT\",\n\t\"main\": \"src/SIP.js\",\n\t\"maintainers\": [\n\t\t{\n\t\t\t\"name\": \"joseph-onsip\",\n\t\t\t\"email\": \"joseph@onsip.com\"\n\t\t},\n\t\t{\n\t\t\t\"name\": \"egreen_onsip\",\n\t\t\t\"email\": \"eric.green@onsip.com\"\n\t\t}\n\t],\n\t\"name\": \"sip.js\",\n\t\"optionalDependencies\": {},\n\t\"readme\": \"ERROR: No README data found!\",\n\t\"repository\": {\n\t\t\"type\": \"git\",\n\t\t\"url\": \"git+https://github.com/onsip/SIP.js.git\"\n\t},\n\t\"scripts\": {\n\t\t\"test\": \"grunt travis --verbose\"\n\t},\n\t\"title\": \"SIP.js\",\n\t\"version\": \"0.6.4\"\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/sip.js/package.json\n ** module id = 3\n ** module chunks = 0\n **/","/**\n * @fileoverview Utils\n */\n\nmodule.exports = function (SIP) {\nvar Utils;\n\nUtils= {\n\n  augment: function (object, constructor, args, override) {\n    var idx, proto;\n\n    // Add public properties from constructor's prototype onto object\n    proto = constructor.prototype;\n    for (idx in proto) {\n      if (override || object[idx] === undefined) {\n        object[idx] = proto[idx];\n      }\n    }\n\n    // Construct the object as though it were just created by constructor\n    constructor.apply(object, args);\n  },\n\n  optionsOverride: function (options, winner, loser, isDeprecated, logger, defaultValue) {\n    if (isDeprecated && options[loser]) {\n      logger.warn(loser + ' is deprecated, please use ' + winner + ' instead');\n    }\n\n    if (options[winner] && options[loser]) {\n      logger.warn(winner + ' overriding ' + loser);\n    }\n\n    options[winner] = options[winner] || options[loser] || defaultValue;\n  },\n\n  desugarSessionOptions: function desugarSessionOptions (options) {\n    if (global.HTMLMediaElement && options instanceof global.HTMLMediaElement) {\n      options = {\n        media: {\n          constraints: {\n            audio: true,\n            video: options.tagName === 'VIDEO'\n          },\n          render: {\n            remote: {\n              video: options\n            }\n          }\n        }\n      };\n    }\n    return options;\n  },\n\n  str_utf8_length: function(string) {\n    return encodeURIComponent(string).replace(/%[A-F\\d]{2}/g, 'U').length;\n  },\n\n  getPrefixedProperty: function (object, name) {\n    if (object == null) {\n      return;\n    }\n    var capitalizedName = name.charAt(0).toUpperCase() + name.slice(1);\n    var prefixedNames = [name, 'webkit' + capitalizedName, 'moz' + capitalizedName];\n    for (var i in prefixedNames) {\n      var property = object[prefixedNames[i]];\n      if (property) {\n        return property;\n      }\n    }\n  },\n\n  generateFakeSDP: function(body) {\n    if (!body) {\n      return;\n    }\n\n    var start = body.indexOf('o=');\n    var end = body.indexOf('\\r\\n', start);\n\n    return 'v=0\\r\\n' + body.slice(start, end) + '\\r\\ns=-\\r\\nt=0 0\\r\\nc=IN IP4 0.0.0.0';\n  },\n\n  isFunction: function(fn) {\n    if (fn !== undefined) {\n      return Object.prototype.toString.call(fn) === '[object Function]';\n    } else {\n      return false;\n    }\n  },\n\n  isDecimal: function (num) {\n    return !isNaN(num) && (parseFloat(num) === parseInt(num,10));\n  },\n\n  createRandomToken: function(size, base) {\n    var i, r,\n      token = '';\n\n    base = base || 32;\n\n    for( i=0; i < size; i++ ) {\n      r = Math.random() * base|0;\n      token += r.toString(base);\n    }\n\n    return token;\n  },\n\n  newTag: function() {\n    return SIP.Utils.createRandomToken(SIP.UA.C.TAG_LENGTH);\n  },\n\n  // http://stackoverflow.com/users/109538/broofa\n  newUUID: function() {\n    var UUID =  'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n      var r = Math.random()*16|0, v = c === 'x' ? r : (r&0x3|0x8);\n      return v.toString(16);\n    });\n\n    return UUID;\n  },\n\n  hostType: function(host) {\n    if (!host) {\n      return;\n    } else {\n      host = SIP.Grammar.parse(host,'host');\n      if (host !== -1) {\n        return host.host_type;\n      }\n    }\n  },\n\n  /**\n  * Normalize SIP URI.\n  * NOTE: It does not allow a SIP URI without username.\n  * Accepts 'sip', 'sips' and 'tel' URIs and convert them into 'sip'.\n  * Detects the domain part (if given) and properly hex-escapes the user portion.\n  * If the user portion has only 'tel' number symbols the user portion is clean of 'tel' visual separators.\n  * @private\n  * @param {String} target\n  * @param {String} [domain]\n  */\n  normalizeTarget: function(target, domain) {\n    var uri, target_array, target_user, target_domain;\n\n    // If no target is given then raise an error.\n    if (!target) {\n      return;\n    // If a SIP.URI instance is given then return it.\n    } else if (target instanceof SIP.URI) {\n      return target;\n\n    // If a string is given split it by '@':\n    // - Last fragment is the desired domain.\n    // - Otherwise append the given domain argument.\n    } else if (typeof target === 'string') {\n      target_array = target.split('@');\n\n      switch(target_array.length) {\n        case 1:\n          if (!domain) {\n            return;\n          }\n          target_user = target;\n          target_domain = domain;\n          break;\n        case 2:\n          target_user = target_array[0];\n          target_domain = target_array[1];\n          break;\n        default:\n          target_user = target_array.slice(0, target_array.length-1).join('@');\n          target_domain = target_array[target_array.length-1];\n      }\n\n      // Remove the URI scheme (if present).\n      target_user = target_user.replace(/^(sips?|tel):/i, '');\n\n      // Remove 'tel' visual separators if the user portion just contains 'tel' number symbols.\n      if (/^[\\-\\.\\(\\)]*\\+?[0-9\\-\\.\\(\\)]+$/.test(target_user)) {\n        target_user = target_user.replace(/[\\-\\.\\(\\)]/g, '');\n      }\n\n      // Build the complete SIP URI.\n      target = SIP.C.SIP + ':' + SIP.Utils.escapeUser(target_user) + '@' + target_domain;\n\n      // Finally parse the resulting URI.\n      if (uri = SIP.URI.parse(target)) {\n        return uri;\n      } else {\n        return;\n      }\n    } else {\n      return;\n    }\n  },\n\n  /**\n  * Hex-escape a SIP URI user.\n  * @private\n  * @param {String} user\n  */\n  escapeUser: function(user) {\n    // Don't hex-escape ':' (%3A), '+' (%2B), '?' (%3F\"), '/' (%2F).\n    return encodeURIComponent(decodeURIComponent(user)).replace(/%3A/ig, ':').replace(/%2B/ig, '+').replace(/%3F/ig, '?').replace(/%2F/ig, '/');\n  },\n\n  headerize: function(string) {\n    var exceptions = {\n      'Call-Id': 'Call-ID',\n      'Cseq': 'CSeq',\n      'Rack': 'RAck',\n      'Rseq': 'RSeq',\n      'Www-Authenticate': 'WWW-Authenticate'\n      },\n      name = string.toLowerCase().replace(/_/g,'-').split('-'),\n      hname = '',\n      parts = name.length, part;\n\n    for (part = 0; part < parts; part++) {\n      if (part !== 0) {\n        hname +='-';\n      }\n      hname += name[part].charAt(0).toUpperCase()+name[part].substring(1);\n    }\n    if (exceptions[hname]) {\n      hname = exceptions[hname];\n    }\n    return hname;\n  },\n\n  sipErrorCause: function(status_code) {\n    var cause;\n\n    for (cause in SIP.C.SIP_ERROR_CAUSES) {\n      if (SIP.C.SIP_ERROR_CAUSES[cause].indexOf(status_code) !== -1) {\n        return SIP.C.causes[cause];\n      }\n    }\n\n    return SIP.C.causes.SIP_FAILURE_CODE;\n  },\n\n  /**\n  * Generate a random Test-Net IP (http://tools.ietf.org/html/rfc5735)\n  * @private\n  */\n  getRandomTestNetIP: function() {\n    function getOctet(from,to) {\n      return Math.floor(Math.random()*(to-from+1)+from);\n    }\n    return '192.0.2.' + getOctet(1, 254);\n  },\n\n  getAllowedMethods: function(ua) {\n    var event,\n      allowed = SIP.UA.C.ALLOWED_METHODS.toString();\n\n    for (event in SIP.UA.C.EVENT_METHODS) {\n      if (ua.checkListener(event)) {\n        allowed += ','+ SIP.UA.C.EVENT_METHODS[event];\n      }\n    }\n\n    return allowed;\n  },\n\n  // MD5 (Message-Digest Algorithm) http://www.webtoolkit.info\n  calculateMD5: function(string) {\n    function RotateLeft(lValue, iShiftBits) {\n      return (lValue<<iShiftBits) | (lValue>>>(32-iShiftBits));\n    }\n\n    function AddUnsigned(lX,lY) {\n      var lX4,lY4,lX8,lY8,lResult;\n      lX8 = (lX & 0x80000000);\n      lY8 = (lY & 0x80000000);\n      lX4 = (lX & 0x40000000);\n      lY4 = (lY & 0x40000000);\n      lResult = (lX & 0x3FFFFFFF)+(lY & 0x3FFFFFFF);\n      if (lX4 & lY4) {\n        return (lResult ^ 0x80000000 ^ lX8 ^ lY8);\n      }\n      if (lX4 | lY4) {\n        if (lResult & 0x40000000) {\n          return (lResult ^ 0xC0000000 ^ lX8 ^ lY8);\n        } else {\n          return (lResult ^ 0x40000000 ^ lX8 ^ lY8);\n        }\n      } else {\n        return (lResult ^ lX8 ^ lY8);\n      }\n    }\n\n    function F(x,y,z) {\n      return (x & y) | ((~x) & z);\n    }\n\n    function G(x,y,z) {\n      return (x & z) | (y & (~z));\n    }\n\n    function H(x,y,z) {\n      return (x ^ y ^ z);\n    }\n\n    function I(x,y,z) {\n      return (y ^ (x | (~z)));\n    }\n\n    function FF(a,b,c,d,x,s,ac) {\n      a = AddUnsigned(a, AddUnsigned(AddUnsigned(F(b, c, d), x), ac));\n      return AddUnsigned(RotateLeft(a, s), b);\n    }\n\n    function GG(a,b,c,d,x,s,ac) {\n      a = AddUnsigned(a, AddUnsigned(AddUnsigned(G(b, c, d), x), ac));\n      return AddUnsigned(RotateLeft(a, s), b);\n    }\n\n    function HH(a,b,c,d,x,s,ac) {\n      a = AddUnsigned(a, AddUnsigned(AddUnsigned(H(b, c, d), x), ac));\n      return AddUnsigned(RotateLeft(a, s), b);\n    }\n\n    function II(a,b,c,d,x,s,ac) {\n      a = AddUnsigned(a, AddUnsigned(AddUnsigned(I(b, c, d), x), ac));\n      return AddUnsigned(RotateLeft(a, s), b);\n    }\n\n    function ConvertToWordArray(string) {\n      var lWordCount;\n      var lMessageLength = string.length;\n      var lNumberOfWords_temp1=lMessageLength + 8;\n      var lNumberOfWords_temp2=(lNumberOfWords_temp1-(lNumberOfWords_temp1 % 64))/64;\n      var lNumberOfWords = (lNumberOfWords_temp2+1)*16;\n      var lWordArray=Array(lNumberOfWords-1);\n      var lBytePosition = 0;\n      var lByteCount = 0;\n      while ( lByteCount < lMessageLength ) {\n        lWordCount = (lByteCount-(lByteCount % 4))/4;\n        lBytePosition = (lByteCount % 4)*8;\n        lWordArray[lWordCount] = (lWordArray[lWordCount] | (string.charCodeAt(lByteCount)<<lBytePosition));\n        lByteCount++;\n      }\n      lWordCount = (lByteCount-(lByteCount % 4))/4;\n      lBytePosition = (lByteCount % 4)*8;\n      lWordArray[lWordCount] = lWordArray[lWordCount] | (0x80<<lBytePosition);\n      lWordArray[lNumberOfWords-2] = lMessageLength<<3;\n      lWordArray[lNumberOfWords-1] = lMessageLength>>>29;\n      return lWordArray;\n    }\n\n    function WordToHex(lValue) {\n      var WordToHexValue=\"\",WordToHexValue_temp=\"\",lByte,lCount;\n      for (lCount = 0;lCount<=3;lCount++) {\n        lByte = (lValue>>>(lCount*8)) & 255;\n        WordToHexValue_temp = \"0\" + lByte.toString(16);\n        WordToHexValue = WordToHexValue + WordToHexValue_temp.substr(WordToHexValue_temp.length-2,2);\n      }\n      return WordToHexValue;\n    }\n\n    function Utf8Encode(string) {\n      string = string.replace(/\\r\\n/g,\"\\n\");\n      var utftext = \"\";\n\n      for (var n = 0; n < string.length; n++) {\n        var c = string.charCodeAt(n);\n\n        if (c < 128) {\n          utftext += String.fromCharCode(c);\n        }\n        else if((c > 127) && (c < 2048)) {\n          utftext += String.fromCharCode((c >> 6) | 192);\n          utftext += String.fromCharCode((c & 63) | 128);\n        }\n        else {\n          utftext += String.fromCharCode((c >> 12) | 224);\n          utftext += String.fromCharCode(((c >> 6) & 63) | 128);\n          utftext += String.fromCharCode((c & 63) | 128);\n        }\n      }\n      return utftext;\n    }\n\n    var x=[];\n    var k,AA,BB,CC,DD,a,b,c,d;\n    var S11=7, S12=12, S13=17, S14=22;\n    var S21=5, S22=9 , S23=14, S24=20;\n    var S31=4, S32=11, S33=16, S34=23;\n    var S41=6, S42=10, S43=15, S44=21;\n\n    string = Utf8Encode(string);\n\n    x = ConvertToWordArray(string);\n\n    a = 0x67452301; b = 0xEFCDAB89; c = 0x98BADCFE; d = 0x10325476;\n\n    for (k=0;k<x.length;k+=16) {\n      AA=a; BB=b; CC=c; DD=d;\n      a=FF(a,b,c,d,x[k+0], S11,0xD76AA478);\n      d=FF(d,a,b,c,x[k+1], S12,0xE8C7B756);\n      c=FF(c,d,a,b,x[k+2], S13,0x242070DB);\n      b=FF(b,c,d,a,x[k+3], S14,0xC1BDCEEE);\n      a=FF(a,b,c,d,x[k+4], S11,0xF57C0FAF);\n      d=FF(d,a,b,c,x[k+5], S12,0x4787C62A);\n      c=FF(c,d,a,b,x[k+6], S13,0xA8304613);\n      b=FF(b,c,d,a,x[k+7], S14,0xFD469501);\n      a=FF(a,b,c,d,x[k+8], S11,0x698098D8);\n      d=FF(d,a,b,c,x[k+9], S12,0x8B44F7AF);\n      c=FF(c,d,a,b,x[k+10],S13,0xFFFF5BB1);\n      b=FF(b,c,d,a,x[k+11],S14,0x895CD7BE);\n      a=FF(a,b,c,d,x[k+12],S11,0x6B901122);\n      d=FF(d,a,b,c,x[k+13],S12,0xFD987193);\n      c=FF(c,d,a,b,x[k+14],S13,0xA679438E);\n      b=FF(b,c,d,a,x[k+15],S14,0x49B40821);\n      a=GG(a,b,c,d,x[k+1], S21,0xF61E2562);\n      d=GG(d,a,b,c,x[k+6], S22,0xC040B340);\n      c=GG(c,d,a,b,x[k+11],S23,0x265E5A51);\n      b=GG(b,c,d,a,x[k+0], S24,0xE9B6C7AA);\n      a=GG(a,b,c,d,x[k+5], S21,0xD62F105D);\n      d=GG(d,a,b,c,x[k+10],S22,0x2441453);\n      c=GG(c,d,a,b,x[k+15],S23,0xD8A1E681);\n      b=GG(b,c,d,a,x[k+4], S24,0xE7D3FBC8);\n      a=GG(a,b,c,d,x[k+9], S21,0x21E1CDE6);\n      d=GG(d,a,b,c,x[k+14],S22,0xC33707D6);\n      c=GG(c,d,a,b,x[k+3], S23,0xF4D50D87);\n      b=GG(b,c,d,a,x[k+8], S24,0x455A14ED);\n      a=GG(a,b,c,d,x[k+13],S21,0xA9E3E905);\n      d=GG(d,a,b,c,x[k+2], S22,0xFCEFA3F8);\n      c=GG(c,d,a,b,x[k+7], S23,0x676F02D9);\n      b=GG(b,c,d,a,x[k+12],S24,0x8D2A4C8A);\n      a=HH(a,b,c,d,x[k+5], S31,0xFFFA3942);\n      d=HH(d,a,b,c,x[k+8], S32,0x8771F681);\n      c=HH(c,d,a,b,x[k+11],S33,0x6D9D6122);\n      b=HH(b,c,d,a,x[k+14],S34,0xFDE5380C);\n      a=HH(a,b,c,d,x[k+1], S31,0xA4BEEA44);\n      d=HH(d,a,b,c,x[k+4], S32,0x4BDECFA9);\n      c=HH(c,d,a,b,x[k+7], S33,0xF6BB4B60);\n      b=HH(b,c,d,a,x[k+10],S34,0xBEBFBC70);\n      a=HH(a,b,c,d,x[k+13],S31,0x289B7EC6);\n      d=HH(d,a,b,c,x[k+0], S32,0xEAA127FA);\n      c=HH(c,d,a,b,x[k+3], S33,0xD4EF3085);\n      b=HH(b,c,d,a,x[k+6], S34,0x4881D05);\n      a=HH(a,b,c,d,x[k+9], S31,0xD9D4D039);\n      d=HH(d,a,b,c,x[k+12],S32,0xE6DB99E5);\n      c=HH(c,d,a,b,x[k+15],S33,0x1FA27CF8);\n      b=HH(b,c,d,a,x[k+2], S34,0xC4AC5665);\n      a=II(a,b,c,d,x[k+0], S41,0xF4292244);\n      d=II(d,a,b,c,x[k+7], S42,0x432AFF97);\n      c=II(c,d,a,b,x[k+14],S43,0xAB9423A7);\n      b=II(b,c,d,a,x[k+5], S44,0xFC93A039);\n      a=II(a,b,c,d,x[k+12],S41,0x655B59C3);\n      d=II(d,a,b,c,x[k+3], S42,0x8F0CCC92);\n      c=II(c,d,a,b,x[k+10],S43,0xFFEFF47D);\n      b=II(b,c,d,a,x[k+1], S44,0x85845DD1);\n      a=II(a,b,c,d,x[k+8], S41,0x6FA87E4F);\n      d=II(d,a,b,c,x[k+15],S42,0xFE2CE6E0);\n      c=II(c,d,a,b,x[k+6], S43,0xA3014314);\n      b=II(b,c,d,a,x[k+13],S44,0x4E0811A1);\n      a=II(a,b,c,d,x[k+4], S41,0xF7537E82);\n      d=II(d,a,b,c,x[k+11],S42,0xBD3AF235);\n      c=II(c,d,a,b,x[k+2], S43,0x2AD7D2BB);\n      b=II(b,c,d,a,x[k+9], S44,0xEB86D391);\n      a=AddUnsigned(a,AA);\n      b=AddUnsigned(b,BB);\n      c=AddUnsigned(c,CC);\n      d=AddUnsigned(d,DD);\n    }\n\n    var temp = WordToHex(a)+WordToHex(b)+WordToHex(c)+WordToHex(d);\n\n    return temp.toLowerCase();\n  }\n};\n\nSIP.Utils = Utils;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/sip.js/src/Utils.js\n ** module id = 4\n ** module chunks = 0\n **/","\nmodule.exports = (function() {\n\nvar Logger = function(logger, category, label) {\n  this.logger = logger;\n  this.category = category;\n  this.label = label;\n};\n\n\nLogger.prototype.debug = function(content) {\n  this.logger.debug(this.category, this.label, content);\n};\n\nLogger.prototype.log = function(content) {\n  this.logger.log(this.category, this.label, content);\n};\n\nLogger.prototype.warn = function(content) {\n  this.logger.warn(this.category, this.label, content);\n};\n\nLogger.prototype.error = function(content) {\n  this.logger.error(this.category, this.label, content);\n};\n\nreturn Logger;\n})();\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/sip.js/src/Logger.js\n ** module id = 5\n ** module chunks = 0\n **/","\nmodule.exports = function (window, Logger) {\n\n// Console is not defined in ECMAScript, so just in case...\nvar console = window.console || {\n  debug: function () {},\n  log: function () {},\n  warn: function () {},\n  error: function () {}\n};\n\nvar LoggerFactory = function() {\n  var logger,\n    levels = {\n    'error': 0,\n    'warn': 1,\n    'log': 2,\n    'debug': 3\n    },\n\n    level = 2,\n    builtinEnabled = true,\n    connector = null;\n\n    this.loggers = {};\n\n    logger = this.getLogger('sip.loggerfactory');\n\n\n  Object.defineProperties(this, {\n    builtinEnabled: {\n      get: function(){ return builtinEnabled; },\n      set: function(value){\n        if (typeof value === 'boolean') {\n          builtinEnabled = value;\n        } else {\n          logger.error('invalid \"builtinEnabled\" parameter value: '+ JSON.stringify(value));\n        }\n      }\n    },\n\n    level: {\n      get: function() {return level; },\n      set: function(value) {\n        if (value >= 0 && value <=3) {\n          level = value;\n        } else if (value > 3) {\n          level = 3;\n        } else if (levels.hasOwnProperty(value)) {\n          level = levels[value];\n        } else {\n          logger.error('invalid \"level\" parameter value: '+ JSON.stringify(value));\n        }\n      }\n    },\n\n    connector: {\n      get: function() {return connector; },\n      set: function(value){\n        if(value === null || value === \"\" || value === undefined) {\n          connector = null;\n        } else if (typeof value === 'function') {\n          connector = value;\n        } else {\n          logger.error('invalid \"connector\" parameter value: '+ JSON.stringify(value));\n        }\n      }\n    }\n  });\n};\n\nLoggerFactory.prototype.print = function(target, category, label, content) {\n  var prefix = [];\n\n  prefix.push(new Date());\n\n  prefix.push(category);\n\n  if (label) {\n    prefix.push(label);\n  }\n\n  prefix.push('');\n\n  if (typeof content === 'string') {\n    target.call(console, prefix.join(' | ') + content);\n  } else {\n    target.call(console, content);\n  }\n};\n\nLoggerFactory.prototype.debug = function(category, label, content) {\n  if (this.level === 3) {\n    if (this.builtinEnabled) {\n      this.print(console.debug, category, label, content);\n    }\n\n    if (this.connector) {\n      this.connector('debug', category, label, content);\n    }\n  }\n};\n\nLoggerFactory.prototype.log = function(category, label, content) {\n  if (this.level >= 2) {\n    if (this.builtinEnabled) {\n      this.print(console.log, category, label, content);\n    }\n\n    if (this.connector) {\n      this.connector('log', category, label, content);\n    }\n  }\n};\n\nLoggerFactory.prototype.warn = function(category, label, content) {\n  if (this.level >= 1) {\n    if (this.builtinEnabled) {\n      this.print(console.warn, category, label, content);\n    }\n\n    if (this.connector) {\n      this.connector('warn', category, label, content);\n    }\n  }\n};\n\nLoggerFactory.prototype.error = function(category, label, content) {\n  if (this.builtinEnabled) {\n    this.print(console.error,category, label, content);\n  }\n\n  if (this.connector) {\n    this.connector('error', category, label, content);\n  }\n};\n\nLoggerFactory.prototype.getLogger = function(category, label) {\n  var logger;\n\n  if (label && this.level === 3) {\n    return new Logger(this, category, label);\n  } else if (this.loggers[category]) {\n    return this.loggers[category];\n  } else {\n    logger = new Logger(this, category);\n    this.loggers[category] = logger;\n    return logger;\n  }\n};\n\nreturn LoggerFactory;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/sip.js/src/LoggerFactory.js\n ** module id = 6\n ** module chunks = 0\n **/","/**\n * @fileoverview EventEmitter\n */\n\n/**\n * @augments SIP\n * @class Class creating an event emitter.\n */\nmodule.exports = function (SIP) {\nvar\n  EventEmitter,\n  Event,\n  logger = new SIP.LoggerFactory().getLogger('sip.eventemitter'),\n  C = {\n    MAX_LISTENERS: 10\n  };\n\nEventEmitter = function(){};\nEventEmitter.prototype = {\n  /**\n   * Initialize events dictionaries.\n   * @param {Array} events\n   */\n  initEvents: function(events) {\n    this.events = {};\n\n    return this.initMoreEvents(events);\n  },\n\n  initMoreEvents: function(events) {\n    var idx;\n\n    if (!this.logger) {\n      this.logger = logger;\n    }\n\n    this.maxListeners = C.MAX_LISTENERS;\n\n    for (idx = 0; idx < events.length; idx++) {\n      if (!this.events[events[idx]]) {\n        this.logger.log('adding event '+ events[idx]);\n        this.events[events[idx]] = [];\n      } else {\n        this.logger.log('skipping event '+ events[idx]+ ' - Event exists');\n      }\n    }\n\n    return this;\n  },\n\n  /**\n  * Check whether an event exists or not.\n  * @param {String} event\n  * @returns {Boolean}\n  */\n  checkEvent: function(event) {\n    return !!(this.events && this.events[event]);\n  },\n\n  /**\n  * Check whether an event exists and has at least one listener or not.\n  * @param {String} event\n  * @returns {Boolean}\n  */\n  checkListener: function(event) {\n    return this.checkEvent(event) && this.events[event].length > 0;\n  },\n\n  /**\n  * Add a listener to the end of the listeners array for the specified event.\n  * @param {String} event\n  * @param {Function} listener\n  */\n  on: function(event, listener, bindTarget) {\n    if (listener === undefined) {\n      return this;\n    } else if (typeof listener !== 'function') {\n      this.logger.error('listener must be a function');\n      return this;\n    } else if (!this.checkEvent(event)) {\n      this.logger.error('unable to add a listener to a nonexistent event '+ event);\n      throw new TypeError('Invalid or uninitialized event: ' + event);\n    }\n\n    var listenerObj = { listener: listener };\n    if (bindTarget) {\n      listenerObj.bindTarget = bindTarget;\n    }\n\n    if (this.events[event].length >= this.maxListeners) {\n      this.logger.warn('max listeners exceeded for event '+ event);\n      return this;\n    }\n\n    this.events[event].push(listenerObj);\n    this.logger.log('new listener added to event '+ event);\n    return this;\n  },\n\n  /**\n  * Add a one time listener for the specified event.\n  * The listener is invoked only the next time the event is fired, then it is removed.\n  * @param {String} event\n  * @param {Function} listener\n  */\n  once: function(event, listener, bindTarget) {\n    var self = this;\n    function listenOnce () {\n      listener.apply(this, arguments);\n      self.off(event, listenOnce, bindTarget);\n    }\n\n    return this.on(event, listenOnce, bindTarget);\n  },\n\n  /**\n  * Remove a listener from the listener array for the specified event.\n  * Note that the order of the array elements will change after removing the listener\n  * @param {String} event\n  * @param {Function} listener\n  */\n  off: function(event, listener, bindTarget) {\n    var events, length,\n      idx = 0;\n\n    if (listener && typeof listener !== 'function') {\n      this.logger.error('listener must be a function');\n      return this;\n    } else if (!event) {\n      for (idx in this.events) {\n        this.events[idx] = [];\n      }\n      return this;\n    } else if (!this.checkEvent(event)) {\n      this.logger.error('unable to remove a listener from a nonexistent event '+ event);\n      throw new TypeError('Invalid or uninitialized event: ' + event);\n    }\n\n    events = this.events[event];\n    length = events.length;\n\n    while (idx < length) {\n      if (events[idx] &&\n          (!listener || events[idx].listener === listener) &&\n          (!bindTarget || events[idx].bindTarget === bindTarget)) {\n        events.splice(idx,1);\n      } else {\n        idx ++;\n      }\n    }\n\n    return this;\n  },\n\n  /**\n  * By default EventEmitter will print a warning\n  * if more than C.MAX_LISTENERS listeners are added for a particular event.\n  * This function allows that limit to be modified.\n  * @param {Number} listeners\n  */\n  setMaxListeners: function(listeners) {\n    if (typeof listeners !== 'number' || listeners < 0) {\n      this.logger.error('listeners must be a positive number');\n      return this;\n    }\n\n    this.maxListeners = listeners;\n    return this;\n  },\n\n  /**\n  * Execute each of the listeners in order with the supplied arguments.\n  * @param {String} events\n  * @param {Array} args\n  */\n  emit: function(event) {\n    if (!this.checkEvent(event)) {\n      this.logger.error('unable to emit a nonexistent event '+ event);\n      throw new TypeError('Invalid or uninitialized event: ' + event);\n    }\n\n    this.logger.log('emitting event '+ event);\n\n    // Fire event listeners\n    var args = Array.prototype.slice.call(arguments, 1);\n    this.events[event].slice().forEach(function (listener) {\n      try {\n        listener.listener.apply(listener.bindTarget || this, args);\n      } catch(err) {\n        this.logger.error(err.stack);\n      }\n    }, this);\n\n    return this;\n  }\n};\n\nEvent = function(type, sender, data) {\n  this.type = type;\n  this.sender= sender;\n  this.data = data;\n};\n\nEventEmitter.C = C;\n\nSIP.EventEmitter = EventEmitter;\nSIP.Event = Event;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/sip.js/src/EventEmitter.js\n ** module id = 7\n ** module chunks = 0\n **/","/**\n * @fileoverview SIP Constants\n */\n\n/**\n * SIP Constants.\n * @augments SIP\n */\n\nmodule.exports = function (name, version) {\nreturn {\n  USER_AGENT: name +'/'+ version,\n\n  // SIP scheme\n  SIP:  'sip',\n  SIPS: 'sips',\n\n  // End and Failure causes\n  causes: {\n    // Generic error causes\n    CONNECTION_ERROR:         'Connection Error',\n    REQUEST_TIMEOUT:          'Request Timeout',\n    SIP_FAILURE_CODE:         'SIP Failure Code',\n    INTERNAL_ERROR:           'Internal Error',\n\n    // SIP error causes\n    BUSY:                     'Busy',\n    REJECTED:                 'Rejected',\n    REDIRECTED:               'Redirected',\n    UNAVAILABLE:              'Unavailable',\n    NOT_FOUND:                'Not Found',\n    ADDRESS_INCOMPLETE:       'Address Incomplete',\n    INCOMPATIBLE_SDP:         'Incompatible SDP',\n    AUTHENTICATION_ERROR:     'Authentication Error',\n    DIALOG_ERROR:             'Dialog Error',\n\n    // Session error causes\n    WEBRTC_NOT_SUPPORTED:     'WebRTC Not Supported',\n    WEBRTC_ERROR:             'WebRTC Error',\n    CANCELED:                 'Canceled',\n    NO_ANSWER:                'No Answer',\n    EXPIRES:                  'Expires',\n    NO_ACK:                   'No ACK',\n    NO_PRACK:                 'No PRACK',\n    USER_DENIED_MEDIA_ACCESS: 'User Denied Media Access',\n    BAD_MEDIA_DESCRIPTION:    'Bad Media Description',\n    RTP_TIMEOUT:              'RTP Timeout'\n  },\n\n  supported: {\n    UNSUPPORTED:        'none',\n    SUPPORTED:          'supported',\n    REQUIRED:           'required'\n  },\n\n  SIP_ERROR_CAUSES: {\n    REDIRECTED: [300,301,302,305,380],\n    BUSY: [486,600],\n    REJECTED: [403,603],\n    NOT_FOUND: [404,604],\n    UNAVAILABLE: [480,410,408,430],\n    ADDRESS_INCOMPLETE: [484],\n    INCOMPATIBLE_SDP: [488,606],\n    AUTHENTICATION_ERROR:[401,407]\n  },\n\n  // SIP Methods\n  ACK:        'ACK',\n  BYE:        'BYE',\n  CANCEL:     'CANCEL',\n  INFO:       'INFO',\n  INVITE:     'INVITE',\n  MESSAGE:    'MESSAGE',\n  NOTIFY:     'NOTIFY',\n  OPTIONS:    'OPTIONS',\n  REGISTER:   'REGISTER',\n  UPDATE:     'UPDATE',\n  SUBSCRIBE:  'SUBSCRIBE',\n  REFER:      'REFER',\n  PRACK:      'PRACK',\n\n  /* SIP Response Reasons\n   * DOC: http://www.iana.org/assignments/sip-parameters\n   * Copied from https://github.com/versatica/OverSIP/blob/master/lib/oversip/sip/constants.rb#L7\n   */\n  REASON_PHRASE: {\n    100: 'Trying',\n    180: 'Ringing',\n    181: 'Call Is Being Forwarded',\n    182: 'Queued',\n    183: 'Session Progress',\n    199: 'Early Dialog Terminated',  // draft-ietf-sipcore-199\n    200: 'OK',\n    202: 'Accepted',  // RFC 3265\n    204: 'No Notification',  //RFC 5839\n    300: 'Multiple Choices',\n    301: 'Moved Permanently',\n    302: 'Moved Temporarily',\n    305: 'Use Proxy',\n    380: 'Alternative Service',\n    400: 'Bad Request',\n    401: 'Unauthorized',\n    402: 'Payment Required',\n    403: 'Forbidden',\n    404: 'Not Found',\n    405: 'Method Not Allowed',\n    406: 'Not Acceptable',\n    407: 'Proxy Authentication Required',\n    408: 'Request Timeout',\n    410: 'Gone',\n    412: 'Conditional Request Failed',  // RFC 3903\n    413: 'Request Entity Too Large',\n    414: 'Request-URI Too Long',\n    415: 'Unsupported Media Type',\n    416: 'Unsupported URI Scheme',\n    417: 'Unknown Resource-Priority',  // RFC 4412\n    420: 'Bad Extension',\n    421: 'Extension Required',\n    422: 'Session Interval Too Small',  // RFC 4028\n    423: 'Interval Too Brief',\n    428: 'Use Identity Header',  // RFC 4474\n    429: 'Provide Referrer Identity',  // RFC 3892\n    430: 'Flow Failed',  // RFC 5626\n    433: 'Anonymity Disallowed',  // RFC 5079\n    436: 'Bad Identity-Info',  // RFC 4474\n    437: 'Unsupported Certificate',  // RFC 4744\n    438: 'Invalid Identity Header',  // RFC 4744\n    439: 'First Hop Lacks Outbound Support',  // RFC 5626\n    440: 'Max-Breadth Exceeded',  // RFC 5393\n    469: 'Bad Info Package',  // draft-ietf-sipcore-info-events\n    470: 'Consent Needed',  // RFC 5360\n    478: 'Unresolvable Destination',  // Custom code copied from Kamailio.\n    480: 'Temporarily Unavailable',\n    481: 'Call/Transaction Does Not Exist',\n    482: 'Loop Detected',\n    483: 'Too Many Hops',\n    484: 'Address Incomplete',\n    485: 'Ambiguous',\n    486: 'Busy Here',\n    487: 'Request Terminated',\n    488: 'Not Acceptable Here',\n    489: 'Bad Event',  // RFC 3265\n    491: 'Request Pending',\n    493: 'Undecipherable',\n    494: 'Security Agreement Required',  // RFC 3329\n    500: 'Internal Server Error',\n    501: 'Not Implemented',\n    502: 'Bad Gateway',\n    503: 'Service Unavailable',\n    504: 'Server Time-out',\n    505: 'Version Not Supported',\n    513: 'Message Too Large',\n    580: 'Precondition Failure',  // RFC 3312\n    600: 'Busy Everywhere',\n    603: 'Decline',\n    604: 'Does Not Exist Anywhere',\n    606: 'Not Acceptable'\n  }\n};\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/sip.js/src/Constants.js\n ** module id = 8\n ** module chunks = 0\n **/","/**\n * @fileoverview Exceptions\n */\n\n/**\n * SIP Exceptions.\n * @augments SIP\n */\nmodule.exports = {\n  ConfigurationError: (function(){\n    var exception = function(parameter, value) {\n      this.code = 1;\n      this.name = 'CONFIGURATION_ERROR';\n      this.parameter = parameter;\n      this.value = value;\n      this.message = (!this.value)? 'Missing parameter: '+ this.parameter : 'Invalid value '+ JSON.stringify(this.value) +' for parameter \"'+ this.parameter +'\"';\n    };\n    exception.prototype = new Error();\n    return exception;\n  }()),\n\n  InvalidStateError: (function(){\n    var exception = function(status) {\n      this.code = 2;\n      this.name = 'INVALID_STATE_ERROR';\n      this.status = status;\n      this.message = 'Invalid status: ' + status;\n    };\n    exception.prototype = new Error();\n    return exception;\n  }()),\n\n  NotSupportedError: (function(){\n    var exception = function(message) {\n      this.code = 3;\n      this.name = 'NOT_SUPPORTED_ERROR';\n      this.message = message;\n    };\n    exception.prototype = new Error();\n    return exception;\n  }()),\n\n  NotReadyError: (function(){\n    var exception = function(message) {\n      this.code = 4;\n      this.name = 'NOT_READY_ERROR';\n      this.message = message;\n    };\n    exception.prototype = new Error();\n    return exception;\n  }())\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/sip.js/src/Exceptions.js\n ** module id = 9\n ** module chunks = 0\n **/","/**\n * @fileoverview SIP TIMERS\n */\n\n/**\n * @augments SIP\n */\nvar\n  T1 = 500,\n  T2 = 4000,\n  T4 = 5000;\nmodule.exports = function (timers) {\n  var exports = {\n    T1: T1,\n    T2: T2,\n    T4: T4,\n    TIMER_B: 64 * T1,\n    TIMER_D: 0  * T1,\n    TIMER_F: 64 * T1,\n    TIMER_H: 64 * T1,\n    TIMER_I: 0  * T1,\n    TIMER_J: 0  * T1,\n    TIMER_K: 0  * T4,\n    TIMER_L: 64 * T1,\n    TIMER_M: 64 * T1,\n    TIMER_N: 64 * T1,\n    PROVISIONAL_RESPONSE_INTERVAL: 60000  // See RFC 3261 Section 13.3.1.1\n  };\n\n  ['setTimeout', 'clearTimeout', 'setInterval', 'clearInterval']\n  .forEach(function (name) {\n    // can't just use timers[name].bind(timers) since it bypasses jasmine's\n    // clock-mocking\n    exports[name] = function () {\n      return timers[name].apply(timers, arguments);\n    };\n  });\n\n  return exports;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/sip.js/src/Timers.js\n ** module id = 10\n ** module chunks = 0\n **/","/**\n * @fileoverview Transport\n */\n\n/**\n * @augments SIP\n * @class Transport\n * @param {SIP.UA} ua\n * @param {Object} server ws_server Object\n */\nmodule.exports = function (SIP, window) {\nvar Transport,\n  C = {\n    // Transport status codes\n    STATUS_READY:        0,\n    STATUS_DISCONNECTED: 1,\n    STATUS_ERROR:        2\n  };\n\nTransport = function(ua, server) {\n\n  this.logger = ua.getLogger('sip.transport');\n  this.ua = ua;\n  this.ws = null;\n  this.server = server;\n  this.reconnection_attempts = 0;\n  this.closed = false;\n  this.connected = false;\n  this.reconnectTimer = null;\n  this.lastTransportError = {};\n\n  this.ua.transport = this;\n\n  // Connect\n  this.connect();\n};\n\nTransport.prototype = {\n  /**\n   * Send a message.\n   * @param {SIP.OutgoingRequest|String} msg\n   * @returns {Boolean}\n   */\n  send: function(msg) {\n    var message = msg.toString();\n\n    if(this.ws && this.ws.readyState === window.WebSocket.OPEN) {\n      if (this.ua.configuration.traceSip === true) {\n        this.logger.log('sending WebSocket message:\\n\\n' + message + '\\n');\n      }\n      this.ws.send(message);\n      return true;\n    } else {\n      this.logger.warn('unable to send message, WebSocket is not open');\n      return false;\n    }\n  },\n\n  /**\n  * Disconnect socket.\n  */\n  disconnect: function() {\n    if(this.ws) {\n      // Clear reconnectTimer\n      SIP.Timers.clearTimeout(this.reconnectTimer);\n\n      this.closed = true;\n      this.logger.log('closing WebSocket ' + this.server.ws_uri);\n      this.ws.close();\n    }\n\n    if (this.reconnectTimer !== null) {\n      SIP.Timers.clearTimeout(this.reconnectTimer);\n      this.reconnectTimer = null;\n      this.ua.emit('disconnected', {\n        transport: this,\n        code: this.lastTransportError.code,\n        reason: this.lastTransportError.reason\n      });\n    }\n  },\n\n  /**\n  * Connect socket.\n  */\n  connect: function() {\n    var transport = this;\n\n    if(this.ws && (this.ws.readyState === WebSocket.OPEN || this.ws.readyState === WebSocket.CONNECTING)) {\n      this.logger.log('WebSocket ' + this.server.ws_uri + ' is already connected');\n      return false;\n    }\n\n    if(this.ws) {\n      this.ws.close();\n    }\n\n    this.logger.log('connecting to WebSocket ' + this.server.ws_uri);\n    this.ua.onTransportConnecting(this,\n      (this.reconnection_attempts === 0)?1:this.reconnection_attempts);\n\n    try {\n      this.ws = new window.WebSocket(this.server.ws_uri, 'sip');\n    } catch(e) {\n      this.logger.warn('error connecting to WebSocket ' + this.server.ws_uri + ': ' + e);\n    }\n\n    this.ws.binaryType = 'arraybuffer';\n\n    this.ws.onopen = function() {\n      transport.onOpen();\n    };\n\n    this.ws.onclose = function(e) {\n      transport.onClose(e);\n    };\n\n    this.ws.onmessage = function(e) {\n      transport.onMessage(e);\n    };\n\n    this.ws.onerror = function(e) {\n      transport.onError(e);\n    };\n  },\n\n  // Transport Event Handlers\n\n  /**\n  * @event\n  * @param {event} e\n  */\n  onOpen: function() {\n    this.connected = true;\n\n    this.logger.log('WebSocket ' + this.server.ws_uri + ' connected');\n    // Clear reconnectTimer since we are not disconnected\n    if (this.reconnectTimer !== null) {\n      SIP.Timers.clearTimeout(this.reconnectTimer);\n      this.reconnectTimer = null;\n    }\n    // Reset reconnection_attempts\n    this.reconnection_attempts = 0;\n    // Disable closed\n    this.closed = false;\n    // Trigger onTransportConnected callback\n    this.ua.onTransportConnected(this);\n  },\n\n  /**\n  * @event\n  * @param {event} e\n  */\n  onClose: function(e) {\n    var connected_before = this.connected;\n\n    this.connected = false;\n    this.lastTransportError.code = e.code;\n    this.lastTransportError.reason = e.reason;\n    this.logger.log('WebSocket disconnected (code: ' + e.code + (e.reason? '| reason: ' + e.reason : '') +')');\n\n    if(e.wasClean === false) {\n      this.logger.warn('WebSocket abrupt disconnection');\n    }\n    // Transport was connected\n    if(connected_before === true) {\n      this.ua.onTransportClosed(this);\n      // Check whether the user requested to close.\n      if(!this.closed) {\n        this.reConnect();\n      } else {\n        this.ua.emit('disconnected', {\n          transport: this,\n          code: this.lastTransportError.code,\n          reason: this.lastTransportError.reason\n        });\n      }\n    } else {\n      // This is the first connection attempt\n      //Network error\n      this.ua.onTransportError(this);\n    }\n  },\n\n  /**\n  * @event\n  * @param {event} e\n  */\n  onMessage: function(e) {\n    var message, transaction,\n      data = e.data;\n\n    // CRLF Keep Alive response from server. Ignore it.\n    if(data === '\\r\\n') {\n      if (this.ua.configuration.traceSip === true) {\n        this.logger.log('received WebSocket message with CRLF Keep Alive response');\n      }\n      return;\n    }\n\n    // WebSocket binary message.\n    else if (typeof data !== 'string') {\n      try {\n        data = String.fromCharCode.apply(null, new Uint8Array(data));\n      } catch(evt) {\n        this.logger.warn('received WebSocket binary message failed to be converted into string, message discarded');\n        return;\n      }\n\n      if (this.ua.configuration.traceSip === true) {\n        this.logger.log('received WebSocket binary message:\\n\\n' + data + '\\n');\n      }\n    }\n\n    // WebSocket text message.\n    else {\n      if (this.ua.configuration.traceSip === true) {\n        this.logger.log('received WebSocket text message:\\n\\n' + data + '\\n');\n      }\n    }\n\n    message = SIP.Parser.parseMessage(data, this.ua);\n\n    if (!message) {\n      return;\n    }\n\n    if(this.ua.status === SIP.UA.C.STATUS_USER_CLOSED && message instanceof SIP.IncomingRequest) {\n      return;\n    }\n\n    // Do some sanity check\n    if(SIP.sanityCheck(message, this.ua, this)) {\n      if(message instanceof SIP.IncomingRequest) {\n        message.transport = this;\n        this.ua.receiveRequest(message);\n      } else if(message instanceof SIP.IncomingResponse) {\n        /* Unike stated in 18.1.2, if a response does not match\n        * any transaction, it is discarded here and no passed to the core\n        * in order to be discarded there.\n        */\n        switch(message.method) {\n          case SIP.C.INVITE:\n            transaction = this.ua.transactions.ict[message.via_branch];\n            if(transaction) {\n              transaction.receiveResponse(message);\n            }\n            break;\n          case SIP.C.ACK:\n            // Just in case ;-)\n            break;\n          default:\n            transaction = this.ua.transactions.nict[message.via_branch];\n            if(transaction) {\n              transaction.receiveResponse(message);\n            }\n            break;\n        }\n      }\n    }\n  },\n\n  /**\n  * @event\n  * @param {event} e\n  */\n  onError: function(e) {\n    this.logger.warn('WebSocket connection error: ' + e);\n  },\n\n  /**\n  * Reconnection attempt logic.\n  * @private\n  */\n  reConnect: function() {\n    var transport = this;\n\n    this.reconnection_attempts += 1;\n\n    if(this.reconnection_attempts > this.ua.configuration.wsServerMaxReconnection) {\n      this.logger.warn('maximum reconnection attempts for WebSocket ' + this.server.ws_uri);\n      this.ua.onTransportError(this);\n    } else {\n      this.logger.log('trying to reconnect to WebSocket ' + this.server.ws_uri + ' (reconnection attempt ' + this.reconnection_attempts + ')');\n\n      this.reconnectTimer = SIP.Timers.setTimeout(function() {\n        transport.connect();\n        transport.reconnectTimer = null;\n      }, this.ua.configuration.wsServerReconnectionTimeout * 1000);\n    }\n  }\n};\n\nTransport.C = C;\nSIP.Transport = Transport;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/sip.js/src/Transport.js\n ** module id = 11\n ** module chunks = 0\n **/","/**\n * @fileoverview SIP Message Parser\n */\n\n/**\n * Extract and parse every header of a SIP message.\n * @augments SIP\n * @namespace\n */\nmodule.exports = function (SIP) {\nvar Parser;\n\nfunction getHeader(data, headerStart) {\n  var\n    // 'start' position of the header.\n    start = headerStart,\n    // 'end' position of the header.\n    end = 0,\n    // 'partial end' position of the header.\n    partialEnd = 0;\n\n  //End of message.\n  if (data.substring(start, start + 2).match(/(^\\r\\n)/)) {\n    return -2;\n  }\n\n  while(end === 0) {\n    // Partial End of Header.\n    partialEnd = data.indexOf('\\r\\n', start);\n\n    // 'indexOf' returns -1 if the value to be found never occurs.\n    if (partialEnd === -1) {\n      return partialEnd;\n    }\n\n    if(!data.substring(partialEnd + 2, partialEnd + 4).match(/(^\\r\\n)/) && data.charAt(partialEnd + 2).match(/(^\\s+)/)) {\n      // Not the end of the message. Continue from the next position.\n      start = partialEnd + 2;\n    } else {\n      end = partialEnd;\n    }\n  }\n\n  return end;\n}\n\nfunction parseHeader(message, data, headerStart, headerEnd) {\n  var header, idx, length, parsed,\n    hcolonIndex = data.indexOf(':', headerStart),\n    headerName = data.substring(headerStart, hcolonIndex).trim(),\n    headerValue = data.substring(hcolonIndex + 1, headerEnd).trim();\n\n  // If header-field is well-known, parse it.\n  switch(headerName.toLowerCase()) {\n    case 'via':\n    case 'v':\n      message.addHeader('via', headerValue);\n      if(message.getHeaders('via').length === 1) {\n        parsed = message.parseHeader('Via');\n        if(parsed) {\n          message.via = parsed;\n          message.via_branch = parsed.branch;\n        }\n      } else {\n        parsed = 0;\n      }\n      break;\n    case 'from':\n    case 'f':\n      message.setHeader('from', headerValue);\n      parsed = message.parseHeader('from');\n      if(parsed) {\n        message.from = parsed;\n        message.from_tag = parsed.getParam('tag');\n      }\n      break;\n    case 'to':\n    case 't':\n      message.setHeader('to', headerValue);\n      parsed = message.parseHeader('to');\n      if(parsed) {\n        message.to = parsed;\n        message.to_tag = parsed.getParam('tag');\n      }\n      break;\n    case 'record-route':\n      parsed = SIP.Grammar.parse(headerValue, 'Record_Route');\n\n      if (parsed === -1) {\n        parsed = undefined;\n        break;\n      }\n\n      length = parsed.length;\n      for (idx = 0; idx < length; idx++) {\n        header = parsed[idx];\n        message.addHeader('record-route', headerValue.substring(header.position, header.offset));\n        message.headers['Record-Route'][message.getHeaders('record-route').length - 1].parsed = header.parsed;\n      }\n      break;\n    case 'call-id':\n    case 'i':\n      message.setHeader('call-id', headerValue);\n      parsed = message.parseHeader('call-id');\n      if(parsed) {\n        message.call_id = headerValue;\n      }\n      break;\n    case 'contact':\n    case 'm':\n      parsed = SIP.Grammar.parse(headerValue, 'Contact');\n\n      if (parsed === -1) {\n        parsed = undefined;\n        break;\n      }\n\n      length = parsed.length;\n      for (idx = 0; idx < length; idx++) {\n        header = parsed[idx];\n        message.addHeader('contact', headerValue.substring(header.position, header.offset));\n        message.headers['Contact'][message.getHeaders('contact').length - 1].parsed = header.parsed;\n      }\n      break;\n    case 'content-length':\n    case 'l':\n      message.setHeader('content-length', headerValue);\n      parsed = message.parseHeader('content-length');\n      break;\n    case 'content-type':\n    case 'c':\n      message.setHeader('content-type', headerValue);\n      parsed = message.parseHeader('content-type');\n      break;\n    case 'cseq':\n      message.setHeader('cseq', headerValue);\n      parsed = message.parseHeader('cseq');\n      if(parsed) {\n        message.cseq = parsed.value;\n      }\n      if(message instanceof SIP.IncomingResponse) {\n        message.method = parsed.method;\n      }\n      break;\n    case 'max-forwards':\n      message.setHeader('max-forwards', headerValue);\n      parsed = message.parseHeader('max-forwards');\n      break;\n    case 'www-authenticate':\n      message.setHeader('www-authenticate', headerValue);\n      parsed = message.parseHeader('www-authenticate');\n      break;\n    case 'proxy-authenticate':\n      message.setHeader('proxy-authenticate', headerValue);\n      parsed = message.parseHeader('proxy-authenticate');\n      break;\n    case 'refer-to':\n    case 'r':\n      message.setHeader('refer-to', headerValue);\n      parsed = message.parseHeader('refer-to');\n      if (parsed) {\n        message.refer_to = parsed;\n      }\n      break;\n    default:\n      // Do not parse this header.\n      message.setHeader(headerName, headerValue);\n      parsed = 0;\n  }\n\n  if (parsed === undefined) {\n    return {\n      error: 'error parsing header \"'+ headerName +'\"'\n    };\n  } else {\n    return true;\n  }\n}\n\n/** Parse SIP Message\n * @function\n * @param {String} message SIP message.\n * @param {Object} logger object.\n * @returns {SIP.IncomingRequest|SIP.IncomingResponse|undefined}\n */\nParser = {};\nParser.parseMessage = function(data, ua) {\n  var message, firstLine, contentLength, bodyStart, parsed,\n    headerStart = 0,\n    headerEnd = data.indexOf('\\r\\n'),\n    logger = ua.getLogger('sip.parser');\n\n  if(headerEnd === -1) {\n    logger.warn('no CRLF found, not a SIP message, discarded');\n    return;\n  }\n\n  // Parse first line. Check if it is a Request or a Reply.\n  firstLine = data.substring(0, headerEnd);\n  parsed = SIP.Grammar.parse(firstLine, 'Request_Response');\n\n  if(parsed === -1) {\n    logger.warn('error parsing first line of SIP message: \"' + firstLine + '\"');\n    return;\n  } else if(!parsed.status_code) {\n    message = new SIP.IncomingRequest(ua);\n    message.method = parsed.method;\n    message.ruri = parsed.uri;\n  } else {\n    message = new SIP.IncomingResponse(ua);\n    message.status_code = parsed.status_code;\n    message.reason_phrase = parsed.reason_phrase;\n  }\n\n  message.data = data;\n  headerStart = headerEnd + 2;\n\n  /* Loop over every line in data. Detect the end of each header and parse\n  * it or simply add to the headers collection.\n  */\n  while(true) {\n    headerEnd = getHeader(data, headerStart);\n\n    // The SIP message has normally finished.\n    if(headerEnd === -2) {\n      bodyStart = headerStart + 2;\n      break;\n    }\n    // data.indexOf returned -1 due to a malformed message.\n    else if(headerEnd === -1) {\n      logger.error('malformed message');\n      return;\n    }\n\n    parsed = parseHeader(message, data, headerStart, headerEnd);\n\n    if(parsed !== true) {\n      logger.error(parsed.error);\n      return;\n    }\n\n    headerStart = headerEnd + 2;\n  }\n\n  /* RFC3261 18.3.\n   * If there are additional bytes in the transport packet\n   * beyond the end of the body, they MUST be discarded.\n   */\n  if(message.hasHeader('content-length')) {\n    contentLength = message.getHeader('content-length');\n    message.body = data.substr(bodyStart, contentLength);\n  } else {\n    message.body = data.substring(bodyStart);\n  }\n\n  return message;\n};\n\nSIP.Parser = Parser;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/sip.js/src/Parser.js\n ** module id = 12\n ** module chunks = 0\n **/","/**\n * @fileoverview SIP Message\n */\n\nmodule.exports = function (SIP) {\nvar\n  OutgoingRequest,\n  IncomingMessage,\n  IncomingRequest,\n  IncomingResponse;\n\n/**\n * @augments SIP\n * @class Class for outgoing SIP request.\n * @param {String} method request method\n * @param {String} ruri request uri\n * @param {SIP.UA} ua\n * @param {Object} params parameters that will have priority over ua.configuration parameters:\n * <br>\n *  - cseq, call_id, from_tag, from_uri, from_displayName, to_uri, to_tag, route_set\n * @param {Object} [headers] extra headers\n * @param {String} [body]\n */\nOutgoingRequest = function(method, ruri, ua, params, extraHeaders, body) {\n  var\n    to,\n    from,\n    call_id,\n    cseq;\n\n  params = params || {};\n\n  // Mandatory parameters check\n  if(!method || !ruri || !ua) {\n    return null;\n  }\n\n  this.logger = ua.getLogger('sip.sipmessage');\n  this.ua = ua;\n  this.headers = {};\n  this.method = method;\n  this.ruri = ruri;\n  this.body = body;\n  this.extraHeaders = (extraHeaders || []).slice();\n  this.statusCode = params.status_code;\n  this.reasonPhrase = params.reason_phrase;\n\n  // Fill the Common SIP Request Headers\n\n  // Route\n  if (params.route_set) {\n    this.setHeader('route', params.route_set);\n  } else if (ua.configuration.usePreloadedRoute){\n    this.setHeader('route', ua.transport.server.sip_uri);\n  }\n\n  // Via\n  // Empty Via header. Will be filled by the client transaction.\n  this.setHeader('via', '');\n\n  // Max-Forwards\n  this.setHeader('max-forwards', SIP.UA.C.MAX_FORWARDS);\n\n  // To\n  to = (params.to_displayName || params.to_displayName === 0) ? '\"' + params.to_displayName + '\" ' : '';\n  to += '<' + (params.to_uri || ruri) + '>';\n  to += params.to_tag ? ';tag=' + params.to_tag : '';\n  this.to = new SIP.NameAddrHeader.parse(to);\n  this.setHeader('to', to);\n\n  // From\n  if (params.from_displayName || params.from_displayName === 0) {\n    from = '\"' + params.from_displayName + '\" ';\n  } else if (ua.configuration.displayName) {\n    from = '\"' + ua.configuration.displayName + '\" ';\n  } else {\n    from = '';\n  }\n  from += '<' + (params.from_uri || ua.configuration.uri) + '>;tag=';\n  from += params.from_tag || SIP.Utils.newTag();\n  this.from = new SIP.NameAddrHeader.parse(from);\n  this.setHeader('from', from);\n\n  // Call-ID\n  call_id = params.call_id || (ua.configuration.sipjsId + SIP.Utils.createRandomToken(15));\n  this.call_id = call_id;\n  this.setHeader('call-id', call_id);\n\n  // CSeq\n  cseq = params.cseq || Math.floor(Math.random() * 10000);\n  this.cseq = cseq;\n  this.setHeader('cseq', cseq + ' ' + method);\n};\n\nOutgoingRequest.prototype = {\n  /**\n   * Replace the the given header by the given value.\n   * @param {String} name header name\n   * @param {String | Array} value header value\n   */\n  setHeader: function(name, value) {\n    this.headers[SIP.Utils.headerize(name)] = (value instanceof Array) ? value : [value];\n  },\n\n  /**\n   * Get the value of the given header name at the given position.\n   * @param {String} name header name\n   * @returns {String|undefined} Returns the specified header, undefined if header doesn't exist.\n   */\n  getHeader: function(name) {\n    var regexp, idx,\n      length = this.extraHeaders.length,\n      header = this.headers[SIP.Utils.headerize(name)];\n\n    if(header) {\n      if(header[0]) {\n        return header[0];\n      }\n    } else {\n      regexp = new RegExp('^\\\\s*' + name + '\\\\s*:','i');\n      for (idx = 0; idx < length; idx++) {\n        header = this.extraHeaders[idx];\n        if (regexp.test(header)) {\n          return header.substring(header.indexOf(':')+1).trim();\n        }\n      }\n    }\n\n    return;\n  },\n\n  /**\n   * Get the header/s of the given name.\n   * @param {String} name header name\n   * @returns {Array} Array with all the headers of the specified name.\n   */\n  getHeaders: function(name) {\n    var idx, length, regexp,\n      header = this.headers[SIP.Utils.headerize(name)],\n      result = [];\n\n    if(header) {\n      length = header.length;\n      for (idx = 0; idx < length; idx++) {\n        result.push(header[idx]);\n      }\n      return result;\n    } else {\n      length = this.extraHeaders.length;\n      regexp = new RegExp('^\\\\s*' + name + '\\\\s*:','i');\n      for (idx = 0; idx < length; idx++) {\n        header = this.extraHeaders[idx];\n        if (regexp.test(header)) {\n          result.push(header.substring(header.indexOf(':')+1).trim());\n        }\n      }\n      return result;\n    }\n  },\n\n  /**\n   * Verify the existence of the given header.\n   * @param {String} name header name\n   * @returns {boolean} true if header with given name exists, false otherwise\n   */\n  hasHeader: function(name) {\n    var regexp, idx,\n      length = this.extraHeaders.length;\n\n    if (this.headers[SIP.Utils.headerize(name)]) {\n      return true;\n    } else {\n      regexp = new RegExp('^\\\\s*' + name + '\\\\s*:','i');\n      for (idx = 0; idx < length; idx++) {\n        if (regexp.test(this.extraHeaders[idx])) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  },\n\n  toString: function() {\n    var msg = '', header, length, idx, supported = [];\n\n    msg += this.method + ' ' + this.ruri + ' SIP/2.0\\r\\n';\n\n    for (header in this.headers) {\n      length = this.headers[header].length;\n      for (idx = 0; idx < length; idx++) {\n        msg += header + ': ' + this.headers[header][idx] + '\\r\\n';\n      }\n    }\n\n    length = this.extraHeaders.length;\n    for (idx = 0; idx < length; idx++) {\n      msg += this.extraHeaders[idx].trim() +'\\r\\n';\n    }\n\n    //Supported\n    if (this.method === SIP.C.REGISTER) {\n      supported.push('path', 'gruu');\n    } else if (this.method === SIP.C.INVITE &&\n               (this.ua.contact.pub_gruu || this.ua.contact.temp_gruu)) {\n      supported.push('gruu');\n    }\n\n    if (this.ua.configuration.rel100 === SIP.C.supported.SUPPORTED) {\n      supported.push('100rel');\n    }\n\n    supported.push('outbound');\n\n    msg += 'Supported: ' +  supported +'\\r\\n';\n    msg += 'User-Agent: ' + this.ua.configuration.userAgentString +'\\r\\n';\n\n    if(this.body) {\n      length = SIP.Utils.str_utf8_length(this.body);\n      msg += 'Content-Length: ' + length + '\\r\\n\\r\\n';\n      msg += this.body;\n    } else {\n      msg += 'Content-Length: 0\\r\\n\\r\\n';\n    }\n\n    return msg;\n  }\n};\n\n/**\n * @augments SIP\n * @class Class for incoming SIP message.\n */\nIncomingMessage = function(){\n  this.data = null;\n  this.headers = null;\n  this.method =  null;\n  this.via = null;\n  this.via_branch = null;\n  this.call_id = null;\n  this.cseq = null;\n  this.from = null;\n  this.from_tag = null;\n  this.to = null;\n  this.to_tag = null;\n  this.body = null;\n};\n\nIncomingMessage.prototype = {\n  /**\n  * Insert a header of the given name and value into the last position of the\n  * header array.\n  * @param {String} name header name\n  * @param {String} value header value\n  */\n  addHeader: function(name, value) {\n    var header = { raw: value };\n\n    name = SIP.Utils.headerize(name);\n\n    if(this.headers[name]) {\n      this.headers[name].push(header);\n    } else {\n      this.headers[name] = [header];\n    }\n  },\n\n  /**\n   * Get the value of the given header name at the given position.\n   * @param {String} name header name\n   * @returns {String|undefined} Returns the specified header, null if header doesn't exist.\n   */\n  getHeader: function(name) {\n    var header = this.headers[SIP.Utils.headerize(name)];\n\n    if(header) {\n      if(header[0]) {\n        return header[0].raw;\n      }\n    } else {\n      return;\n    }\n  },\n\n  /**\n   * Get the header/s of the given name.\n   * @param {String} name header name\n   * @returns {Array} Array with all the headers of the specified name.\n   */\n  getHeaders: function(name) {\n    var idx, length,\n      header = this.headers[SIP.Utils.headerize(name)],\n      result = [];\n\n    if(!header) {\n      return [];\n    }\n\n    length = header.length;\n    for (idx = 0; idx < length; idx++) {\n      result.push(header[idx].raw);\n    }\n\n    return result;\n  },\n\n  /**\n   * Verify the existence of the given header.\n   * @param {String} name header name\n   * @returns {boolean} true if header with given name exists, false otherwise\n   */\n  hasHeader: function(name) {\n    return(this.headers[SIP.Utils.headerize(name)]) ? true : false;\n  },\n\n  /**\n  * Parse the given header on the given index.\n  * @param {String} name header name\n  * @param {Number} [idx=0] header index\n  * @returns {Object|undefined} Parsed header object, undefined if the header is not present or in case of a parsing error.\n  */\n  parseHeader: function(name, idx) {\n    var header, value, parsed;\n\n    name = SIP.Utils.headerize(name);\n\n    idx = idx || 0;\n\n    if(!this.headers[name]) {\n      this.logger.log('header \"' + name + '\" not present');\n      return;\n    } else if(idx >= this.headers[name].length) {\n      this.logger.log('not so many \"' + name + '\" headers present');\n      return;\n    }\n\n    header = this.headers[name][idx];\n    value = header.raw;\n\n    if(header.parsed) {\n      return header.parsed;\n    }\n\n    //substitute '-' by '_' for grammar rule matching.\n    parsed = SIP.Grammar.parse(value, name.replace(/-/g, '_'));\n\n    if(parsed === -1) {\n      this.headers[name].splice(idx, 1); //delete from headers\n      this.logger.warn('error parsing \"' + name + '\" header field with value \"' + value + '\"');\n      return;\n    } else {\n      header.parsed = parsed;\n      return parsed;\n    }\n  },\n\n  /**\n   * Message Header attribute selector. Alias of parseHeader.\n   * @param {String} name header name\n   * @param {Number} [idx=0] header index\n   * @returns {Object|undefined} Parsed header object, undefined if the header is not present or in case of a parsing error.\n   *\n   * @example\n   * message.s('via',3).port\n   */\n  s: function(name, idx) {\n    return this.parseHeader(name, idx);\n  },\n\n  /**\n  * Replace the value of the given header by the value.\n  * @param {String} name header name\n  * @param {String} value header value\n  */\n  setHeader: function(name, value) {\n    var header = { raw: value };\n    this.headers[SIP.Utils.headerize(name)] = [header];\n  },\n\n  toString: function() {\n    return this.data;\n  }\n};\n\n/**\n * @augments IncomingMessage\n * @class Class for incoming SIP request.\n */\nIncomingRequest = function(ua) {\n  this.logger = ua.getLogger('sip.sipmessage');\n  this.ua = ua;\n  this.headers = {};\n  this.ruri = null;\n  this.transport = null;\n  this.server_transaction = null;\n};\nIncomingRequest.prototype = new IncomingMessage();\n\n/**\n* Stateful reply.\n* @param {Number} code status code\n* @param {String} reason reason phrase\n* @param {Object} headers extra headers\n* @param {String} body body\n* @param {Function} [onSuccess] onSuccess callback\n* @param {Function} [onFailure] onFailure callback\n*/\nIncomingRequest.prototype.reply = function(code, reason, extraHeaders, body, onSuccess, onFailure) {\n  var rr, vias, length, idx, response,\n  supported = [],\n    to = this.getHeader('To'),\n    r = 0,\n    v = 0;\n\n  code = code || null;\n  reason = reason || null;\n\n  // Validate code and reason values\n  if (!code || (code < 100 || code > 699)) {\n    throw new TypeError('Invalid status_code: '+ code);\n  } else if (reason && typeof reason !== 'string' && !(reason instanceof String)) {\n    throw new TypeError('Invalid reason_phrase: '+ reason);\n  }\n\n  reason = reason || SIP.C.REASON_PHRASE[code] || '';\n  extraHeaders = (extraHeaders || []).slice();\n\n  response = 'SIP/2.0 ' + code + ' ' + reason + '\\r\\n';\n\n  if(this.method === SIP.C.INVITE && code > 100 && code <= 200) {\n    rr = this.getHeaders('record-route');\n    length = rr.length;\n\n    for(r; r < length; r++) {\n      response += 'Record-Route: ' + rr[r] + '\\r\\n';\n    }\n  }\n\n  vias = this.getHeaders('via');\n  length = vias.length;\n\n  for(v; v < length; v++) {\n    response += 'Via: ' + vias[v] + '\\r\\n';\n  }\n\n  if(!this.to_tag && code > 100) {\n    to += ';tag=' + SIP.Utils.newTag();\n  } else if(this.to_tag && !this.s('to').hasParam('tag')) {\n    to += ';tag=' + this.to_tag;\n  }\n\n  response += 'To: ' + to + '\\r\\n';\n  response += 'From: ' + this.getHeader('From') + '\\r\\n';\n  response += 'Call-ID: ' + this.call_id + '\\r\\n';\n  response += 'CSeq: ' + this.cseq + ' ' + this.method + '\\r\\n';\n\n  length = extraHeaders.length;\n  for (idx = 0; idx < length; idx++) {\n    response += extraHeaders[idx].trim() +'\\r\\n';\n  }\n\n  //Supported\n  if (this.method === SIP.C.INVITE &&\n               (this.ua.contact.pub_gruu || this.ua.contact.temp_gruu)) {\n    supported.push('gruu');\n  }\n\n  if (this.ua.configuration.rel100 === SIP.C.supported.SUPPORTED) {\n    supported.push('100rel');\n  }\n\n  supported.push('outbound');\n\n  response += 'Supported: ' + supported + '\\r\\n';\n\n  if(body) {\n    length = SIP.Utils.str_utf8_length(body);\n    response += 'Content-Type: application/sdp\\r\\n';\n    response += 'Content-Length: ' + length + '\\r\\n\\r\\n';\n    response += body;\n  } else {\n    response += 'Content-Length: ' + 0 + '\\r\\n\\r\\n';\n  }\n\n  this.server_transaction.receiveResponse(code, response, onSuccess, onFailure);\n\n  return response;\n};\n\n/**\n* Stateless reply.\n* @param {Number} code status code\n* @param {String} reason reason phrase\n*/\nIncomingRequest.prototype.reply_sl = function(code, reason) {\n  var to, response,\n    v = 0,\n    vias = this.getHeaders('via'),\n    length = vias.length;\n\n  code = code || null;\n  reason = reason || null;\n\n  // Validate code and reason values\n  if (!code || (code < 100 || code > 699)) {\n    throw new TypeError('Invalid status_code: '+ code);\n  } else if (reason && typeof reason !== 'string' && !(reason instanceof String)) {\n    throw new TypeError('Invalid reason_phrase: '+ reason);\n  }\n\n  reason = reason || SIP.C.REASON_PHRASE[code] || '';\n\n  response = 'SIP/2.0 ' + code + ' ' + reason + '\\r\\n';\n\n  for(v; v < length; v++) {\n    response += 'Via: ' + vias[v] + '\\r\\n';\n  }\n\n  to = this.getHeader('To');\n\n  if(!this.to_tag && code > 100) {\n    to += ';tag=' + SIP.Utils.newTag();\n  } else if(this.to_tag && !this.s('to').hasParam('tag')) {\n    to += ';tag=' + this.to_tag;\n  }\n\n  response += 'To: ' + to + '\\r\\n';\n  response += 'From: ' + this.getHeader('From') + '\\r\\n';\n  response += 'Call-ID: ' + this.call_id + '\\r\\n';\n  response += 'CSeq: ' + this.cseq + ' ' + this.method + '\\r\\n';\n  response += 'Content-Length: ' + 0 + '\\r\\n\\r\\n';\n\n  this.transport.send(response);\n};\n\n\n/**\n * @augments IncomingMessage\n * @class Class for incoming SIP response.\n */\nIncomingResponse = function(ua) {\n  this.logger = ua.getLogger('sip.sipmessage');\n  this.headers = {};\n  this.status_code = null;\n  this.reason_phrase = null;\n};\nIncomingResponse.prototype = new IncomingMessage();\n\nSIP.OutgoingRequest = OutgoingRequest;\nSIP.IncomingRequest = IncomingRequest;\nSIP.IncomingResponse = IncomingResponse;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/sip.js/src/SIPMessage.js\n ** module id = 13\n ** module chunks = 0\n **/","/**\n * @fileoverview SIP URI\n */\n\n/**\n * @augments SIP\n * @class Class creating a SIP URI.\n *\n * @param {String} [scheme]\n * @param {String} [user]\n * @param {String} host\n * @param {String} [port]\n * @param {Object} [parameters]\n * @param {Object} [headers]\n *\n */\nmodule.exports = function (SIP) {\nvar URI;\n\nURI = function(scheme, user, host, port, parameters, headers) {\n  var param, header;\n\n  // Checks\n  if(!host) {\n    throw new TypeError('missing or invalid \"host\" parameter');\n  }\n\n  // Initialize parameters\n  scheme = scheme || SIP.C.SIP;\n  this.parameters = {};\n  this.headers = {};\n\n  for (param in parameters) {\n    this.setParam(param, parameters[param]);\n  }\n\n  for (header in headers) {\n    this.setHeader(header, headers[header]);\n  }\n\n  Object.defineProperties(this, {\n    scheme: {\n      get: function(){ return scheme; },\n      set: function(value){\n        scheme = value.toLowerCase();\n      }\n    },\n\n    user: {\n      get: function(){ return user; },\n      set: function(value){\n        user = value;\n      }\n    },\n\n    host: {\n      get: function(){ return host; },\n      set: function(value){\n        host = value.toLowerCase();\n      }\n    },\n\n    port: {\n      get: function(){ return port; },\n      set: function(value){\n        port = value === 0 ? value : (parseInt(value,10) || null);\n      }\n    }\n  });\n};\nURI.prototype = {\n  setParam: function(key, value) {\n    if(key) {\n      this.parameters[key.toLowerCase()] = (typeof value === 'undefined' || value === null) ? null : value.toString().toLowerCase();\n    }\n  },\n\n  getParam: function(key) {\n    if(key) {\n      return this.parameters[key.toLowerCase()];\n    }\n  },\n\n  hasParam: function(key) {\n    if(key) {\n      return (this.parameters.hasOwnProperty(key.toLowerCase()) && true) || false;\n    }\n  },\n\n  deleteParam: function(parameter) {\n    var value;\n    parameter = parameter.toLowerCase();\n    if (this.parameters.hasOwnProperty(parameter)) {\n      value = this.parameters[parameter];\n      delete this.parameters[parameter];\n      return value;\n    }\n  },\n\n  clearParams: function() {\n    this.parameters = {};\n  },\n\n  setHeader: function(name, value) {\n    this.headers[SIP.Utils.headerize(name)] = (value instanceof Array) ? value : [value];\n  },\n\n  getHeader: function(name) {\n    if(name) {\n      return this.headers[SIP.Utils.headerize(name)];\n    }\n  },\n\n  hasHeader: function(name) {\n    if(name) {\n      return (this.headers.hasOwnProperty(SIP.Utils.headerize(name)) && true) || false;\n    }\n  },\n\n  deleteHeader: function(header) {\n    var value;\n    header = SIP.Utils.headerize(header);\n    if(this.headers.hasOwnProperty(header)) {\n      value = this.headers[header];\n      delete this.headers[header];\n      return value;\n    }\n  },\n\n  clearHeaders: function() {\n    this.headers = {};\n  },\n\n  clone: function() {\n    return new URI(\n      this.scheme,\n      this.user,\n      this.host,\n      this.port,\n      JSON.parse(JSON.stringify(this.parameters)),\n      JSON.parse(JSON.stringify(this.headers)));\n  },\n\n  toString: function(){\n    var header, parameter, idx, uri,\n      headers = [];\n\n    uri  = this.scheme + ':';\n    // add slashes if it's not a sip(s) URI\n    if (!this.scheme.match(\"^sips?$\")) {\n      uri += \"//\";\n    }\n    if (this.user) {\n      uri += SIP.Utils.escapeUser(this.user) + '@';\n    }\n    uri += this.host;\n    if (this.port || this.port === 0) {\n      uri += ':' + this.port;\n    }\n\n    for (parameter in this.parameters) {\n      uri += ';' + parameter;\n\n      if (this.parameters[parameter] !== null) {\n        uri += '='+ this.parameters[parameter];\n      }\n    }\n\n    for(header in this.headers) {\n      for(idx in this.headers[header]) {\n        headers.push(header + '=' + this.headers[header][idx]);\n      }\n    }\n\n    if (headers.length > 0) {\n      uri += '?' + headers.join('&');\n    }\n\n    return uri;\n  }\n};\n\n\n/**\n  * Parse the given string and returns a SIP.URI instance or undefined if\n  * it is an invalid URI.\n  * @public\n  * @param {String} uri\n  */\nURI.parse = function(uri) {\n  uri = SIP.Grammar.parse(uri,'SIP_URI');\n\n  if (uri !== -1) {\n    return uri;\n  } else {\n    return undefined;\n  }\n};\n\nSIP.URI = URI;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/sip.js/src/URI.js\n ** module id = 14\n ** module chunks = 0\n **/","/**\n * @fileoverview SIP NameAddrHeader\n */\n\n/**\n * @augments SIP\n * @class Class creating a Name Address SIP header.\n *\n * @param {SIP.URI} uri\n * @param {String} [displayName]\n * @param {Object} [parameters]\n *\n */\nmodule.exports = function (SIP) {\nvar NameAddrHeader;\n\nNameAddrHeader = function(uri, displayName, parameters) {\n  var param;\n\n  // Checks\n  if(!uri || !(uri instanceof SIP.URI)) {\n    throw new TypeError('missing or invalid \"uri\" parameter');\n  }\n\n  // Initialize parameters\n  this.uri = uri;\n  this.parameters = {};\n\n  for (param in parameters) {\n    this.setParam(param, parameters[param]);\n  }\n\n  Object.defineProperties(this, {\n    displayName: {\n      get: function() { return displayName; },\n      set: function(value) {\n        displayName = (value === 0) ? '0' : value;\n      }\n    }\n  });\n};\nNameAddrHeader.prototype = {\n  setParam: function (key, value) {\n    if(key) {\n      this.parameters[key.toLowerCase()] = (typeof value === 'undefined' || value === null) ? null : value.toString();\n    }\n  },\n  getParam: SIP.URI.prototype.getParam,\n  hasParam: SIP.URI.prototype.hasParam,\n  deleteParam: SIP.URI.prototype.deleteParam,\n  clearParams: SIP.URI.prototype.clearParams,\n\n  clone: function() {\n    return new NameAddrHeader(\n      this.uri.clone(),\n      this.displayName,\n      JSON.parse(JSON.stringify(this.parameters)));\n  },\n\n  toString: function() {\n    var body, parameter;\n\n    body  = (this.displayName || this.displayName === 0) ? '\"' + this.displayName + '\" ' : '';\n    body += '<' + this.uri.toString() + '>';\n\n    for (parameter in this.parameters) {\n      body += ';' + parameter;\n\n      if (this.parameters[parameter] !== null) {\n        body += '='+ this.parameters[parameter];\n      }\n    }\n\n    return body;\n  }\n};\n\n\n/**\n  * Parse the given string and returns a SIP.NameAddrHeader instance or undefined if\n  * it is an invalid NameAddrHeader.\n  * @public\n  * @param {String} name_addr_header\n  */\nNameAddrHeader.parse = function(name_addr_header) {\n  name_addr_header = SIP.Grammar.parse(name_addr_header,'Name_Addr_Header');\n\n  if (name_addr_header !== -1) {\n    return name_addr_header;\n  } else {\n    return undefined;\n  }\n};\n\nSIP.NameAddrHeader = NameAddrHeader;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/sip.js/src/NameAddrHeader.js\n ** module id = 15\n ** module chunks = 0\n **/","/**\n * @fileoverview SIP Transactions\n */\n\n/**\n * SIP Transactions module.\n * @augments SIP\n */\nmodule.exports = function (SIP) {\nvar\n  C = {\n    // Transaction states\n    STATUS_TRYING:     1,\n    STATUS_PROCEEDING: 2,\n    STATUS_CALLING:    3,\n    STATUS_ACCEPTED:   4,\n    STATUS_COMPLETED:  5,\n    STATUS_TERMINATED: 6,\n    STATUS_CONFIRMED:  7,\n\n    // Transaction types\n    NON_INVITE_CLIENT: 'nict',\n    NON_INVITE_SERVER: 'nist',\n    INVITE_CLIENT: 'ict',\n    INVITE_SERVER: 'ist'\n  };\n\n/**\n* @augments SIP.Transactions\n* @class Non Invite Client Transaction\n* @param {SIP.RequestSender} request_sender\n* @param {SIP.OutgoingRequest} request\n* @param {SIP.Transport} transport\n*/\nvar NonInviteClientTransaction = function(request_sender, request, transport) {\n  var via,\n    events = ['stateChanged'];\n\n  this.type = C.NON_INVITE_CLIENT;\n  this.transport = transport;\n  this.id = 'z9hG4bK' + Math.floor(Math.random() * 10000000);\n  this.request_sender = request_sender;\n  this.request = request;\n\n  this.logger = request_sender.ua.getLogger('sip.transaction.nict', this.id);\n\n  via = 'SIP/2.0/' + (request_sender.ua.configuration.hackViaTcp ? 'TCP' : transport.server.scheme);\n  via += ' ' + request_sender.ua.configuration.viaHost + ';branch=' + this.id;\n\n  this.request.setHeader('via', via);\n\n  this.request_sender.ua.newTransaction(this);\n\n  this.initEvents(events);\n};\nNonInviteClientTransaction.prototype = new SIP.EventEmitter();\n\nNonInviteClientTransaction.prototype.stateChanged = function(state) {\n  this.state = state;\n  this.emit('stateChanged');\n};\n\nNonInviteClientTransaction.prototype.send = function() {\n  var tr = this;\n\n  this.stateChanged(C.STATUS_TRYING);\n  this.F = SIP.Timers.setTimeout(tr.timer_F.bind(tr), SIP.Timers.TIMER_F);\n\n  if(!this.transport.send(this.request)) {\n    this.onTransportError();\n  }\n};\n\nNonInviteClientTransaction.prototype.onTransportError = function() {\n  this.logger.log('transport error occurred, deleting non-INVITE client transaction ' + this.id);\n  SIP.Timers.clearTimeout(this.F);\n  SIP.Timers.clearTimeout(this.K);\n  this.stateChanged(C.STATUS_TERMINATED);\n  this.request_sender.ua.destroyTransaction(this);\n  this.request_sender.onTransportError();\n};\n\nNonInviteClientTransaction.prototype.timer_F = function() {\n  this.logger.log('Timer F expired for non-INVITE client transaction ' + this.id);\n  this.stateChanged(C.STATUS_TERMINATED);\n  this.request_sender.ua.destroyTransaction(this);\n  this.request_sender.onRequestTimeout();\n};\n\nNonInviteClientTransaction.prototype.timer_K = function() {\n  this.stateChanged(C.STATUS_TERMINATED);\n  this.request_sender.ua.destroyTransaction(this);\n};\n\nNonInviteClientTransaction.prototype.receiveResponse = function(response) {\n  var\n    tr = this,\n    status_code = response.status_code;\n\n  if(status_code < 200) {\n    switch(this.state) {\n      case C.STATUS_TRYING:\n      case C.STATUS_PROCEEDING:\n        this.stateChanged(C.STATUS_PROCEEDING);\n        this.request_sender.receiveResponse(response);\n        break;\n    }\n  } else {\n    switch(this.state) {\n      case C.STATUS_TRYING:\n      case C.STATUS_PROCEEDING:\n        this.stateChanged(C.STATUS_COMPLETED);\n        SIP.Timers.clearTimeout(this.F);\n\n        if(status_code === 408) {\n          this.request_sender.onRequestTimeout();\n        } else {\n          this.request_sender.receiveResponse(response);\n        }\n\n        this.K = SIP.Timers.setTimeout(tr.timer_K.bind(tr), SIP.Timers.TIMER_K);\n        break;\n      case C.STATUS_COMPLETED:\n        break;\n    }\n  }\n};\n\n\n\n/**\n* @augments SIP.Transactions\n* @class Invite Client Transaction\n* @param {SIP.RequestSender} request_sender\n* @param {SIP.OutgoingRequest} request\n* @param {SIP.Transport} transport\n*/\nvar InviteClientTransaction = function(request_sender, request, transport) {\n  var via,\n    tr = this,\n    events = ['stateChanged'];\n\n  this.type = C.INVITE_CLIENT;\n  this.transport = transport;\n  this.id = 'z9hG4bK' + Math.floor(Math.random() * 10000000);\n  this.request_sender = request_sender;\n  this.request = request;\n\n  this.logger = request_sender.ua.getLogger('sip.transaction.ict', this.id);\n\n  via = 'SIP/2.0/' + (request_sender.ua.configuration.hackViaTcp ? 'TCP' : transport.server.scheme);\n  via += ' ' + request_sender.ua.configuration.viaHost + ';branch=' + this.id;\n\n  this.request.setHeader('via', via);\n\n  this.request_sender.ua.newTransaction(this);\n\n  // Add the cancel property to the request.\n  //Will be called from the request instance, not the transaction itself.\n  this.request.cancel = function(reason) {\n    tr.cancel_request(tr, reason);\n  };\n\n  this.initEvents(events);\n};\nInviteClientTransaction.prototype = new SIP.EventEmitter();\n\nInviteClientTransaction.prototype.stateChanged = function(state) {\n  this.state = state;\n  this.emit('stateChanged');\n};\n\nInviteClientTransaction.prototype.send = function() {\n  var tr = this;\n  this.stateChanged(C.STATUS_CALLING);\n  this.B = SIP.Timers.setTimeout(tr.timer_B.bind(tr), SIP.Timers.TIMER_B);\n\n  if(!this.transport.send(this.request)) {\n    this.onTransportError();\n  }\n};\n\nInviteClientTransaction.prototype.onTransportError = function() {\n  this.logger.log('transport error occurred, deleting INVITE client transaction ' + this.id);\n  SIP.Timers.clearTimeout(this.B);\n  SIP.Timers.clearTimeout(this.D);\n  SIP.Timers.clearTimeout(this.M);\n  this.stateChanged(C.STATUS_TERMINATED);\n  this.request_sender.ua.destroyTransaction(this);\n\n  if (this.state !== C.STATUS_ACCEPTED) {\n    this.request_sender.onTransportError();\n  }\n};\n\n// RFC 6026 7.2\nInviteClientTransaction.prototype.timer_M = function() {\n  this.logger.log('Timer M expired for INVITE client transaction ' + this.id);\n\n  if(this.state === C.STATUS_ACCEPTED) {\n    SIP.Timers.clearTimeout(this.B);\n    this.stateChanged(C.STATUS_TERMINATED);\n    this.request_sender.ua.destroyTransaction(this);\n  }\n};\n\n// RFC 3261 17.1.1\nInviteClientTransaction.prototype.timer_B = function() {\n  this.logger.log('Timer B expired for INVITE client transaction ' + this.id);\n  if(this.state === C.STATUS_CALLING) {\n    this.stateChanged(C.STATUS_TERMINATED);\n    this.request_sender.ua.destroyTransaction(this);\n    this.request_sender.onRequestTimeout();\n  }\n};\n\nInviteClientTransaction.prototype.timer_D = function() {\n  this.logger.log('Timer D expired for INVITE client transaction ' + this.id);\n  SIP.Timers.clearTimeout(this.B);\n  this.stateChanged(C.STATUS_TERMINATED);\n  this.request_sender.ua.destroyTransaction(this);\n};\n\nInviteClientTransaction.prototype.sendACK = function(response) {\n  var tr = this;\n\n  this.ack = 'ACK ' + this.request.ruri + ' SIP/2.0\\r\\n';\n  this.ack += 'Via: ' + this.request.headers['Via'].toString() + '\\r\\n';\n\n  if(this.request.headers['Route']) {\n    this.ack += 'Route: ' + this.request.headers['Route'].toString() + '\\r\\n';\n  }\n\n  this.ack += 'To: ' + response.getHeader('to') + '\\r\\n';\n  this.ack += 'From: ' + this.request.headers['From'].toString() + '\\r\\n';\n  this.ack += 'Call-ID: ' + this.request.headers['Call-ID'].toString() + '\\r\\n';\n  this.ack += 'CSeq: ' + this.request.headers['CSeq'].toString().split(' ')[0];\n  this.ack += ' ACK\\r\\n\\r\\n';\n\n  this.D = SIP.Timers.setTimeout(tr.timer_D.bind(tr), SIP.Timers.TIMER_D);\n\n  this.transport.send(this.ack);\n};\n\nInviteClientTransaction.prototype.cancel_request = function(tr, reason) {\n  var request = tr.request;\n\n  this.cancel = SIP.C.CANCEL + ' ' + request.ruri + ' SIP/2.0\\r\\n';\n  this.cancel += 'Via: ' + request.headers['Via'].toString() + '\\r\\n';\n\n  if(this.request.headers['Route']) {\n    this.cancel += 'Route: ' + request.headers['Route'].toString() + '\\r\\n';\n  }\n\n  this.cancel += 'To: ' + request.headers['To'].toString() + '\\r\\n';\n  this.cancel += 'From: ' + request.headers['From'].toString() + '\\r\\n';\n  this.cancel += 'Call-ID: ' + request.headers['Call-ID'].toString() + '\\r\\n';\n  this.cancel += 'CSeq: ' + request.headers['CSeq'].toString().split(' ')[0] +\n  ' CANCEL\\r\\n';\n\n  if(reason) {\n    this.cancel += 'Reason: ' + reason + '\\r\\n';\n  }\n\n  this.cancel += 'Content-Length: 0\\r\\n\\r\\n';\n\n  // Send only if a provisional response (>100) has been received.\n  if(this.state === C.STATUS_PROCEEDING) {\n    this.transport.send(this.cancel);\n  }\n};\n\nInviteClientTransaction.prototype.receiveResponse = function(response) {\n  var\n  tr = this,\n  status_code = response.status_code;\n\n  if(status_code >= 100 && status_code <= 199) {\n    switch(this.state) {\n      case C.STATUS_CALLING:\n        this.stateChanged(C.STATUS_PROCEEDING);\n        this.request_sender.receiveResponse(response);\n        if(this.cancel) {\n          this.transport.send(this.cancel);\n        }\n        break;\n      case C.STATUS_PROCEEDING:\n        this.request_sender.receiveResponse(response);\n        break;\n    }\n  } else if(status_code >= 200 && status_code <= 299) {\n    switch(this.state) {\n      case C.STATUS_CALLING:\n      case C.STATUS_PROCEEDING:\n        this.stateChanged(C.STATUS_ACCEPTED);\n        this.M = SIP.Timers.setTimeout(tr.timer_M.bind(tr), SIP.Timers.TIMER_M);\n        this.request_sender.receiveResponse(response);\n        break;\n      case C.STATUS_ACCEPTED:\n        this.request_sender.receiveResponse(response);\n        break;\n    }\n  } else if(status_code >= 300 && status_code <= 699) {\n    switch(this.state) {\n      case C.STATUS_CALLING:\n      case C.STATUS_PROCEEDING:\n        this.stateChanged(C.STATUS_COMPLETED);\n        this.sendACK(response);\n        this.request_sender.receiveResponse(response);\n        break;\n      case C.STATUS_COMPLETED:\n        this.sendACK(response);\n        break;\n    }\n  }\n};\n\n\n/**\n * @augments SIP.Transactions\n * @class ACK Client Transaction\n * @param {SIP.RequestSender} request_sender\n * @param {SIP.OutgoingRequest} request\n * @param {SIP.Transport} transport\n */\nvar AckClientTransaction = function(request_sender, request, transport) {\n  var via;\n\n  this.transport = transport;\n  this.id = 'z9hG4bK' + Math.floor(Math.random() * 10000000);\n  this.request_sender = request_sender;\n  this.request = request;\n\n  this.logger = request_sender.ua.getLogger('sip.transaction.nict', this.id);\n\n  via = 'SIP/2.0/' + (request_sender.ua.configuration.hackViaTcp ? 'TCP' : transport.server.scheme);\n  via += ' ' + request_sender.ua.configuration.viaHost + ';branch=' + this.id;\n\n  this.request.setHeader('via', via);\n};\nAckClientTransaction.prototype = new SIP.EventEmitter();\n\nAckClientTransaction.prototype.send = function() {\n  if(!this.transport.send(this.request)) {\n    this.onTransportError();\n  }\n};\n\nAckClientTransaction.prototype.onTransportError = function() {\n  this.logger.log('transport error occurred, for an ACK client transaction ' + this.id);\n  this.request_sender.onTransportError();\n};\n\n\n/**\n* @augments SIP.Transactions\n* @class Non Invite Server Transaction\n* @param {SIP.IncomingRequest} request\n* @param {SIP.UA} ua\n*/\nvar NonInviteServerTransaction = function(request, ua) {\n  var events = ['stateChanged'];\n\n  this.type = C.NON_INVITE_SERVER;\n  this.id = request.via_branch;\n  this.request = request;\n  this.transport = request.transport;\n  this.ua = ua;\n  this.last_response = '';\n  request.server_transaction = this;\n\n  this.logger = ua.getLogger('sip.transaction.nist', this.id);\n\n  this.state = C.STATUS_TRYING;\n\n  ua.newTransaction(this);\n\n  this.initEvents(events);\n};\nNonInviteServerTransaction.prototype = new SIP.EventEmitter();\n\nNonInviteServerTransaction.prototype.stateChanged = function(state) {\n  this.state = state;\n  this.emit('stateChanged');\n};\n\nNonInviteServerTransaction.prototype.timer_J = function() {\n  this.logger.log('Timer J expired for non-INVITE server transaction ' + this.id);\n  this.stateChanged(C.STATUS_TERMINATED);\n  this.ua.destroyTransaction(this);\n};\n\nNonInviteServerTransaction.prototype.onTransportError = function() {\n  if (!this.transportError) {\n    this.transportError = true;\n\n    this.logger.log('transport error occurred, deleting non-INVITE server transaction ' + this.id);\n\n    SIP.Timers.clearTimeout(this.J);\n    this.stateChanged(C.STATUS_TERMINATED);\n    this.ua.destroyTransaction(this);\n  }\n};\n\nNonInviteServerTransaction.prototype.receiveResponse = function(status_code, response, onSuccess, onFailure) {\n  var tr = this;\n\n  if(status_code === 100) {\n    /* RFC 4320 4.1\n     * 'A SIP element MUST NOT\n     * send any provisional response with a\n     * Status-Code other than 100 to a non-INVITE request.'\n     */\n    switch(this.state) {\n      case C.STATUS_TRYING:\n        this.stateChanged(C.STATUS_PROCEEDING);\n        if(!this.transport.send(response))  {\n          this.onTransportError();\n        }\n        break;\n      case C.STATUS_PROCEEDING:\n        this.last_response = response;\n        if(!this.transport.send(response)) {\n          this.onTransportError();\n          if (onFailure) {\n            onFailure();\n          }\n        } else if (onSuccess) {\n          onSuccess();\n        }\n        break;\n    }\n  } else if(status_code >= 200 && status_code <= 699) {\n    switch(this.state) {\n      case C.STATUS_TRYING:\n      case C.STATUS_PROCEEDING:\n        this.stateChanged(C.STATUS_COMPLETED);\n        this.last_response = response;\n        this.J = SIP.Timers.setTimeout(tr.timer_J.bind(tr), SIP.Timers.TIMER_J);\n        if(!this.transport.send(response)) {\n          this.onTransportError();\n          if (onFailure) {\n            onFailure();\n          }\n        } else if (onSuccess) {\n          onSuccess();\n        }\n        break;\n      case C.STATUS_COMPLETED:\n        break;\n    }\n  }\n};\n\n/**\n* @augments SIP.Transactions\n* @class Invite Server Transaction\n* @param {SIP.IncomingRequest} request\n* @param {SIP.UA} ua\n*/\nvar InviteServerTransaction = function(request, ua) {\n  var events = ['stateChanged'];\n\n  this.type = C.INVITE_SERVER;\n  this.id = request.via_branch;\n  this.request = request;\n  this.transport = request.transport;\n  this.ua = ua;\n  this.last_response = '';\n  request.server_transaction = this;\n\n  this.logger = ua.getLogger('sip.transaction.ist', this.id);\n\n  this.state = C.STATUS_PROCEEDING;\n\n  ua.newTransaction(this);\n\n  this.resendProvisionalTimer = null;\n\n  request.reply(100);\n\n  this.initEvents(events);\n};\nInviteServerTransaction.prototype = new SIP.EventEmitter();\n\nInviteServerTransaction.prototype.stateChanged = function(state) {\n  this.state = state;\n  this.emit('stateChanged');\n};\n\nInviteServerTransaction.prototype.timer_H = function() {\n  this.logger.log('Timer H expired for INVITE server transaction ' + this.id);\n\n  if(this.state === C.STATUS_COMPLETED) {\n    this.logger.warn('transactions', 'ACK for INVITE server transaction was never received, call will be terminated');\n  }\n\n  this.stateChanged(C.STATUS_TERMINATED);\n  this.ua.destroyTransaction(this);\n};\n\nInviteServerTransaction.prototype.timer_I = function() {\n  this.stateChanged(C.STATUS_TERMINATED);\n  this.ua.destroyTransaction(this);\n};\n\n// RFC 6026 7.1\nInviteServerTransaction.prototype.timer_L = function() {\n  this.logger.log('Timer L expired for INVITE server transaction ' + this.id);\n\n  if(this.state === C.STATUS_ACCEPTED) {\n    this.stateChanged(C.STATUS_TERMINATED);\n    this.ua.destroyTransaction(this);\n  }\n};\n\nInviteServerTransaction.prototype.onTransportError = function() {\n  if (!this.transportError) {\n    this.transportError = true;\n\n    this.logger.log('transport error occurred, deleting INVITE server transaction ' + this.id);\n\n    if (this.resendProvisionalTimer !== null) {\n      SIP.Timers.clearInterval(this.resendProvisionalTimer);\n      this.resendProvisionalTimer = null;\n    }\n\n    SIP.Timers.clearTimeout(this.L);\n    SIP.Timers.clearTimeout(this.H);\n    SIP.Timers.clearTimeout(this.I);\n\n    this.stateChanged(C.STATUS_TERMINATED);\n    this.ua.destroyTransaction(this);\n  }\n};\n\nInviteServerTransaction.prototype.resend_provisional = function() {\n  if(!this.transport.send(this.last_response)) {\n    this.onTransportError();\n  }\n};\n\n// INVITE Server Transaction RFC 3261 17.2.1\nInviteServerTransaction.prototype.receiveResponse = function(status_code, response, onSuccess, onFailure) {\n  var tr = this;\n\n  if(status_code >= 100 && status_code <= 199) {\n    switch(this.state) {\n      case C.STATUS_PROCEEDING:\n        if(!this.transport.send(response)) {\n          this.onTransportError();\n        }\n        this.last_response = response;\n        break;\n    }\n  }\n\n  if(status_code > 100 && status_code <= 199 && this.state === C.STATUS_PROCEEDING) {\n    // Trigger the resendProvisionalTimer only for the first non 100 provisional response.\n    if(this.resendProvisionalTimer === null) {\n      this.resendProvisionalTimer = SIP.Timers.setInterval(tr.resend_provisional.bind(tr),\n        SIP.Timers.PROVISIONAL_RESPONSE_INTERVAL);\n    }\n  } else if(status_code >= 200 && status_code <= 299) {\n    switch(this.state) {\n      case C.STATUS_PROCEEDING:\n        this.stateChanged(C.STATUS_ACCEPTED);\n        this.last_response = response;\n        this.L = SIP.Timers.setTimeout(tr.timer_L.bind(tr), SIP.Timers.TIMER_L);\n\n        if (this.resendProvisionalTimer !== null) {\n          SIP.Timers.clearInterval(this.resendProvisionalTimer);\n          this.resendProvisionalTimer = null;\n        }\n        /* falls through */\n        case C.STATUS_ACCEPTED:\n          // Note that this point will be reached for proceeding tr.state also.\n          if(!this.transport.send(response)) {\n            this.onTransportError();\n            if (onFailure) {\n              onFailure();\n            }\n          } else if (onSuccess) {\n            onSuccess();\n          }\n          break;\n    }\n  } else if(status_code >= 300 && status_code <= 699) {\n    switch(this.state) {\n      case C.STATUS_PROCEEDING:\n        if (this.resendProvisionalTimer !== null) {\n          SIP.Timers.clearInterval(this.resendProvisionalTimer);\n          this.resendProvisionalTimer = null;\n        }\n\n        if(!this.transport.send(response)) {\n          this.onTransportError();\n          if (onFailure) {\n            onFailure();\n          }\n        } else {\n          this.stateChanged(C.STATUS_COMPLETED);\n          this.H = SIP.Timers.setTimeout(tr.timer_H.bind(tr), SIP.Timers.TIMER_H);\n          if (onSuccess) {\n            onSuccess();\n          }\n        }\n        break;\n    }\n  }\n};\n\n/**\n * @function\n * @param {SIP.UA} ua\n * @param {SIP.IncomingRequest} request\n *\n * @return {boolean}\n * INVITE:\n *  _true_ if retransmission\n *  _false_ new request\n *\n * ACK:\n *  _true_  ACK to non2xx response\n *  _false_ ACK must be passed to TU (accepted state)\n *          ACK to 2xx response\n *\n * CANCEL:\n *  _true_  no matching invite transaction\n *  _false_ matching invite transaction and no final response sent\n *\n * OTHER:\n *  _true_  retransmission\n *  _false_ new request\n */\nvar checkTransaction = function(ua, request) {\n  var tr;\n\n  switch(request.method) {\n    case SIP.C.INVITE:\n      tr = ua.transactions.ist[request.via_branch];\n      if(tr) {\n        switch(tr.state) {\n          case C.STATUS_PROCEEDING:\n            tr.transport.send(tr.last_response);\n            break;\n\n            // RFC 6026 7.1 Invite retransmission\n            //received while in C.STATUS_ACCEPTED state. Absorb it.\n          case C.STATUS_ACCEPTED:\n            break;\n        }\n        return true;\n      }\n      break;\n    case SIP.C.ACK:\n      tr = ua.transactions.ist[request.via_branch];\n\n      // RFC 6026 7.1\n      if(tr) {\n        if(tr.state === C.STATUS_ACCEPTED) {\n          return false;\n        } else if(tr.state === C.STATUS_COMPLETED) {\n          tr.state = C.STATUS_CONFIRMED;\n          tr.I = SIP.Timers.setTimeout(tr.timer_I.bind(tr), SIP.Timers.TIMER_I);\n          return true;\n        }\n      }\n\n      // ACK to 2XX Response.\n      else {\n        return false;\n      }\n      break;\n    case SIP.C.CANCEL:\n      tr = ua.transactions.ist[request.via_branch];\n      if(tr) {\n        request.reply_sl(200);\n        if(tr.state === C.STATUS_PROCEEDING) {\n          return false;\n        } else {\n          return true;\n        }\n      } else {\n        request.reply_sl(481);\n        return true;\n      }\n      break;\n    default:\n\n      // Non-INVITE Server Transaction RFC 3261 17.2.2\n      tr = ua.transactions.nist[request.via_branch];\n      if(tr) {\n        switch(tr.state) {\n          case C.STATUS_TRYING:\n            break;\n          case C.STATUS_PROCEEDING:\n          case C.STATUS_COMPLETED:\n            tr.transport.send(tr.last_response);\n            break;\n        }\n        return true;\n      }\n      break;\n  }\n};\n\nSIP.Transactions = {\n  C: C,\n  checkTransaction: checkTransaction,\n  NonInviteClientTransaction: NonInviteClientTransaction,\n  InviteClientTransaction: InviteClientTransaction,\n  AckClientTransaction: AckClientTransaction,\n  NonInviteServerTransaction: NonInviteServerTransaction,\n  InviteServerTransaction: InviteServerTransaction\n};\n\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/sip.js/src/Transactions.js\n ** module id = 16\n ** module chunks = 0\n **/","\n/**\n * @fileoverview In-Dialog Request Sender\n */\n\n/**\n * @augments SIP.Dialog\n * @class Class creating an In-dialog request sender.\n * @param {SIP.Dialog} dialog\n * @param {Object} applicant\n * @param {SIP.OutgoingRequest} request\n */\n/**\n * @fileoverview in-Dialog Request Sender\n */\n\nmodule.exports = function (SIP) {\nvar RequestSender;\n\nRequestSender = function(dialog, applicant, request) {\n\n  this.dialog = dialog;\n  this.applicant = applicant;\n  this.request = request;\n\n  // RFC3261 14.1 Modifying an Existing Session. UAC Behavior.\n  this.reattempt = false;\n  this.reattemptTimer = null;\n};\n\nRequestSender.prototype = {\n  send: function() {\n    var self = this,\n      request_sender = new SIP.RequestSender(this, this.dialog.owner.ua);\n\n      request_sender.send();\n\n    // RFC3261 14.2 Modifying an Existing Session -UAC BEHAVIOR-\n    if (this.request.method === SIP.C.INVITE && request_sender.clientTransaction.state !== SIP.Transactions.C.STATUS_TERMINATED) {\n      this.dialog.uac_pending_reply = true;\n      request_sender.clientTransaction.on('stateChanged', function stateChanged(){\n        if (this.state === SIP.Transactions.C.STATUS_ACCEPTED ||\n            this.state === SIP.Transactions.C.STATUS_COMPLETED ||\n            this.state === SIP.Transactions.C.STATUS_TERMINATED) {\n\n          this.off('stateChanged', stateChanged);\n          self.dialog.uac_pending_reply = false;\n\n          if (self.dialog.uas_pending_reply === false) {\n            self.dialog.owner.onReadyToReinvite();\n          }\n        }\n      });\n    }\n  },\n\n  onRequestTimeout: function() {\n    this.applicant.onRequestTimeout();\n  },\n\n  onTransportError: function() {\n    this.applicant.onTransportError();\n  },\n\n  receiveResponse: function(response) {\n    var self = this;\n\n    // RFC3261 12.2.1.2 408 or 481 is received for a request within a dialog.\n    if (response.status_code === 408 || response.status_code === 481) {\n      this.applicant.onDialogError(response);\n    } else if (response.method === SIP.C.INVITE && response.status_code === 491) {\n      if (this.reattempt) {\n        this.applicant.receiveResponse(response);\n      } else {\n        this.request.cseq.value = this.dialog.local_seqnum += 1;\n        this.reattemptTimer = SIP.Timers.setTimeout(\n          function() {\n            if (self.applicant.owner.status !== SIP.Session.C.STATUS_TERMINATED) {\n              self.reattempt = true;\n              self.request_sender.send();\n            }\n          },\n          this.getReattemptTimeout()\n        );\n      }\n    } else {\n      this.applicant.receiveResponse(response);\n    }\n  }\n};\n\nreturn RequestSender;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/sip.js/src/Dialog/RequestSender.js\n ** module id = 17\n ** module chunks = 0\n **/","/**\n * @fileoverview SIP Dialog\n */\n\n/**\n * @augments SIP\n * @class Class creating a SIP dialog.\n * @param {SIP.RTCSession} owner\n * @param {SIP.IncomingRequest|SIP.IncomingResponse} message\n * @param {Enum} type UAC / UAS\n * @param {Enum} state SIP.Dialog.C.STATUS_EARLY / SIP.Dialog.C.STATUS_CONFIRMED\n */\nmodule.exports = function (SIP, RequestSender) {\n\nvar Dialog,\n  C = {\n    // Dialog states\n    STATUS_EARLY:       1,\n    STATUS_CONFIRMED:   2\n  };\n\n// RFC 3261 12.1\nDialog = function(owner, message, type, state) {\n  var contact;\n\n  this.uac_pending_reply = false;\n  this.uas_pending_reply = false;\n\n  if(!message.hasHeader('contact')) {\n    return {\n      error: 'unable to create a Dialog without Contact header field'\n    };\n  }\n\n  if(message instanceof SIP.IncomingResponse) {\n    state = (message.status_code < 200) ? C.STATUS_EARLY : C.STATUS_CONFIRMED;\n  } else {\n    // Create confirmed dialog if state is not defined\n    state = state || C.STATUS_CONFIRMED;\n  }\n\n  contact = message.parseHeader('contact');\n\n  // RFC 3261 12.1.1\n  if(type === 'UAS') {\n    this.id = {\n      call_id: message.call_id,\n      local_tag: message.to_tag,\n      remote_tag: message.from_tag,\n      toString: function() {\n        return this.call_id + this.local_tag + this.remote_tag;\n      }\n    };\n    this.state = state;\n    this.remote_seqnum = message.cseq;\n    this.local_uri = message.parseHeader('to').uri;\n    this.remote_uri = message.parseHeader('from').uri;\n    this.remote_target = contact.uri;\n    this.route_set = message.getHeaders('record-route');\n    this.invite_seqnum = message.cseq;\n    this.local_seqnum = message.cseq;\n  }\n  // RFC 3261 12.1.2\n  else if(type === 'UAC') {\n    this.id = {\n      call_id: message.call_id,\n      local_tag: message.from_tag,\n      remote_tag: message.to_tag,\n      toString: function() {\n        return this.call_id + this.local_tag + this.remote_tag;\n      }\n    };\n    this.state = state;\n    this.invite_seqnum = message.cseq;\n    this.local_seqnum = message.cseq;\n    this.local_uri = message.parseHeader('from').uri;\n    this.pracked = [];\n    this.remote_uri = message.parseHeader('to').uri;\n    this.remote_target = contact.uri;\n    this.route_set = message.getHeaders('record-route').reverse();\n\n    //RENDERBODY\n    if (this.state === C.STATUS_EARLY && (!owner.hasOffer)) {\n      this.mediaHandler = owner.mediaHandlerFactory(owner);\n    }\n  }\n\n  this.logger = owner.ua.getLogger('sip.dialog', this.id.toString());\n  this.owner = owner;\n  owner.ua.dialogs[this.id.toString()] = this;\n  this.logger.log('new ' + type + ' dialog created with status ' + (this.state === C.STATUS_EARLY ? 'EARLY': 'CONFIRMED'));\n};\n\nDialog.prototype = {\n  /**\n   * @param {SIP.IncomingMessage} message\n   * @param {Enum} UAC/UAS\n   */\n  update: function(message, type) {\n    this.state = C.STATUS_CONFIRMED;\n\n    this.logger.log('dialog '+ this.id.toString() +'  changed to CONFIRMED state');\n\n    if(type === 'UAC') {\n      // RFC 3261 13.2.2.4\n      this.route_set = message.getHeaders('record-route').reverse();\n    }\n  },\n\n  terminate: function() {\n    this.logger.log('dialog ' + this.id.toString() + ' deleted');\n    if (this.mediaHandler && this.state !== C.STATUS_CONFIRMED) {\n      this.mediaHandler.peerConnection.close();\n    }\n    delete this.owner.ua.dialogs[this.id.toString()];\n  },\n\n  /**\n  * @param {String} method request method\n  * @param {Object} extraHeaders extra headers\n  * @returns {SIP.OutgoingRequest}\n  */\n\n  // RFC 3261 12.2.1.1\n  createRequest: function(method, extraHeaders, body) {\n    var cseq, request;\n    extraHeaders = (extraHeaders || []).slice();\n\n    if(!this.local_seqnum) { this.local_seqnum = Math.floor(Math.random() * 10000); }\n\n    cseq = (method === SIP.C.CANCEL || method === SIP.C.ACK) ? this.invite_seqnum : this.local_seqnum += 1;\n\n    request = new SIP.OutgoingRequest(\n      method,\n      this.remote_target,\n      this.owner.ua, {\n        'cseq': cseq,\n        'call_id': this.id.call_id,\n        'from_uri': this.local_uri,\n        'from_tag': this.id.local_tag,\n        'to_uri': this.remote_uri,\n        'to_tag': this.id.remote_tag,\n        'route_set': this.route_set\n      }, extraHeaders, body);\n\n    request.dialog = this;\n\n    return request;\n  },\n\n  /**\n  * @param {SIP.IncomingRequest} request\n  * @returns {Boolean}\n  */\n\n  // RFC 3261 12.2.2\n  checkInDialogRequest: function(request) {\n    var self = this;\n\n    if(!this.remote_seqnum) {\n      this.remote_seqnum = request.cseq;\n    } else if(request.cseq < this.remote_seqnum) {\n        //Do not try to reply to an ACK request.\n        if (request.method !== SIP.C.ACK) {\n          request.reply(500);\n        }\n        if (request.cseq === this.invite_seqnum) {\n          return true;\n        }\n        return false;\n    } else if(request.cseq > this.remote_seqnum) {\n      this.remote_seqnum = request.cseq;\n    }\n\n    switch(request.method) {\n      // RFC3261 14.2 Modifying an Existing Session -UAS BEHAVIOR-\n      case SIP.C.INVITE:\n        if (this.uac_pending_reply === true) {\n          request.reply(491);\n        } else if (this.uas_pending_reply === true) {\n          var retryAfter = (Math.random() * 10 | 0) + 1;\n          request.reply(500, null, ['Retry-After:' + retryAfter]);\n          return false;\n        } else {\n          this.uas_pending_reply = true;\n          request.server_transaction.on('stateChanged', function stateChanged(){\n            if (this.state === SIP.Transactions.C.STATUS_ACCEPTED ||\n                this.state === SIP.Transactions.C.STATUS_COMPLETED ||\n                this.state === SIP.Transactions.C.STATUS_TERMINATED) {\n\n              this.off('stateChanged', stateChanged);\n              self.uas_pending_reply = false;\n\n              if (self.uac_pending_reply === false) {\n                self.owner.onReadyToReinvite();\n              }\n            }\n          });\n        }\n\n        // RFC3261 12.2.2 Replace the dialog`s remote target URI if the request is accepted\n        if(request.hasHeader('contact')) {\n          request.server_transaction.on('stateChanged', function(){\n            if (this.state === SIP.Transactions.C.STATUS_ACCEPTED) {\n              self.remote_target = request.parseHeader('contact').uri;\n            }\n          });\n        }\n        break;\n      case SIP.C.NOTIFY:\n        // RFC6665 3.2 Replace the dialog`s remote target URI if the request is accepted\n        if(request.hasHeader('contact')) {\n          request.server_transaction.on('stateChanged', function(){\n            if (this.state === SIP.Transactions.C.STATUS_COMPLETED) {\n              self.remote_target = request.parseHeader('contact').uri;\n            }\n          });\n        }\n        break;\n    }\n\n    return true;\n  },\n\n  sendRequest: function(applicant, method, options) {\n    options = options || {};\n\n    var\n      extraHeaders = (options.extraHeaders || []).slice(),\n      body = options.body || null,\n      request = this.createRequest(method, extraHeaders, body),\n      request_sender = new RequestSender(this, applicant, request);\n\n    request_sender.send();\n\n    return request;\n  },\n\n  /**\n  * @param {SIP.IncomingRequest} request\n  */\n  receiveRequest: function(request) {\n    //Check in-dialog request\n    if(!this.checkInDialogRequest(request)) {\n      return;\n    }\n\n    this.owner.receiveRequest(request);\n  }\n};\n\nDialog.C = C;\nSIP.Dialog = Dialog;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/sip.js/src/Dialogs.js\n ** module id = 18\n ** module chunks = 0\n **/","\n/**\n * @fileoverview Request Sender\n */\n\n/**\n * @augments SIP\n * @class Class creating a request sender.\n * @param {Object} applicant\n * @param {SIP.UA} ua\n */\nmodule.exports = function (SIP) {\nvar RequestSender;\n\nRequestSender = function(applicant, ua) {\n  this.logger = ua.getLogger('sip.requestsender');\n  this.ua = ua;\n  this.applicant = applicant;\n  this.method = applicant.request.method;\n  this.request = applicant.request;\n  this.credentials = null;\n  this.challenged = false;\n  this.staled = false;\n\n  // If ua is in closing process or even closed just allow sending Bye and ACK\n  if (ua.status === SIP.UA.C.STATUS_USER_CLOSED && (this.method !== SIP.C.BYE || this.method !== SIP.C.ACK)) {\n    this.onTransportError();\n  }\n};\n\n/**\n* Create the client transaction and send the message.\n*/\nRequestSender.prototype = {\n  send: function() {\n    switch(this.method) {\n      case \"INVITE\":\n        this.clientTransaction = new SIP.Transactions.InviteClientTransaction(this, this.request, this.ua.transport);\n        break;\n      case \"ACK\":\n        this.clientTransaction = new SIP.Transactions.AckClientTransaction(this, this.request, this.ua.transport);\n        break;\n      default:\n        this.clientTransaction = new SIP.Transactions.NonInviteClientTransaction(this, this.request, this.ua.transport);\n    }\n    this.clientTransaction.send();\n\n    return this.clientTransaction;\n  },\n\n  /**\n  * Callback fired when receiving a request timeout error from the client transaction.\n  * To be re-defined by the applicant.\n  * @event\n  */\n  onRequestTimeout: function() {\n    this.applicant.onRequestTimeout();\n  },\n\n  /**\n  * Callback fired when receiving a transport error from the client transaction.\n  * To be re-defined by the applicant.\n  * @event\n  */\n  onTransportError: function() {\n    this.applicant.onTransportError();\n  },\n\n  /**\n  * Called from client transaction when receiving a correct response to the request.\n  * Authenticate request if needed or pass the response back to the applicant.\n  * @param {SIP.IncomingResponse} response\n  */\n  receiveResponse: function(response) {\n    var cseq, challenge, authorization_header_name,\n      status_code = response.status_code;\n\n    /*\n    * Authentication\n    * Authenticate once. _challenged_ flag used to avoid infinite authentications.\n    */\n    if ((status_code === 401 || status_code === 407) && this.ua.configuration.password !== null) {\n\n      // Get and parse the appropriate WWW-Authenticate or Proxy-Authenticate header.\n      if (response.status_code === 401) {\n        challenge = response.parseHeader('www-authenticate');\n        authorization_header_name = 'authorization';\n      } else {\n        challenge = response.parseHeader('proxy-authenticate');\n        authorization_header_name = 'proxy-authorization';\n      }\n\n      // Verify it seems a valid challenge.\n      if (! challenge) {\n        this.logger.warn(response.status_code + ' with wrong or missing challenge, cannot authenticate');\n        this.applicant.receiveResponse(response);\n        return;\n      }\n\n      if (!this.challenged || (!this.staled && challenge.stale === true)) {\n        if (!this.credentials) {\n          this.credentials = new SIP.DigestAuthentication(this.ua);\n        }\n\n        // Verify that the challenge is really valid.\n        if (!this.credentials.authenticate(this.request, challenge)) {\n          this.applicant.receiveResponse(response);\n          return;\n        }\n        this.challenged = true;\n\n        if (challenge.stale) {\n          this.staled = true;\n        }\n\n        if (response.method === SIP.C.REGISTER) {\n          cseq = this.applicant.cseq += 1;\n        } else if (this.request.dialog){\n          cseq = this.request.dialog.local_seqnum += 1;\n        } else {\n          cseq = this.request.cseq + 1;\n          this.request.cseq = cseq;\n        }\n        this.request.setHeader('cseq', cseq +' '+ this.method);\n\n        this.request.setHeader(authorization_header_name, this.credentials.toString());\n        this.send();\n      } else {\n        this.applicant.receiveResponse(response);\n      }\n    } else {\n      this.applicant.receiveResponse(response);\n    }\n  }\n};\n\nSIP.RequestSender = RequestSender;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/sip.js/src/RequestSender.js\n ** module id = 19\n ** module chunks = 0\n **/","module.exports = function (SIP) {\n\nvar RegisterContext;\n\nRegisterContext = function (ua) {\n  var params = {},\n      regId = 1,\n      events = [\n        'registered',\n        'unregistered'\n      ];\n\n  this.registrar = ua.configuration.registrarServer;\n  this.expires = ua.configuration.registerExpires;\n\n\n  // Contact header\n  this.contact = ua.contact.toString();\n\n  if(regId) {\n    this.contact += ';reg-id='+ regId;\n    this.contact += ';+sip.instance=\"<urn:uuid:'+ ua.configuration.instanceId+'>\"';\n  }\n\n  // Call-ID and CSeq values RFC3261 10.2\n  this.call_id = SIP.Utils.createRandomToken(22);\n  this.cseq = 80;\n\n  this.to_uri = ua.configuration.uri;\n\n  params.to_uri = this.to_uri;\n  params.call_id = this.call_id;\n  params.cseq = this.cseq;\n\n  // Extends ClientContext\n  SIP.Utils.augment(this, SIP.ClientContext, [ua, 'REGISTER', this.registrar, {params: params}]);\n\n  this.registrationTimer = null;\n  this.registrationExpiredTimer = null;\n\n  // Set status\n  this.registered = false;\n\n  this.logger = ua.getLogger('sip.registercontext');\n  this.initMoreEvents(events);\n};\n\nRegisterContext.prototype = {\n  register: function (options) {\n    var self = this, extraHeaders;\n\n    // Handle Options\n    options = options || {};\n    extraHeaders = (options.extraHeaders || []).slice();\n    extraHeaders.push('Contact: ' + this.contact + ';expires=' + this.expires);\n    extraHeaders.push('Allow: ' + SIP.Utils.getAllowedMethods(this.ua));\n\n    this.receiveResponse = function(response) {\n      var contact, expires,\n        contacts = response.getHeaders('contact').length,\n        cause;\n\n      // Discard responses to older REGISTER/un-REGISTER requests.\n      if(response.cseq !== this.cseq) {\n        return;\n      }\n\n      // Clear registration timer\n      if (this.registrationTimer !== null) {\n        SIP.Timers.clearTimeout(this.registrationTimer);\n        this.registrationTimer = null;\n      }\n\n      switch(true) {\n        case /^1[0-9]{2}$/.test(response.status_code):\n          this.emit('progress', response);\n          break;\n        case /^2[0-9]{2}$/.test(response.status_code):\n          this.emit('accepted', response);\n\n          if(response.hasHeader('expires')) {\n            expires = response.getHeader('expires');\n          }\n\n          if (this.registrationExpiredTimer !== null) {\n            SIP.Timers.clearTimeout(this.registrationExpiredTimer);\n            this.registrationExpiredTimer = null;\n          }\n\n          // Search the Contact pointing to us and update the expires value accordingly.\n          if (!contacts) {\n            this.logger.warn('no Contact header in response to REGISTER, response ignored');\n            break;\n          }\n\n          while(contacts--) {\n            contact = response.parseHeader('contact', contacts);\n            if(contact.uri.user === this.ua.contact.uri.user) {\n              expires = contact.getParam('expires');\n              break;\n            } else {\n              contact = null;\n            }\n          }\n\n          if (!contact) {\n            this.logger.warn('no Contact header pointing to us, response ignored');\n            break;\n          }\n\n          if(!expires) {\n            expires = this.expires;\n          }\n\n          // Re-Register before the expiration interval has elapsed.\n          // For that, decrease the expires value. ie: 3 seconds\n          this.registrationTimer = SIP.Timers.setTimeout(function() {\n            self.registrationTimer = null;\n            self.register(options);\n          }, (expires * 1000) - 3000);\n          this.registrationExpiredTimer = SIP.Timers.setTimeout(function () {\n            self.logger.warn('registration expired');\n            if (self.registered) {\n              self.unregistered(null, SIP.C.causes.EXPIRES);\n            }\n          }, expires * 1000);\n\n          //Save gruu values\n          if (contact.hasParam('temp-gruu')) {\n            this.ua.contact.temp_gruu = SIP.URI.parse(contact.getParam('temp-gruu').replace(/\"/g,''));\n          }\n          if (contact.hasParam('pub-gruu')) {\n            this.ua.contact.pub_gruu = SIP.URI.parse(contact.getParam('pub-gruu').replace(/\"/g,''));\n          }\n\n          this.registered = true;\n          this.emit('registered', response || null);\n          break;\n        // Interval too brief RFC3261 10.2.8\n        case /^423$/.test(response.status_code):\n          if(response.hasHeader('min-expires')) {\n            // Increase our registration interval to the suggested minimum\n            this.expires = response.getHeader('min-expires');\n            // Attempt the registration again immediately\n            this.register(options);\n          } else { //This response MUST contain a Min-Expires header field\n            this.logger.warn('423 response received for REGISTER without Min-Expires');\n            this.registrationFailure(response, SIP.C.causes.SIP_FAILURE_CODE);\n          }\n          break;\n        default:\n          cause = SIP.Utils.sipErrorCause(response.status_code);\n          this.registrationFailure(response, cause);\n      }\n    };\n\n    this.onRequestTimeout = function() {\n      this.registrationFailure(null, SIP.C.causes.REQUEST_TIMEOUT);\n    };\n\n    this.onTransportError = function() {\n      this.registrationFailure(null, SIP.C.causes.CONNECTION_ERROR);\n    };\n\n    this.cseq++;\n    this.request.cseq = this.cseq;\n    this.request.setHeader('cseq', this.cseq + ' REGISTER');\n    this.request.extraHeaders = extraHeaders;\n    this.send();\n  },\n\n  registrationFailure: function (response, cause) {\n    this.emit('failed', response || null, cause || null);\n  },\n\n  onTransportClosed: function() {\n    this.registered_before = this.registered;\n    if (this.registrationTimer !== null) {\n      SIP.Timers.clearTimeout(this.registrationTimer);\n      this.registrationTimer = null;\n    }\n\n    if (this.registrationExpiredTimer !== null) {\n      SIP.Timers.clearTimeout(this.registrationExpiredTimer);\n      this.registrationExpiredTimer = null;\n    }\n\n    if(this.registered) {\n      this.unregistered(null, SIP.C.causes.CONNECTION_ERROR);\n    }\n  },\n\n  onTransportConnected: function() {\n    this.register();\n  },\n\n  close: function() {\n    this.registered_before = this.registered;\n    this.unregister();\n  },\n\n  unregister: function(options) {\n    var extraHeaders;\n\n    if(!this.registered) {\n      this.logger.warn('already unregistered');\n      return;\n    }\n\n    options = options || {};\n    extraHeaders = (options.extraHeaders || []).slice();\n\n    this.registered = false;\n\n    // Clear the registration timer.\n    if (this.registrationTimer !== null) {\n      SIP.Timers.clearTimeout(this.registrationTimer);\n      this.registrationTimer = null;\n    }\n\n    if(options.all) {\n      extraHeaders.push('Contact: *');\n      extraHeaders.push('Expires: 0');\n    } else {\n      extraHeaders.push('Contact: '+ this.contact + ';expires=0');\n    }\n\n\n    this.receiveResponse = function(response) {\n      var cause;\n\n      switch(true) {\n        case /^1[0-9]{2}$/.test(response.status_code):\n          this.emit('progress', response);\n          break;\n        case /^2[0-9]{2}$/.test(response.status_code):\n          this.emit('accepted', response);\n          if (this.registrationExpiredTimer !== null) {\n            SIP.Timers.clearTimeout(this.registrationExpiredTimer);\n            this.registrationExpiredTimer = null;\n          }\n          this.unregistered(response);\n          break;\n        default:\n          cause = SIP.Utils.sipErrorCause(response.status_code);\n          this.unregistered(response,cause);\n      }\n    };\n\n    this.onRequestTimeout = function() {\n      // Not actually unregistered...\n      //this.unregistered(null, SIP.C.causes.REQUEST_TIMEOUT);\n    };\n\n    this.onTransportError = function() {\n      // Not actually unregistered...\n      //this.unregistered(null, SIP.C.causes.CONNECTION_ERROR);\n    };\n\n    this.cseq++;\n    this.request.cseq = this.cseq;\n    this.request.setHeader('cseq', this.cseq + ' REGISTER');\n    this.request.extraHeaders = extraHeaders;\n\n    this.send();\n  },\n\n  unregistered: function(response, cause) {\n    this.registered = false;\n    this.emit('unregistered', response || null, cause || null);\n  }\n\n};\n\n\nSIP.RegisterContext = RegisterContext;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/sip.js/src/RegisterContext.js\n ** module id = 20\n ** module chunks = 0\n **/","/**\n * @fileoverview MediaHandler\n */\n\n/* MediaHandler\n * @class PeerConnection helper Class.\n * @param {SIP.Session} session\n * @param {Object} [options]\n */\nmodule.exports = function (EventEmitter) {\nvar MediaHandler = function(session, options) {\n  // keep jshint happy\n  session = session;\n  options = options;\n};\n\nMediaHandler.prototype = Object.create(EventEmitter.prototype, {\n  isReady: {value: function isReady () {}},\n\n  close: {value: function close () {}},\n\n  /**\n   * @param {Function} onSuccess called with the obtained local media description\n   * @param {Function} onFailure\n   * @param {Object} [mediaHint] A custom object describing the media to be used during this session.\n   */\n  getDescription: {value: function getDescription (onSuccess, onFailure, mediaHint) {\n    // keep jshint happy\n    onSuccess = onSuccess;\n    onFailure = onFailure;\n    mediaHint = mediaHint;\n  }},\n\n  /**\n  * Message reception.\n  * @param {String} type\n  * @param {String} description\n  * @param {Function} onSuccess\n  * @param {Function} onFailure\n  */\n  setDescription: {value: function setDescription (description, onSuccess, onFailure) {\n    // keep jshint happy\n    description = description;\n    onSuccess = onSuccess;\n    onFailure = onFailure;\n  }}\n});\n\nreturn MediaHandler;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/sip.js/src/MediaHandler.js\n ** module id = 21\n ** module chunks = 0\n **/","module.exports = function (SIP) {\nvar ClientContext;\n\nClientContext = function (ua, method, target, options) {\n  var params, extraHeaders,\n      originalTarget = target,\n      events = [\n        'progress',\n        'accepted',\n        'rejected',\n        'failed',\n        'cancel'\n      ];\n\n  if (target === undefined) {\n    throw new TypeError('Not enough arguments');\n  }\n\n  // Check target validity\n  target = ua.normalizeTarget(target);\n  if (!target) {\n    throw new TypeError('Invalid target: ' + originalTarget);\n  }\n\n  this.ua = ua;\n  this.logger = ua.getLogger('sip.clientcontext');\n  this.method = method;\n\n  params = options && options.params;\n  extraHeaders = (options && options.extraHeaders || []).slice();\n\n  if (options && options.body) {\n    this.body = options.body;\n  }\n  if (options && options.contentType) {\n    this.contentType = options.contentType;\n    extraHeaders.push('Content-Type: ' + this.contentType);\n  }\n\n  this.request = new SIP.OutgoingRequest(this.method, target, this.ua, params, extraHeaders);\n\n  this.localIdentity = this.request.from;\n  this.remoteIdentity = this.request.to;\n\n  if (this.body) {\n    this.request.body = this.body;\n  }\n\n  this.data = {};\n\n  this.initEvents(events);\n};\nClientContext.prototype = new SIP.EventEmitter();\n\nClientContext.prototype.send = function () {\n  (new SIP.RequestSender(this, this.ua)).send();\n  return this;\n};\n\nClientContext.prototype.cancel = function (options) {\n  options = options || {};\n\n  var\n  status_code = options.status_code,\n  reason_phrase = options.reason_phrase,\n  cancel_reason;\n\n  if (status_code && status_code < 200 || status_code > 699) {\n    throw new TypeError('Invalid status_code: ' + status_code);\n  } else if (status_code) {\n    reason_phrase = reason_phrase || SIP.C.REASON_PHRASE[status_code] || '';\n    cancel_reason = 'SIP ;cause=' + status_code + ' ;text=\"' + reason_phrase + '\"';\n  }\n  this.request.cancel(cancel_reason);\n\n  this.emit('cancel');\n};\n\nClientContext.prototype.receiveResponse = function (response) {\n  var cause = SIP.C.REASON_PHRASE[response.status_code] || '';\n\n  switch(true) {\n    case /^1[0-9]{2}$/.test(response.status_code):\n      this.emit('progress', response, cause);\n      break;\n\n    case /^2[0-9]{2}$/.test(response.status_code):\n      if(this.ua.applicants[this]) {\n        delete this.ua.applicants[this];\n      }\n      this.emit('accepted', response, cause);\n      break;\n\n    default:\n      if(this.ua.applicants[this]) {\n        delete this.ua.applicants[this];\n      }\n      this.emit('rejected', response, cause);\n      this.emit('failed', response, cause);\n      break;\n  }\n\n};\n\nClientContext.prototype.onRequestTimeout = function () {\n  this.emit('failed', null, SIP.C.causes.REQUEST_TIMEOUT);\n};\n\nClientContext.prototype.onTransportError = function () {\n  this.emit('failed', null, SIP.C.causes.CONNECTION_ERROR);\n};\n\nSIP.ClientContext = ClientContext;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/sip.js/src/ClientContext.js\n ** module id = 22\n ** module chunks = 0\n **/","module.exports = function (SIP) {\nvar ServerContext;\n\nServerContext = function (ua, request) {\n  var events = [\n      'progress',\n      'accepted',\n      'rejected',\n      'failed'\n    ];\n  this.ua = ua;\n  this.logger = ua.getLogger('sip.servercontext');\n  this.request = request;\n  if (request.method === SIP.C.INVITE) {\n    this.transaction = new SIP.Transactions.InviteServerTransaction(request, ua);\n  } else {\n    this.transaction = new SIP.Transactions.NonInviteServerTransaction(request, ua);\n  }\n\n  if (request.body) {\n    this.body = request.body;\n  }\n  if (request.hasHeader('Content-Type')) {\n    this.contentType = request.getHeader('Content-Type');\n  }\n  this.method = request.method;\n\n  this.data = {};\n\n  this.localIdentity = request.to;\n  this.remoteIdentity = request.from;\n\n  this.initEvents(events);\n};\n\nServerContext.prototype = new SIP.EventEmitter();\n\nServerContext.prototype.progress = function (options) {\n  options = options || {};\n  var\n    statusCode = options.statusCode || 180,\n    reasonPhrase = options.reasonPhrase || SIP.C.REASON_PHRASE[statusCode],\n    extraHeaders = (options.extraHeaders || []).slice(),\n    body = options.body,\n    response;\n\n  if (statusCode < 100 || statusCode > 199) {\n    throw new TypeError('Invalid statusCode: ' + statusCode);\n  }\n  response = this.request.reply(statusCode, reasonPhrase, extraHeaders, body);\n  this.emit('progress', response, reasonPhrase);\n\n  return this;\n};\n\nServerContext.prototype.accept = function (options) {\n  options = options || {};\n  var\n    statusCode = options.statusCode || 200,\n    reasonPhrase = options.reasonPhrase || SIP.C.REASON_PHRASE[statusCode],\n    extraHeaders = (options.extraHeaders || []).slice(),\n    body = options.body,\n    response;\n\n  if (statusCode < 200 || statusCode > 299) {\n    throw new TypeError('Invalid statusCode: ' + statusCode);\n  }\n  response = this.request.reply(statusCode, reasonPhrase, extraHeaders, body);\n  this.emit('accepted', response, reasonPhrase);\n\n  return this;\n};\n\nServerContext.prototype.reject = function (options) {\n  options = options || {};\n  var\n    statusCode = options.statusCode || 480,\n    reasonPhrase = options.reasonPhrase || SIP.C.REASON_PHRASE[statusCode],\n    extraHeaders = (options.extraHeaders || []).slice(),\n    body = options.body,\n    response;\n\n  if (statusCode < 300 || statusCode > 699) {\n    throw new TypeError('Invalid statusCode: ' + statusCode);\n  }\n  response = this.request.reply(statusCode, reasonPhrase, extraHeaders, body);\n  this.emit('rejected', response, reasonPhrase);\n  this.emit('failed', response, reasonPhrase);\n\n  return this;\n};\n\nServerContext.prototype.reply = function (options) {\n  options = options || {};\n  var\n    statusCode = options.statusCode,\n    reasonPhrase = options.reasonPhrase,\n    extraHeaders = (options.extraHeaders || []).slice(),\n    body = options.body;\n\n  this.request.reply(statusCode, reasonPhrase, extraHeaders, body);\n\n  return this;\n};\n\nServerContext.prototype.onRequestTimeout = function () {\n  this.emit('failed', null, SIP.C.causes.REQUEST_TIMEOUT);\n};\n\nServerContext.prototype.onTransportError = function () {\n  this.emit('failed', null, SIP.C.causes.CONNECTION_ERROR);\n};\n\nSIP.ServerContext = ServerContext;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/sip.js/src/ServerContext.js\n ** module id = 23\n ** module chunks = 0\n **/","/**\n * @fileoverview DTMF\n */\n\n/**\n * @class DTMF\n * @param {SIP.Session} session\n */\nmodule.exports = function (SIP) {\n\nvar DTMF,\n  C = {\n    MIN_DURATION:            70,\n    MAX_DURATION:            6000,\n    DEFAULT_DURATION:        100,\n    MIN_INTER_TONE_GAP:      50,\n    DEFAULT_INTER_TONE_GAP:  500\n  };\n\nDTMF = function(session, tone, options) {\n  var events = [\n  'succeeded',\n  'failed'\n  ], duration, interToneGap;\n\n  if (tone === undefined) {\n    throw new TypeError('Not enough arguments');\n  }\n\n  this.logger = session.ua.getLogger('sip.invitecontext.dtmf', session.id);\n  this.owner = session;\n  this.direction = null;\n\n  options = options || {};\n  duration = options.duration || null;\n  interToneGap = options.interToneGap || null;\n\n  // Check tone type\n  if (typeof tone === 'string' ) {\n    tone = tone.toUpperCase();\n  } else if (typeof tone === 'number') {\n    tone = tone.toString();\n  } else {\n    throw new TypeError('Invalid tone: '+ tone);\n  }\n\n  // Check tone value\n  if (!tone.match(/^[0-9A-D#*]$/)) {\n    throw new TypeError('Invalid tone: '+ tone);\n  } else {\n    this.tone = tone;\n  }\n\n  // Check duration\n  if (duration && !SIP.Utils.isDecimal(duration)) {\n    throw new TypeError('Invalid tone duration: '+ duration);\n  } else if (!duration) {\n    duration = DTMF.C.DEFAULT_DURATION;\n  } else if (duration < DTMF.C.MIN_DURATION) {\n    this.logger.warn('\"duration\" value is lower than the minimum allowed, setting it to '+ DTMF.C.MIN_DURATION+ ' milliseconds');\n    duration = DTMF.C.MIN_DURATION;\n  } else if (duration > DTMF.C.MAX_DURATION) {\n    this.logger.warn('\"duration\" value is greater than the maximum allowed, setting it to '+ DTMF.C.MAX_DURATION +' milliseconds');\n    duration = DTMF.C.MAX_DURATION;\n  } else {\n    duration = Math.abs(duration);\n  }\n  this.duration = duration;\n\n  // Check interToneGap\n  if (interToneGap && !SIP.Utils.isDecimal(interToneGap)) {\n    throw new TypeError('Invalid interToneGap: '+ interToneGap);\n  } else if (!interToneGap) {\n    interToneGap = DTMF.C.DEFAULT_INTER_TONE_GAP;\n  } else if (interToneGap < DTMF.C.MIN_INTER_TONE_GAP) {\n    this.logger.warn('\"interToneGap\" value is lower than the minimum allowed, setting it to '+ DTMF.C.MIN_INTER_TONE_GAP +' milliseconds');\n    interToneGap = DTMF.C.MIN_INTER_TONE_GAP;\n  } else {\n    interToneGap = Math.abs(interToneGap);\n  }\n  this.interToneGap = interToneGap;\n\n  this.initEvents(events);\n};\nDTMF.prototype = new SIP.EventEmitter();\n\n\nDTMF.prototype.send = function(options) {\n  var extraHeaders, body;\n\n  this.direction = 'outgoing';\n\n  // Check RTCSession Status\n  if (this.owner.status !== SIP.Session.C.STATUS_CONFIRMED &&\n    this.owner.status !== SIP.Session.C.STATUS_WAITING_FOR_ACK) {\n    throw new SIP.Exceptions.InvalidStateError(this.owner.status);\n  }\n\n  // Get DTMF options\n  options = options || {};\n  extraHeaders = options.extraHeaders ? options.extraHeaders.slice() : [];\n\n  extraHeaders.push('Content-Type: application/dtmf-relay');\n\n  body = \"Signal= \" + this.tone + \"\\r\\n\";\n  body += \"Duration= \" + this.duration;\n\n  this.request = this.owner.dialog.sendRequest(this, SIP.C.INFO, {\n    extraHeaders: extraHeaders,\n    body: body\n  });\n\n  this.owner.emit('dtmf', this.request, this);\n};\n\n/**\n * @private\n */\nDTMF.prototype.receiveResponse = function(response) {\n  var cause;\n\n  switch(true) {\n    case /^1[0-9]{2}$/.test(response.status_code):\n      // Ignore provisional responses.\n      break;\n\n    case /^2[0-9]{2}$/.test(response.status_code):\n      this.emit('succeeded', {\n        originator: 'remote',\n        response: response\n      });\n      break;\n\n    default:\n      cause = SIP.Utils.sipErrorCause(response.status_code);\n      this.emit('failed', response, cause);\n      break;\n  }\n};\n\n/**\n * @private\n */\nDTMF.prototype.onRequestTimeout = function() {\n  this.emit('failed', null, SIP.C.causes.REQUEST_TIMEOUT);\n  this.owner.onRequestTimeout();\n};\n\n/**\n * @private\n */\nDTMF.prototype.onTransportError = function() {\n  this.emit('failed', null, SIP.C.causes.CONNECTION_ERROR);\n  this.owner.onTransportError();\n};\n\n/**\n * @private\n */\nDTMF.prototype.onDialogError = function(response) {\n  this.emit('failed', response, SIP.C.causes.DIALOG_ERROR);\n  this.owner.onDialogError(response);\n};\n\n/**\n * @private\n */\nDTMF.prototype.init_incoming = function(request) {\n  this.direction = 'incoming';\n  this.request = request;\n\n  request.reply(200);\n\n  if (!this.tone || !this.duration) {\n    this.logger.warn('invalid INFO DTMF received, discarded');\n  } else {\n    this.owner.emit('dtmf', request, this);\n  }\n};\n\nDTMF.C = C;\nreturn DTMF;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/sip.js/src/Session/DTMF.js\n ** module id = 24\n ** module chunks = 0\n **/","module.exports = function (SIP, window, DTMF) {\n\nvar Session, InviteServerContext, InviteClientContext,\n C = {\n    //Session states\n    STATUS_NULL:                        0,\n    STATUS_INVITE_SENT:                 1,\n    STATUS_1XX_RECEIVED:                2,\n    STATUS_INVITE_RECEIVED:             3,\n    STATUS_WAITING_FOR_ANSWER:          4,\n    STATUS_ANSWERED:                    5,\n    STATUS_WAITING_FOR_PRACK:           6,\n    STATUS_WAITING_FOR_ACK:             7,\n    STATUS_CANCELED:                    8,\n    STATUS_TERMINATED:                  9,\n    STATUS_ANSWERED_WAITING_FOR_PRACK: 10,\n    STATUS_EARLY_MEDIA:                11,\n    STATUS_CONFIRMED:                  12\n  };\n\n/*\n * @param {function returning SIP.MediaHandler} [mediaHandlerFactory]\n *        (See the documentation for the mediaHandlerFactory argument of the UA constructor.)\n */\nSession = function (mediaHandlerFactory) {\n  var events = [\n  'connecting',\n  'terminated',\n  'dtmf',\n  'invite',\n  'cancel',\n  'refer',\n  'bye',\n  'hold',\n  'unhold',\n  'muted',\n  'unmuted'\n  ];\n\n  this.status = C.STATUS_NULL;\n  this.dialog = null;\n  this.earlyDialogs = {};\n  this.mediaHandlerFactory = mediaHandlerFactory || SIP.WebRTC.MediaHandler.defaultFactory;\n  // this.mediaHandler gets set by ICC/ISC constructors\n  this.hasOffer = false;\n  this.hasAnswer = false;\n\n  // Session Timers\n  this.timers = {\n    ackTimer: null,\n    expiresTimer: null,\n    invite2xxTimer: null,\n    userNoAnswerTimer: null,\n    rel1xxTimer: null,\n    prackTimer: null\n  };\n\n  // Session info\n  this.startTime = null;\n  this.endTime = null;\n  this.tones = null;\n\n  // Mute/Hold state\n  this.local_hold = false;\n  this.remote_hold = false;\n\n  this.pending_actions = {\n    actions: [],\n\n    length: function() {\n      return this.actions.length;\n    },\n\n    isPending: function(name){\n      var\n      idx = 0,\n      length = this.actions.length;\n\n      for (idx; idx<length; idx++) {\n        if (this.actions[idx].name === name) {\n          return true;\n        }\n      }\n      return false;\n    },\n\n    shift: function() {\n      return this.actions.shift();\n    },\n\n    push: function(name) {\n      this.actions.push({\n        name: name\n      });\n    },\n\n    pop: function(name) {\n      var\n      idx = 0,\n      length = this.actions.length;\n\n      for (idx; idx<length; idx++) {\n        if (this.actions[idx].name === name) {\n          this.actions.splice(idx,1);\n          length --;\n          idx--;\n        }\n      }\n    }\n   };\n\n  this.early_sdp = null;\n  this.rel100 = SIP.C.supported.UNSUPPORTED;\n\n  this.initMoreEvents(events);\n};\n\nSession.prototype = {\n  dtmf: function(tones, options) {\n    var tone, dtmfs = [],\n        self = this;\n\n    options = options || {};\n\n    if (tones === undefined) {\n      throw new TypeError('Not enough arguments');\n    }\n\n    // Check Session Status\n    if (this.status !== C.STATUS_CONFIRMED && this.status !== C.STATUS_WAITING_FOR_ACK) {\n      throw new SIP.Exceptions.InvalidStateError(this.status);\n    }\n\n    // Check tones\n    if (!tones || (typeof tones !== 'string' && typeof tones !== 'number') || !tones.toString().match(/^[0-9A-D#*,]+$/i)) {\n      throw new TypeError('Invalid tones: '+ tones);\n    }\n\n    tones = tones.toString().split('');\n\n    while (tones.length > 0) { dtmfs.push(new DTMF(this, tones.shift(), options)); }\n\n    if (this.tones) {\n      // Tones are already queued, just add to the queue\n      this.tones =  this.tones.concat(dtmfs);\n      return this;\n    }\n\n    var sendDTMF = function () {\n      var dtmf, timeout;\n\n      if (self.status === C.STATUS_TERMINATED || !self.tones || self.tones.length === 0) {\n        // Stop sending DTMF\n        self.tones = null;\n        return this;\n      }\n\n      dtmf = self.tones.shift();\n\n      if (tone === ',') {\n        timeout = 2000;\n      } else {\n        dtmf.on('failed', function(){self.tones = null;});\n        dtmf.send(options);\n        timeout = dtmf.duration + dtmf.interToneGap;\n      }\n\n      // Set timeout for the next tone\n      SIP.Timers.setTimeout(sendDTMF, timeout);\n    };\n\n    this.tones = dtmfs;\n    sendDTMF();\n    return this;\n  },\n\n  bye: function(options) {\n    options = options || {};\n    var statusCode = options.statusCode;\n\n    // Check Session Status\n    if (this.status === C.STATUS_TERMINATED) {\n      this.logger.error('Error: Attempted to send BYE in a terminated session.');\n      return this;\n    }\n\n    this.logger.log('terminating Session');\n\n    if (statusCode && (statusCode < 200 || statusCode >= 700)) {\n      throw new TypeError('Invalid statusCode: '+ statusCode);\n    }\n\n    options.receiveResponse = function () {};\n\n    return this.\n      sendRequest(SIP.C.BYE, options).\n      terminated();\n  },\n\n  refer: function(target, options) {\n    options = options || {};\n    var extraHeaders = (options.extraHeaders || []).slice(),\n        originalTarget = target;\n\n    if (target === undefined) {\n      throw new TypeError('Not enough arguments');\n    } else if (target instanceof SIP.InviteServerContext || target instanceof SIP.InviteClientContext) {\n      //Attended Transfer\n      // B.transfer(C)\n      extraHeaders.push('Contact: '+ this.contact);\n      extraHeaders.push('Allow: '+ SIP.Utils.getAllowedMethods(this.ua));\n      extraHeaders.push('Refer-To: <' + target.dialog.remote_target.toString() + '?Replaces=' + target.dialog.id.call_id + '%3Bto-tag%3D' + target.dialog.id.remote_tag + '%3Bfrom-tag%3D' + target.dialog.id.local_tag + '>');\n    } else {\n      //Blind Transfer\n\n      // Check Session Status\n      if (this.status !== C.STATUS_CONFIRMED) {\n        throw new SIP.Exceptions.InvalidStateError(this.status);\n      }\n\n      // normalizeTarget allows instances of SIP.URI to pass through unaltered,\n      // so try to make one ahead of time\n      try {\n        target = SIP.Grammar.parse(target, 'Refer_To').uri || target;\n      } catch (e) {\n        this.logger.debug(\".refer() cannot parse Refer_To from\", target);\n        this.logger.debug(\"...falling through to normalizeTarget()\");\n      }\n\n      // Check target validity\n      target = this.ua.normalizeTarget(target);\n      if (!target) {\n        throw new TypeError('Invalid target: ' + originalTarget);\n      }\n\n      extraHeaders.push('Contact: '+ this.contact);\n      extraHeaders.push('Allow: '+ SIP.Utils.getAllowedMethods(this.ua));\n      extraHeaders.push('Refer-To: '+ target);\n    }\n\n    // Send the request\n    this.sendRequest(SIP.C.REFER, {\n      extraHeaders: extraHeaders,\n      body: options.body,\n      receiveResponse: function() {}\n    });\n    // hang up only if we transferred to a SIP address\n    if (target.scheme.match(\"^sips?$\")) {\n      this.terminate();\n    }\n    return this;\n  },\n\n  followRefer: function followRefer (callback) {\n    return function referListener (callback, request) {\n      // window.open non-SIP URIs if possible and keep session open\n      var target = request.parseHeader('refer-to').uri;\n      if (!target.scheme.match(\"^sips?$\")) {\n        var targetString = target.toString();\n        if (typeof window !== \"undefined\" && typeof window.open === \"function\") {\n          window.open(targetString);\n        } else {\n          this.logger.warn(\"referred to non-SIP URI but window.open isn't a function: \" + targetString);\n        }\n        return;\n      }\n\n      SIP.Hacks.Chrome.getsConfusedAboutGUM(this);\n\n      /*\n        Harmless race condition.  Both sides of REFER\n        may send a BYE, but in the end the dialogs are destroyed.\n      */\n      var referSession = this.ua.invite(request.parseHeader('refer-to').uri, {\n        media: this.mediaHint\n      });\n\n      callback.call(this, request, referSession);\n\n      this.terminate();\n    }.bind(this, callback);\n  },\n\n  sendRequest: function(method,options) {\n    options = options || {};\n    var self = this;\n\n    var request = new SIP.OutgoingRequest(\n      method,\n      this.dialog.remote_target,\n      this.ua,\n      {\n        cseq: options.cseq || (this.dialog.local_seqnum += 1),\n        call_id: this.dialog.id.call_id,\n        from_uri: this.dialog.local_uri,\n        from_tag: this.dialog.id.local_tag,\n        to_uri: this.dialog.remote_uri,\n        to_tag: this.dialog.id.remote_tag,\n        route_set: this.dialog.route_set,\n        statusCode: options.statusCode,\n        reasonPhrase: options.reasonPhrase\n      },\n      options.extraHeaders || [],\n      options.body\n    );\n\n    new SIP.RequestSender({\n      request: request,\n      onRequestTimeout: function() {\n        self.onRequestTimeout();\n      },\n      onTransportError: function() {\n        self.onTransportError();\n      },\n      receiveResponse: options.receiveResponse || function(response) {\n        self.receiveNonInviteResponse(response);\n      }\n    }, this.ua).send();\n\n    // Emit the request event\n    if (this.checkEvent(method.toLowerCase())) {\n      this.emit(method.toLowerCase(), request);\n    }\n\n    return this;\n  },\n\n  close: function() {\n    var idx;\n\n    if(this.status === C.STATUS_TERMINATED) {\n      return this;\n    }\n\n    this.logger.log('closing INVITE session ' + this.id);\n\n    // 1st Step. Terminate media.\n    if (this.mediaHandler){\n      this.mediaHandler.close();\n    }\n\n    // 2nd Step. Terminate signaling.\n\n    // Clear session timers\n    for(idx in this.timers) {\n      SIP.Timers.clearTimeout(this.timers[idx]);\n    }\n\n    // Terminate dialogs\n\n    // Terminate confirmed dialog\n    if(this.dialog) {\n      this.dialog.terminate();\n      delete this.dialog;\n    }\n\n    // Terminate early dialogs\n    for(idx in this.earlyDialogs) {\n      this.earlyDialogs[idx].terminate();\n      delete this.earlyDialogs[idx];\n    }\n\n    this.status = C.STATUS_TERMINATED;\n\n    delete this.ua.sessions[this.id];\n    return this;\n  },\n\n  createDialog: function(message, type, early) {\n    var dialog, early_dialog,\n      local_tag = message[(type === 'UAS') ? 'to_tag' : 'from_tag'],\n      remote_tag = message[(type === 'UAS') ? 'from_tag' : 'to_tag'],\n      id = message.call_id + local_tag + remote_tag;\n\n    early_dialog = this.earlyDialogs[id];\n\n    // Early Dialog\n    if (early) {\n      if (early_dialog) {\n        return true;\n      } else {\n        early_dialog = new SIP.Dialog(this, message, type, SIP.Dialog.C.STATUS_EARLY);\n\n        // Dialog has been successfully created.\n        if(early_dialog.error) {\n          this.logger.error(early_dialog.error);\n          this.failed(message, SIP.C.causes.INTERNAL_ERROR);\n          return false;\n        } else {\n          this.earlyDialogs[id] = early_dialog;\n          return true;\n        }\n      }\n    }\n    // Confirmed Dialog\n    else {\n      // In case the dialog is in _early_ state, update it\n      if (early_dialog) {\n        early_dialog.update(message, type);\n        this.dialog = early_dialog;\n        delete this.earlyDialogs[id];\n        for (var dia in this.earlyDialogs) {\n          this.earlyDialogs[dia].terminate();\n          delete this.earlyDialogs[dia];\n        }\n        return true;\n      }\n\n      // Otherwise, create a _confirmed_ dialog\n      dialog = new SIP.Dialog(this, message, type);\n\n      if(dialog.error) {\n        this.logger.error(dialog.error);\n        this.failed(message, SIP.C.causes.INTERNAL_ERROR);\n        return false;\n      } else {\n        this.to_tag = message.to_tag;\n        this.dialog = dialog;\n        return true;\n      }\n    }\n  },\n\n  /**\n  * Check if Session is ready for a re-INVITE\n  *\n  * @returns {Boolean}\n  */\n  isReadyToReinvite: function() {\n    return this.mediaHandler.isReady() &&\n      !this.dialog.uac_pending_reply &&\n      !this.dialog.uas_pending_reply;\n  },\n\n  /**\n   * Mute\n   */\n  mute: function(options) {\n    var ret = this.mediaHandler.mute(options);\n    if (ret) {\n      this.onmute(ret);\n    }\n  },\n\n  /**\n   * Unmute\n   */\n  unmute: function(options) {\n    var ret = this.mediaHandler.unmute(options);\n    if (ret) {\n      this.onunmute(ret);\n    }\n  },\n\n  /**\n   * Hold\n   */\n  hold: function() {\n\n    if (this.status !== C.STATUS_WAITING_FOR_ACK && this.status !== C.STATUS_CONFIRMED) {\n      throw new SIP.Exceptions.InvalidStateError(this.status);\n    }\n\n    this.mediaHandler.hold();\n\n    // Check if RTCSession is ready to send a reINVITE\n    if (!this.isReadyToReinvite()) {\n      /* If there is a pending 'unhold' action, cancel it and don't queue this one\n       * Else, if there isn't any 'hold' action, add this one to the queue\n       * Else, if there is already a 'hold' action, skip\n       */\n      if (this.pending_actions.isPending('unhold')) {\n        this.pending_actions.pop('unhold');\n      } else if (!this.pending_actions.isPending('hold')) {\n        this.pending_actions.push('hold');\n      }\n      return;\n    } else if (this.local_hold === true) {\n        return;\n    }\n\n    this.onhold('local');\n\n    this.sendReinvite({\n      mangle: function(body){\n\n        // Don't receive media\n        // TODO - This will break for media streams with different directions.\n        if (!(/a=(sendrecv|sendonly|recvonly|inactive)/).test(body)) {\n          body = body.replace(/(m=[^\\r]*\\r\\n)/g, '$1a=sendonly\\r\\n');\n        } else {\n          body = body.replace(/a=sendrecv\\r\\n/g, 'a=sendonly\\r\\n');\n          body = body.replace(/a=recvonly\\r\\n/g, 'a=inactive\\r\\n');\n        }\n\n        return body;\n      }\n    });\n  },\n\n  /**\n   * Unhold\n   */\n  unhold: function() {\n\n    if (this.status !== C.STATUS_WAITING_FOR_ACK && this.status !== C.STATUS_CONFIRMED) {\n      throw new SIP.Exceptions.InvalidStateError(this.status);\n    }\n\n    this.mediaHandler.unhold();\n\n    if (!this.isReadyToReinvite()) {\n      /* If there is a pending 'hold' action, cancel it and don't queue this one\n       * Else, if there isn't any 'unhold' action, add this one to the queue\n       * Else, if there is already a 'unhold' action, skip\n       */\n      if (this.pending_actions.isPending('hold')) {\n        this.pending_actions.pop('hold');\n      } else if (!this.pending_actions.isPending('unhold')) {\n        this.pending_actions.push('unhold');\n      }\n      return;\n    } else if (this.local_hold === false) {\n      return;\n    }\n\n    this.onunhold('local');\n\n    this.sendReinvite();\n  },\n\n  /**\n   * isOnHold\n   */\n  isOnHold: function() {\n    return {\n      local: this.local_hold,\n      remote: this.remote_hold\n    };\n  },\n\n  /**\n   * In dialog INVITE Reception\n   * @private\n   */\n  receiveReinvite: function(request) {\n    var self = this,\n        contentType = request.getHeader('Content-Type'),\n        hold = true;\n\n    if (request.body) {\n      if (contentType !== 'application/sdp') {\n        this.logger.warn('invalid Content-Type');\n        request.reply(415);\n        return;\n      }\n\n      // Are we holding?\n      hold = (/a=(sendonly|inactive)/).test(request.body);\n\n      this.mediaHandler.setDescription(\n        request.body,\n        /*\n         * onSuccess\n         * SDP Offer is valid\n         */\n        function() {\n          self.mediaHandler.getDescription(\n            function(body) {\n              request.reply(200, null, ['Contact: ' + self.contact], body,\n                function() {\n                  self.status = C.STATUS_WAITING_FOR_ACK;\n                  self.setInvite2xxTimer(request, body);\n                  self.setACKTimer();\n\n                  if (self.remote_hold && !hold) {\n                    self.onunhold('remote');\n                  } else if (!self.remote_hold && hold) {\n                    self.onhold('remote');\n                  }\n                });\n            },\n            function() {\n              request.reply(500);\n            },\n            self.mediaHint\n          );\n        },\n        /*\n         * onFailure\n         * Bad media description\n         */\n        function(e) {\n          self.logger.error(e);\n          request.reply(488);\n        }\n      );\n    }\n  },\n\n  sendReinvite: function(options) {\n    options = options || {};\n\n    var\n      self = this,\n       extraHeaders = (options.extraHeaders || []).slice(),\n       eventHandlers = options.eventHandlers || {},\n       mangle = options.mangle || null;\n\n    if (eventHandlers.succeeded) {\n      this.reinviteSucceeded = eventHandlers.succeeded;\n    } else {\n      this.reinviteSucceeded = function(){\n        SIP.Timers.clearTimeout(self.timers.ackTimer);\n        SIP.Timers.clearTimeout(self.timers.invite2xxTimer);\n        self.status = C.STATUS_CONFIRMED;\n      };\n    }\n    if (eventHandlers.failed) {\n      this.reinviteFailed = eventHandlers.failed;\n    } else {\n      this.reinviteFailed = function(){};\n    }\n\n    extraHeaders.push('Contact: ' + this.contact);\n    extraHeaders.push('Allow: '+ SIP.Utils.getAllowedMethods(this.ua));\n    extraHeaders.push('Content-Type: application/sdp');\n\n    this.receiveResponse = this.receiveReinviteResponse;\n    //REVISIT\n    this.mediaHandler.getDescription(\n      function(body){\n        if (mangle) {\n          body = mangle(body);\n        }\n\n        self.dialog.sendRequest(self, SIP.C.INVITE, {\n          extraHeaders: extraHeaders,\n          body: body\n        });\n      },\n      function() {\n        if (self.isReadyToReinvite()) {\n          self.onReadyToReinvite();\n        }\n        self.reinviteFailed();\n      },\n      self.mediaHint\n    );\n  },\n\n  receiveRequest: function (request) {\n    switch (request.method) {\n      case SIP.C.BYE:\n        request.reply(200);\n        if(this.status === C.STATUS_CONFIRMED) {\n          this.emit('bye', request);\n          this.terminated(request, SIP.C.causes.BYE);\n        }\n        break;\n      case SIP.C.INVITE:\n        if(this.status === C.STATUS_CONFIRMED) {\n          this.logger.log('re-INVITE received');\n          // Switch these two lines to try re-INVITEs:\n          //this.receiveReinvite(request);\n          request.reply(488, null, ['Warning: 399 sipjs \"Cannot update media description\"']);\n        }\n        break;\n      case SIP.C.INFO:\n        if(this.status === C.STATUS_CONFIRMED || this.status === C.STATUS_WAITING_FOR_ACK) {\n          var body, tone, duration,\n              contentType = request.getHeader('content-type'),\n              reg_tone = /^(Signal\\s*?=\\s*?)([0-9A-D#*]{1})(\\s)?.*/,\n              reg_duration = /^(Duration\\s?=\\s?)([0-9]{1,4})(\\s)?.*/;\n\n          if (contentType) {\n            if (contentType.match(/^application\\/dtmf-relay/i)) {\n              if (request.body) {\n                body = request.body.split('\\r\\n', 2);\n                if (body.length === 2) {\n                  if (reg_tone.test(body[0])) {\n                    tone = body[0].replace(reg_tone,\"$2\");\n                  }\n                  if (reg_duration.test(body[1])) {\n                    duration = parseInt(body[1].replace(reg_duration,\"$2\"), 10);\n                  }\n                }\n              }\n\n              new DTMF(this, tone, {duration: duration}).init_incoming(request);\n            } else {\n              request.reply(415, null, [\"Accept: application/dtmf-relay\"]);\n            }\n          }\n        }\n        break;\n      case SIP.C.REFER:\n        if(this.status ===  C.STATUS_CONFIRMED) {\n          this.logger.log('REFER received');\n          request.reply(202, 'Accepted');\n          var\n            hasReferListener = this.checkListener('refer'),\n            notifyBody = hasReferListener ?\n              'SIP/2.0 100 Trying' :\n              // RFC 3515.2.4.2: 'the UA MAY decline the request.'\n              'SIP/2.0 603 Declined'\n          ;\n\n          this.sendRequest(SIP.C.NOTIFY, {\n            extraHeaders:[\n              'Event: refer',\n              'Subscription-State: terminated',\n              'Content-Type: message/sipfrag'\n            ],\n            body: notifyBody,\n            receiveResponse: function() {}\n          });\n\n          if (hasReferListener) {\n            this.emit('refer', request);\n          }\n        }\n        break;\n    }\n  },\n\n  /**\n   * Reception of Response for in-dialog INVITE\n   * @private\n   */\n  receiveReinviteResponse: function(response) {\n    var self = this,\n        contentType = response.getHeader('Content-Type');\n\n    if (this.status === C.STATUS_TERMINATED) {\n      return;\n    }\n\n    switch(true) {\n      case /^1[0-9]{2}$/.test(response.status_code):\n        break;\n      case /^2[0-9]{2}$/.test(response.status_code):\n        this.status = C.STATUS_CONFIRMED;\n\n        this.sendRequest(SIP.C.ACK,{cseq:response.cseq});\n\n        if(!response.body) {\n          this.reinviteFailed();\n          break;\n        } else if (contentType !== 'application/sdp') {\n          this.reinviteFailed();\n          break;\n        }\n\n        //REVISIT\n        this.mediaHandler.setDescription(\n          response.body,\n          /*\n           * onSuccess\n           * SDP Answer fits with Offer.\n           */\n          function() {\n            self.reinviteSucceeded();\n          },\n          /*\n           * onFailure\n           * SDP Answer does not fit the Offer.\n           */\n          function() {\n            self.reinviteFailed();\n          }\n        );\n        break;\n      default:\n        this.reinviteFailed();\n    }\n  },\n\n  acceptAndTerminate: function(response, status_code, reason_phrase) {\n    var extraHeaders = [];\n\n    if (status_code) {\n      reason_phrase = reason_phrase || SIP.C.REASON_PHRASE[status_code] || '';\n      extraHeaders.push('Reason: SIP ;cause=' + status_code + '; text=\"' + reason_phrase + '\"');\n    }\n\n    // An error on dialog creation will fire 'failed' event\n    if (this.dialog || this.createDialog(response, 'UAC')) {\n      this.sendRequest(SIP.C.ACK,{cseq: response.cseq});\n      this.sendRequest(SIP.C.BYE, {\n        extraHeaders: extraHeaders\n      });\n    }\n\n    return this;\n  },\n\n  /**\n   * RFC3261 13.3.1.4\n   * Response retransmissions cannot be accomplished by transaction layer\n   *  since it is destroyed when receiving the first 2xx answer\n   */\n  setInvite2xxTimer: function(request, body) {\n    var self = this,\n        timeout = SIP.Timers.T1;\n\n    this.timers.invite2xxTimer = SIP.Timers.setTimeout(function invite2xxRetransmission() {\n      if (self.status !== C.STATUS_WAITING_FOR_ACK) {\n        return;\n      }\n\n      self.logger.log('no ACK received, attempting to retransmit OK');\n\n      request.reply(200, null, ['Contact: ' + self.contact], body);\n\n      timeout = Math.min(timeout * 2, SIP.Timers.T2);\n\n      self.timers.invite2xxTimer = SIP.Timers.setTimeout(invite2xxRetransmission, timeout);\n    }, timeout);\n  },\n\n  /**\n   * RFC3261 14.2\n   * If a UAS generates a 2xx response and never receives an ACK,\n   *  it SHOULD generate a BYE to terminate the dialog.\n   */\n  setACKTimer: function() {\n    var self = this;\n\n    this.timers.ackTimer = SIP.Timers.setTimeout(function() {\n      if(self.status === C.STATUS_WAITING_FOR_ACK) {\n        self.logger.log('no ACK received for an extended period of time, terminating the call');\n        SIP.Timers.clearTimeout(self.timers.invite2xxTimer);\n        self.sendRequest(SIP.C.BYE);\n        self.terminated(null, SIP.C.causes.NO_ACK);\n      }\n    }, SIP.Timers.TIMER_H);\n  },\n\n  /*\n   * @private\n   */\n  onReadyToReinvite: function() {\n    var action = this.pending_actions.shift();\n\n    if (!action || !this[action.name]) {\n      return;\n    }\n\n    this[action.name]();\n  },\n\n  onTransportError: function() {\n    if (this.status === C.STATUS_CONFIRMED) {\n      this.terminated(null, SIP.C.causes.CONNECTION_ERROR);\n    } else if (this.status !== C.STATUS_TERMINATED) {\n      this.failed(null, SIP.C.causes.CONNECTION_ERROR);\n    }\n  },\n\n  onRequestTimeout: function() {\n    if (this.status === C.STATUS_CONFIRMED) {\n      this.terminated(null, SIP.C.causes.REQUEST_TIMEOUT);\n    } else if (this.status !== C.STATUS_TERMINATED) {\n      this.failed(null, SIP.C.causes.REQUEST_TIMEOUT);\n    }\n  },\n\n  onDialogError: function(response) {\n    if (this.status === C.STATUS_CONFIRMED) {\n      this.terminated(response, SIP.C.causes.DIALOG_ERROR);\n    } else if (this.status !== C.STATUS_TERMINATED) {\n      this.failed(response, SIP.C.causes.DIALOG_ERROR);\n    }\n  },\n\n  /**\n   * @private\n   */\n  onhold: function(originator) {\n    this[originator === 'local' ? 'local_hold' : 'remote_hold'] = true;\n    this.emit('hold', { originator: originator });\n  },\n\n  /**\n   * @private\n   */\n  onunhold: function(originator) {\n    this[originator === 'local' ? 'local_hold' : 'remote_hold'] = false;\n    this.emit('unhold', { originator: originator });\n  },\n\n  /*\n   * @private\n   */\n  onmute: function(options) {\n    this.emit('muted', {\n      audio: options.audio,\n      video: options.video\n    });\n  },\n\n  /*\n   * @private\n   */\n  onunmute: function(options) {\n    this.emit('unmuted', {\n      audio: options.audio,\n      video: options.video\n    });\n  },\n\n  failed: function(response, cause) {\n    this.close();\n    return this.emit('failed', response, cause);\n  },\n\n  rejected: function(response, cause) {\n    this.close();\n    return this.emit('rejected',\n      response || null,\n      cause\n    );\n  },\n\n  canceled: function() {\n    this.close();\n    return this.emit('cancel');\n  },\n\n  accepted: function(response, cause) {\n    cause = cause || (response && SIP.C.REASON_PHRASE[response.status_code]) || '';\n\n    this.startTime = new Date();\n\n    return this.emit('accepted', response, cause);\n  },\n\n  terminated: function(message, cause) {\n    this.endTime = new Date();\n\n    this.close();\n    return this.emit('terminated', {\n      message: message || null,\n      cause: cause || null\n    });\n  },\n\n  connecting: function(request) {\n    return this.emit('connecting', { request: request });\n  }\n};\n\nSession.C = C;\nSIP.Session = Session;\n\n\nInviteServerContext = function(ua, request) {\n  var expires,\n    self = this,\n    contentType = request.getHeader('Content-Type'),\n    contentDisp = request.parseHeader('Content-Disposition');\n\n  // Check body and content type\n  if ((!contentDisp && contentType !== 'application/sdp') || (contentDisp && contentDisp.type === 'render')) {\n    this.renderbody = request.body;\n    this.rendertype = contentType;\n  } else if (contentType !== 'application/sdp' && (contentDisp && contentDisp.type === 'session')) {\n    request.reply(415);\n    //TODO: instead of 415, pass off to the media handler, who can then decide if we can use it\n    return;\n  }\n\n  //TODO: move this into media handler\n  SIP.Hacks.Firefox.cannotHandleExtraWhitespace(request);\n  SIP.Hacks.AllBrowsers.maskDtls(request);\n\n  SIP.Utils.augment(this, SIP.ServerContext, [ua, request]);\n  SIP.Utils.augment(this, SIP.Session, [ua.configuration.mediaHandlerFactory]);\n\n  this.status = C.STATUS_INVITE_RECEIVED;\n  this.from_tag = request.from_tag;\n  this.id = request.call_id + this.from_tag;\n  this.request = request;\n  this.contact = this.ua.contact.toString();\n\n  this.receiveNonInviteResponse = function () {}; // intentional no-op\n\n  this.logger = ua.getLogger('sip.inviteservercontext', this.id);\n\n  //Save the session into the ua sessions collection.\n  this.ua.sessions[this.id] = this;\n\n  //Get the Expires header value if exists\n  if(request.hasHeader('expires')) {\n    expires = request.getHeader('expires') * 1000;\n  }\n\n  //Set 100rel if necessary\n  function set100rel(h,c) {\n    if (request.hasHeader(h) && request.getHeader(h).toLowerCase().indexOf('100rel') >= 0) {\n      self.rel100 = c;\n    }\n  }\n  set100rel('require', SIP.C.supported.REQUIRED);\n  set100rel('supported', SIP.C.supported.SUPPORTED);\n\n  /* Set the to_tag before\n   * replying a response code that will create a dialog.\n   */\n  request.to_tag = SIP.Utils.newTag();\n\n  // An error on dialog creation will fire 'failed' event\n  if(!this.createDialog(request, 'UAS', true)) {\n    request.reply(500, 'Missing Contact header field');\n    return;\n  }\n\n  //Initialize Media Session\n  this.mediaHandler = this.mediaHandlerFactory(this, {\n    RTCConstraints: {\"optional\": [{'DtlsSrtpKeyAgreement': 'true'}]}\n  });\n\n  if (this.mediaHandler && this.mediaHandler.getRemoteStreams) {\n    this.getRemoteStreams = this.mediaHandler.getRemoteStreams.bind(this.mediaHandler);\n    this.getLocalStreams = this.mediaHandler.getLocalStreams.bind(this.mediaHandler);\n  }\n\n  function fireNewSession() {\n    var options = {extraHeaders: ['Contact: ' + self.contact]};\n\n    if (self.rel100 !== SIP.C.supported.REQUIRED) {\n      self.progress(options);\n    }\n    self.status = C.STATUS_WAITING_FOR_ANSWER;\n\n    // Set userNoAnswerTimer\n    self.timers.userNoAnswerTimer = SIP.Timers.setTimeout(function() {\n      request.reply(408);\n      self.failed(request, SIP.C.causes.NO_ANSWER);\n    }, self.ua.configuration.noAnswerTimeout);\n\n    /* Set expiresTimer\n     * RFC3261 13.3.1\n     */\n    if (expires) {\n      self.timers.expiresTimer = SIP.Timers.setTimeout(function() {\n        if(self.status === C.STATUS_WAITING_FOR_ANSWER) {\n          request.reply(487);\n          self.failed(request, SIP.C.causes.EXPIRES);\n        }\n      }, expires);\n    }\n\n    self.emit('invite',request);\n  }\n\n  if (!request.body || this.renderbody) {\n    SIP.Timers.setTimeout(fireNewSession, 0);\n  } else {\n    this.hasOffer = true;\n    this.mediaHandler.setDescription(\n      request.body,\n      /*\n       * onSuccess\n       * SDP Offer is valid. Fire UA newRTCSession\n       */\n      fireNewSession,\n      /*\n       * onFailure\n       * Bad media description\n       */\n      function(e) {\n        self.logger.warn('invalid SDP');\n        self.logger.warn(e);\n        request.reply(488);\n      }\n    );\n  }\n};\n\nInviteServerContext.prototype = {\n  reject: function(options) {\n    // Check Session Status\n    if (this.status === C.STATUS_TERMINATED) {\n      throw new SIP.Exceptions.InvalidStateError(this.status);\n    }\n\n    this.logger.log('rejecting RTCSession');\n\n    SIP.ServerContext.prototype.reject.apply(this, [options]);\n    return this.terminated();\n  },\n\n  terminate: function(options) {\n    options = options || {};\n\n    var\n    extraHeaders = (options.extraHeaders || []).slice(),\n    body = options.body,\n    dialog,\n    self = this;\n\n    if (this.status === C.STATUS_WAITING_FOR_ACK &&\n       this.request.server_transaction.state !== SIP.Transactions.C.STATUS_TERMINATED) {\n      dialog = this.dialog;\n\n      this.receiveRequest = function(request) {\n        if (request.method === SIP.C.ACK) {\n          this.request(SIP.C.BYE, {\n            extraHeaders: extraHeaders,\n            body: body\n          });\n          dialog.terminate();\n        }\n      };\n\n      this.request.server_transaction.on('stateChanged', function(){\n        if (this.state === SIP.Transactions.C.STATUS_TERMINATED) {\n          this.request = new SIP.OutgoingRequest(\n            SIP.C.BYE,\n            this.dialog.remote_target,\n            this.ua,\n            {\n              'cseq': this.dialog.local_seqnum+=1,\n              'call_id': this.dialog.id.call_id,\n              'from_uri': this.dialog.local_uri,\n              'from_tag': this.dialog.id.local_tag,\n              'to_uri': this.dialog.remote_uri,\n              'to_tag': this.dialog.id.remote_tag,\n              'route_set': this.dialog.route_set\n            },\n            extraHeaders,\n            body\n          );\n\n          new SIP.RequestSender(\n            {\n              request: this.request,\n              onRequestTimeout: function() {\n                self.onRequestTimeout();\n              },\n              onTransportError: function() {\n                self.onTransportError();\n              },\n              receiveResponse: function() {\n                return;\n              }\n            },\n            this.ua\n          ).send();\n          dialog.terminate();\n        }\n      });\n\n      this.emit('bye', this.request);\n      this.terminated();\n\n      // Restore the dialog into 'this' in order to be able to send the in-dialog BYE :-)\n      this.dialog = dialog;\n\n      // Restore the dialog into 'ua' so the ACK can reach 'this' session\n      this.ua.dialogs[dialog.id.toString()] = dialog;\n\n    } else if (this.status === C.STATUS_CONFIRMED) {\n      this.bye(options);\n    } else {\n      this.reject(options);\n    }\n\n    return this;\n  },\n\n  /*\n   * @param {Object} [options.media] gets passed to SIP.MediaHandler.getDescription as mediaHint\n   */\n  progress: function (options) {\n    options = options || {};\n    var\n      statusCode = options.statusCode || 180,\n      reasonPhrase = options.reasonPhrase,\n      extraHeaders = (options.extraHeaders || []).slice(),\n      body = options.body,\n      response;\n\n    if (statusCode < 100 || statusCode > 199) {\n      throw new TypeError('Invalid statusCode: ' + statusCode);\n    }\n\n    if (this.isCanceled || this.status === C.STATUS_TERMINATED) {\n      return this;\n    }\n\n    function do100rel() {\n      statusCode = options.statusCode || 183;\n\n      // Set status and add extra headers\n      this.status = C.STATUS_WAITING_FOR_PRACK;\n      extraHeaders.push('Contact: '+ this.contact);\n      extraHeaders.push('Require: 100rel');\n      extraHeaders.push('RSeq: ' + Math.floor(Math.random() * 10000));\n\n      // Save media hint for later (referred sessions)\n      this.mediaHint = options.media;\n\n      // Get the session description to add to preaccept with\n      this.mediaHandler.getDescription(\n        // Success\n        function succ(body) {\n          if (this.isCanceled || this.status === C.STATUS_TERMINATED) {\n            return;\n          }\n\n          this.early_sdp = body;\n          this[this.hasOffer ? 'hasAnswer' : 'hasOffer'] = true;\n\n          // Retransmit until we get a response or we time out (see prackTimer below)\n          var timeout = SIP.Timers.T1;\n          this.timers.rel1xxTimer = SIP.Timers.setTimeout(function rel1xxRetransmission() {\n            this.request.reply(statusCode, null, extraHeaders, body);\n            timeout *= 2;\n            this.timers.rel1xxTimer = SIP.Timers.setTimeout(rel1xxRetransmission.bind(this), timeout);\n          }.bind(this), timeout);\n\n          // Timeout and reject INVITE if no response\n          this.timers.prackTimer = SIP.Timers.setTimeout(function () {\n            if (this.status !== C.STATUS_WAITING_FOR_PRACK) {\n              return;\n            }\n\n            this.logger.log('no PRACK received, rejecting the call');\n            SIP.Timers.clearTimeout(this.timers.rel1xxTimer);\n            this.request.reply(504);\n            this.terminated(null, SIP.C.causes.NO_PRACK);\n          }.bind(this), SIP.Timers.T1 * 64);\n\n          // Send the initial response\n          response = this.request.reply(statusCode, reasonPhrase, extraHeaders, body);\n          this.emit('progress', response, reasonPhrase);\n        }.bind(this),\n\n        // Failure\n        function fail() {\n          this.failed(null, SIP.C.causes.WEBRTC_ERROR);\n        }.bind(this),\n\n        // Media hint:\n        options.media);\n    } // end do100rel\n\n    function normalReply() {\n      response = this.request.reply(statusCode, reasonPhrase, extraHeaders, body);\n      this.emit('progress', response, reasonPhrase);\n    }\n\n    if (options.statusCode !== 100 &&\n        (this.rel100 === SIP.C.supported.REQUIRED ||\n         (this.rel100 === SIP.C.supported.SUPPORTED && options.rel100) ||\n         (this.rel100 === SIP.C.supported.SUPPORTED && (this.ua.configuration.rel100 === SIP.C.supported.REQUIRED)))) {\n      do100rel.apply(this);\n    } else {\n      normalReply.apply(this);\n    }\n    return this;\n  },\n\n  /*\n   * @param {Object} [options.media] gets passed to SIP.MediaHandler.getDescription as mediaHint\n   */\n  accept: function(options) {\n    options = options || {};\n    options = SIP.Utils.desugarSessionOptions(options);\n    SIP.Utils.optionsOverride(options, 'media', 'mediaConstraints', true, this.logger, this.ua.configuration.media);\n    this.mediaHint = options.media;\n\n    // commented out now-unused hold-related variables for jshint. See below. JMF 2014-1-21\n    var\n      //idx, length, hasAudio, hasVideo,\n      self = this,\n      request = this.request,\n      extraHeaders = (options.extraHeaders || []).slice(),\n    //mediaStream = options.mediaStream || null,\n      sdpCreationSucceeded = function(body) {\n        var\n          response,\n          // run for reply success callback\n          replySucceeded = function() {\n            self.status = C.STATUS_WAITING_FOR_ACK;\n\n            self.setInvite2xxTimer(request, body);\n            self.setACKTimer();\n          },\n\n          // run for reply failure callback\n          replyFailed = function() {\n            self.failed(null, SIP.C.causes.CONNECTION_ERROR);\n          };\n\n        // Chrome might call onaddstream before accept() is called, which means\n        // mediaHandler.render() was called without a renderHint, so we need to\n        // re-render now that mediaHint.render has been set.\n        //\n        // Chrome seems to be in the right regarding this, see\n        // http://dev.w3.org/2011/webrtc/editor/webrtc.html#widl-RTCPeerConnection-onaddstream\n        self.mediaHandler.render();\n\n        extraHeaders.push('Contact: ' + self.contact);\n\n        if(!self.hasOffer) {\n          self.hasOffer = true;\n        } else {\n          self.hasAnswer = true;\n        }\n        response = request.reply(200, null, extraHeaders,\n                      body,\n                      replySucceeded,\n                      replyFailed\n                     );\n        if (self.status !== C.STATUS_TERMINATED) { // Didn't fail\n          self.accepted(response, SIP.C.REASON_PHRASE[200]);\n        }\n      },\n\n      sdpCreationFailed = function() {\n        if (self.status === C.STATUS_TERMINATED) {\n          return;\n        }\n        // TODO - fail out on error\n        //response = request.reply(480);\n        //self.failed(response, SIP.C.causes.USER_DENIED_MEDIA_ACCESS);\n        self.failed(null, SIP.C.causes.WEBRTC_ERROR);\n      };\n\n    // Check Session Status\n    if (this.status === C.STATUS_WAITING_FOR_PRACK) {\n      this.status = C.STATUS_ANSWERED_WAITING_FOR_PRACK;\n      return this;\n    } else if (this.status === C.STATUS_WAITING_FOR_ANSWER) {\n      this.status = C.STATUS_ANSWERED;\n    } else if (this.status !== C.STATUS_EARLY_MEDIA) {\n      throw new SIP.Exceptions.InvalidStateError(this.status);\n    }\n\n    // An error on dialog creation will fire 'failed' event\n    if(!this.createDialog(request, 'UAS')) {\n      request.reply(500, 'Missing Contact header field');\n      return this;\n    }\n\n    SIP.Timers.clearTimeout(this.timers.userNoAnswerTimer);\n\n    // this hold-related code breaks FF accepting new calls - JMF 2014-1-21\n    /*\n    length = this.getRemoteStreams().length;\n\n    for (idx = 0; idx < length; idx++) {\n      if (this.mediaHandler.getRemoteStreams()[idx].getVideoTracks().length > 0) {\n        hasVideo = true;\n      }\n      if (this.mediaHandler.getRemoteStreams()[idx].getAudioTracks().length > 0) {\n        hasAudio = true;\n      }\n    }\n\n    if (!hasAudio && this.mediaConstraints.audio === true) {\n      this.mediaConstraints.audio = false;\n      if (mediaStream) {\n        length = mediaStream.getAudioTracks().length;\n        for (idx = 0; idx < length; idx++) {\n          mediaStream.removeTrack(mediaStream.getAudioTracks()[idx]);\n        }\n      }\n    }\n\n    if (!hasVideo && this.mediaConstraints.video === true) {\n      this.mediaConstraints.video = false;\n      if (mediaStream) {\n        length = mediaStream.getVideoTracks().length;\n        for (idx = 0; idx < length; idx++) {\n          mediaStream.removeTrack(mediaStream.getVideoTracks()[idx]);\n        }\n      }\n    }\n    */\n\n    if (this.status === C.STATUS_EARLY_MEDIA) {\n      sdpCreationSucceeded();\n    } else {\n      this.mediaHandler.getDescription(\n        sdpCreationSucceeded,\n        sdpCreationFailed,\n        self.mediaHint\n      );\n    }\n\n    return this;\n  },\n\n  receiveRequest: function(request) {\n\n    // ISC RECEIVE REQUEST\n\n    function confirmSession() {\n      var contentType;\n\n      SIP.Timers.clearTimeout(this.timers.ackTimer);\n      SIP.Timers.clearTimeout(this.timers.invite2xxTimer);\n      this.status = C.STATUS_CONFIRMED;\n      this.unmute();\n\n      // TODO - this logic assumes Content-Disposition defaults\n      contentType = request.getHeader('Content-Type');\n      if (contentType !== 'application/sdp') {\n        this.renderbody = request.body;\n        this.rendertype = contentType;\n      }\n    }\n\n    switch(request.method) {\n    case SIP.C.CANCEL:\n      /* RFC3261 15 States that a UAS may have accepted an invitation while a CANCEL\n       * was in progress and that the UAC MAY continue with the session established by\n       * any 2xx response, or MAY terminate with BYE. SIP does continue with the\n       * established session. So the CANCEL is processed only if the session is not yet\n       * established.\n       */\n\n      /*\n       * Terminate the whole session in case the user didn't accept (or yet to send the answer) nor reject the\n       *request opening the session.\n       */\n      if(this.status === C.STATUS_WAITING_FOR_ANSWER ||\n         this.status === C.STATUS_WAITING_FOR_PRACK ||\n         this.status === C.STATUS_ANSWERED_WAITING_FOR_PRACK ||\n         this.status === C.STATUS_EARLY_MEDIA ||\n         this.status === C.STATUS_ANSWERED) {\n\n        this.status = C.STATUS_CANCELED;\n        this.request.reply(487);\n        this.canceled(request);\n        this.rejected(request, SIP.C.causes.CANCELED);\n        this.failed(request, SIP.C.causes.CANCELED);\n      }\n      break;\n    case SIP.C.ACK:\n      if(this.status === C.STATUS_WAITING_FOR_ACK) {\n        if (!this.hasAnswer) {\n          if(request.body && request.getHeader('content-type') === 'application/sdp') {\n            // ACK contains answer to an INVITE w/o SDP negotiation\n            SIP.Hacks.Firefox.cannotHandleExtraWhitespace(request);\n            SIP.Hacks.AllBrowsers.maskDtls(request);\n\n            this.hasAnswer = true;\n            this.mediaHandler.setDescription(\n              request.body,\n              /*\n               * onSuccess\n               * SDP Answer fits with Offer. Media will start\n               */\n              confirmSession.bind(this),\n              /*\n               * onFailure\n               * SDP Answer does not fit the Offer.  Terminate the call.\n               */\n              function (e) {\n                this.logger.warn(e);\n                this.terminate({\n                  statusCode: '488',\n                  reasonPhrase: 'Bad Media Description'\n                });\n                this.failed(request, SIP.C.causes.BAD_MEDIA_DESCRIPTION);\n              }.bind(this)\n            );\n          } else if (this.early_sdp) {\n            confirmSession.apply(this);\n          } else {\n            //TODO: Pass to mediahandler\n            this.failed(request, SIP.C.causes.BAD_MEDIA_DESCRIPTION);\n          }\n        } else {\n          confirmSession.apply(this);\n        }\n      }\n      break;\n    case SIP.C.PRACK:\n      if (this.status === C.STATUS_WAITING_FOR_PRACK || this.status === C.STATUS_ANSWERED_WAITING_FOR_PRACK) {\n        //localMedia = session.mediaHandler.localMedia;\n        if(!this.hasAnswer) {\n          if(request.body && request.getHeader('content-type') === 'application/sdp') {\n            this.hasAnswer = true;\n            this.mediaHandler.setDescription(\n              request.body,\n              /*\n               * onSuccess\n               * SDP Answer fits with Offer. Media will start\n               */\n              function() {\n                SIP.Timers.clearTimeout(this.timers.rel1xxTimer);\n                SIP.Timers.clearTimeout(this.timers.prackTimer);\n                request.reply(200);\n                if (this.status === C.STATUS_ANSWERED_WAITING_FOR_PRACK) {\n                  this.status = C.STATUS_EARLY_MEDIA;\n                  this.accept();\n                }\n                this.status = C.STATUS_EARLY_MEDIA;\n                //REVISIT\n                this.mute();\n              }.bind(this),\n              function (e) {\n                //TODO: Send to media handler\n                this.logger.warn(e);\n                this.terminate({\n                  statusCode: '488',\n                  reasonPhrase: 'Bad Media Description'\n                });\n                this.failed(request, SIP.C.causes.BAD_MEDIA_DESCRIPTION);\n              }.bind(this)\n            );\n          } else {\n            this.terminate({\n              statusCode: '488',\n              reasonPhrase: 'Bad Media Description'\n            });\n            this.failed(request, SIP.C.causes.BAD_MEDIA_DESCRIPTION);\n          }\n        } else {\n          SIP.Timers.clearTimeout(this.timers.rel1xxTimer);\n          SIP.Timers.clearTimeout(this.timers.prackTimer);\n          request.reply(200);\n\n          if (this.status === C.STATUS_ANSWERED_WAITING_FOR_PRACK) {\n            this.status = C.STATUS_EARLY_MEDIA;\n            this.accept();\n          }\n          this.status = C.STATUS_EARLY_MEDIA;\n          //REVISIT\n          this.mute();\n        }\n      } else if(this.status === C.STATUS_EARLY_MEDIA) {\n        request.reply(200);\n      }\n      break;\n    default:\n      Session.prototype.receiveRequest.apply(this, [request]);\n      break;\n    }\n  }\n};\n\nSIP.InviteServerContext = InviteServerContext;\n\nInviteClientContext = function(ua, target, options) {\n  options = options || {};\n  var requestParams, iceServers,\n    extraHeaders = (options.extraHeaders || []).slice(),\n    stunServers = options.stunServers || null,\n    turnServers = options.turnServers || null,\n    isMediaSupported = ua.configuration.mediaHandlerFactory.isSupported;\n\n  // Check WebRTC support\n  if (isMediaSupported && !isMediaSupported()) {\n    throw new SIP.Exceptions.NotSupportedError('Media not supported');\n  }\n\n  this.RTCConstraints = options.RTCConstraints || {};\n  this.inviteWithoutSdp = options.inviteWithoutSdp || false;\n\n  // Set anonymous property\n  this.anonymous = options.anonymous || false;\n\n  // Custom data to be sent either in INVITE or in ACK\n  this.renderbody = options.renderbody || null;\n  this.rendertype = options.rendertype || 'text/plain';\n\n  requestParams = {from_tag: this.from_tag};\n\n  /* Do not add ;ob in initial forming dialog requests if the registration over\n   *  the current connection got a GRUU URI.\n   */\n  this.contact = ua.contact.toString({\n    anonymous: this.anonymous,\n    outbound: this.anonymous ? !ua.contact.temp_gruu : !ua.contact.pub_gruu\n  });\n\n  if (this.anonymous) {\n    requestParams.from_displayName = 'Anonymous';\n    requestParams.from_uri = 'sip:anonymous@anonymous.invalid';\n\n    extraHeaders.push('P-Preferred-Identity: '+ ua.configuration.uri.toString());\n    extraHeaders.push('Privacy: id');\n  }\n  extraHeaders.push('Contact: '+ this.contact);\n  extraHeaders.push('Allow: '+ SIP.Utils.getAllowedMethods(ua));\n  if (!this.inviteWithoutSdp) {\n    extraHeaders.push('Content-Type: application/sdp');\n  } else if (this.renderbody) {\n    extraHeaders.push('Content-Type: ' + this.rendertype);\n    extraHeaders.push('Content-Disposition: render;handling=optional');\n  }\n\n  if (ua.configuration.rel100 === SIP.C.supported.REQUIRED) {\n    extraHeaders.push('Require: 100rel');\n  }\n\n  options.extraHeaders = extraHeaders;\n  options.params = requestParams;\n\n  SIP.Utils.augment(this, SIP.ClientContext, [ua, SIP.C.INVITE, target, options]);\n  SIP.Utils.augment(this, SIP.Session, [ua.configuration.mediaHandlerFactory]);\n\n  // Check Session Status\n  if (this.status !== C.STATUS_NULL) {\n    throw new SIP.Exceptions.InvalidStateError(this.status);\n  }\n\n  // Session parameter initialization\n  this.from_tag = SIP.Utils.newTag();\n\n  // OutgoingSession specific parameters\n  this.isCanceled = false;\n  this.received_100 = false;\n\n  this.method = SIP.C.INVITE;\n\n  this.receiveNonInviteResponse = this.receiveResponse;\n  this.receiveResponse = this.receiveInviteResponse;\n\n  this.logger = ua.getLogger('sip.inviteclientcontext');\n\n  if (stunServers) {\n    iceServers = SIP.UA.configuration_check.optional['stunServers'](stunServers);\n    if (!iceServers) {\n      throw new TypeError('Invalid stunServers: '+ stunServers);\n    } else {\n      this.stunServers = iceServers;\n    }\n  }\n\n  if (turnServers) {\n    iceServers = SIP.UA.configuration_check.optional['turnServers'](turnServers);\n    if (!iceServers) {\n      throw new TypeError('Invalid turnServers: '+ turnServers);\n    } else {\n      this.turnServers = iceServers;\n    }\n  }\n\n  ua.applicants[this] = this;\n\n  this.id = this.request.call_id + this.from_tag;\n\n  //Initialize Media Session\n  this.mediaHandler = this.mediaHandlerFactory(this, {\n    RTCConstraints: this.RTCConstraints,\n    stunServers: this.stunServers,\n    turnServers: this.turnServers\n  });\n\n  if (this.mediaHandler && this.mediaHandler.getRemoteStreams) {\n    this.getRemoteStreams = this.mediaHandler.getRemoteStreams.bind(this.mediaHandler);\n    this.getLocalStreams = this.mediaHandler.getLocalStreams.bind(this.mediaHandler);\n  }\n};\n\nInviteClientContext.prototype = {\n  /*\n   * @param {Object} [options.media] gets passed to SIP.MediaHandler.getDescription as mediaHint\n   */\n  invite: function (options) {\n    var self = this;\n    options = options || {};\n\n    SIP.Utils.optionsOverride(options, 'media', 'mediaConstraints', true, this.logger, this.ua.configuration.media);\n    this.mediaHint = options.media;\n\n    //Save the session into the ua sessions collection.\n    //Note: placing in constructor breaks call to request.cancel on close... User does not need this anyway\n    this.ua.sessions[this.id] = this;\n\n    //Note: due to the way Firefox handles gUM calls, it is recommended to make the gUM call at the app level\n    // and hand sip.js a stream as the mediaHint\n    if (this.inviteWithoutSdp) {\n      //just send an invite with no sdp...\n      this.request.body = self.renderbody;\n      this.status = C.STATUS_INVITE_SENT;\n      this.send();\n    } else {\n      this.mediaHandler.getDescription(\n        function onSuccess(offer) {\n          if (self.isCanceled || self.status === C.STATUS_TERMINATED) {\n            return;\n          }\n          self.hasOffer = true;\n          self.request.body = offer;\n          self.status = C.STATUS_INVITE_SENT;\n          self.send();\n        },\n        function onFailure() {\n          if (self.status === C.STATUS_TERMINATED) {\n            return;\n          }\n          // TODO...fail out\n          //self.failed(null, SIP.C.causes.USER_DENIED_MEDIA_ACCESS);\n          //self.failed(null, SIP.C.causes.WEBRTC_ERROR);\n          self.failed(null, SIP.C.causes.WEBRTC_ERROR);\n        },\n        self.mediaHint\n      );\n    }\n\n    return this;\n  },\n\n  receiveInviteResponse: function(response) {\n    var cause, //localMedia,\n      session = this,\n      id = response.call_id + response.from_tag + response.to_tag,\n      extraHeaders = [],\n      options = {};\n\n    if (this.status === C.STATUS_TERMINATED || response.method !== SIP.C.INVITE) {\n      return;\n    }\n\n    if (this.dialog && (response.status_code >= 200 && response.status_code <= 299)) {\n      if (id !== this.dialog.id.toString() ) {\n        if (!this.createDialog(response, 'UAC', true)) {\n          return;\n        }\n        this.earlyDialogs[id].sendRequest(this, SIP.C.ACK,\n                                          {\n                                            body: SIP.Utils.generateFakeSDP(response.body)\n                                          });\n        this.earlyDialogs[id].sendRequest(this, SIP.C.BYE);\n\n        /* NOTE: This fails because the forking proxy does not recognize that an unanswerable\n         * leg (due to peerConnection limitations) has been answered first. If your forking\n         * proxy does not hang up all unanswered branches on the first branch answered, remove this.\n         */\n        if(this.status !== C.STATUS_CONFIRMED) {\n          this.failed(response, SIP.C.causes.WEBRTC_ERROR);\n        }\n        return;\n      } else if (this.status === C.STATUS_CONFIRMED) {\n        this.sendRequest(SIP.C.ACK,{cseq: response.cseq});\n        return;\n      } else if (!this.hasAnswer) {\n        // invite w/o sdp is waiting for callback\n        //an invite with sdp must go on, and hasAnswer is true\n        return;\n      }\n    }\n\n    if (this.dialog && response.status_code < 200) {\n      /*\n        Early media has been set up with at least one other different branch,\n        but a final 2xx response hasn't been received\n      */\n      if (!this.earlyDialogs[id] && !this.createDialog(response, 'UAC', true)) {\n        return;\n      }\n\n      extraHeaders.push('RAck: ' + response.getHeader('rseq') + ' ' + response.getHeader('cseq'));\n      this.earlyDialogs[id].pracked.push(response.getHeader('rseq'));\n\n      this.earlyDialogs[id].sendRequest(this, SIP.C.PRACK, {\n        extraHeaders: extraHeaders,\n        body: SIP.Utils.generateFakeSDP(response.body)\n      });\n      return;\n    }\n\n    // Proceed to cancellation if the user requested.\n    if(this.isCanceled) {\n      if(response.status_code >= 100 && response.status_code < 200) {\n        this.request.cancel(this.cancelReason);\n        this.canceled(null);\n      } else if(response.status_code >= 200 && response.status_code < 299) {\n        this.acceptAndTerminate(response);\n        this.emit('bye', this.request);\n      }\n      return;\n    }\n\n    switch(true) {\n      case /^100$/.test(response.status_code):\n        this.received_100 = true;\n        break;\n      case (/^1[0-9]{2}$/.test(response.status_code)):\n        // Do nothing with 1xx responses without To tag.\n        if(!response.to_tag) {\n          this.logger.warn('1xx response received without to tag');\n          break;\n        }\n\n        // Create Early Dialog if 1XX comes with contact\n        if(response.hasHeader('contact')) {\n          // An error on dialog creation will fire 'failed' event\n          if (!this.createDialog(response, 'UAC', true)) {\n            break;\n          }\n        }\n\n        this.status = C.STATUS_1XX_RECEIVED;\n\n        if(response.hasHeader('require') &&\n           response.getHeader('require').indexOf('100rel') !== -1) {\n\n          // Do nothing if this.dialog is already confirmed\n          if (this.dialog || !this.earlyDialogs[id]) {\n            break;\n          }\n\n          if (this.earlyDialogs[id].pracked.indexOf(response.getHeader('rseq')) !== -1 ||\n              (this.earlyDialogs[id].pracked[this.earlyDialogs[id].pracked.length-1] >= response.getHeader('rseq') && this.earlyDialogs[id].pracked.length > 0)) {\n            return;\n          }\n\n          SIP.Hacks.Firefox.cannotHandleExtraWhitespace(response);\n          SIP.Hacks.AllBrowsers.maskDtls(response);\n\n          if (!response.body) {\n            extraHeaders.push('RAck: ' + response.getHeader('rseq') + ' ' + response.getHeader('cseq'));\n            this.earlyDialogs[id].pracked.push(response.getHeader('rseq'));\n            this.earlyDialogs[id].sendRequest(this, SIP.C.PRACK, {\n              extraHeaders: extraHeaders\n            });\n            this.emit('progress', response);\n\n          } else if (this.hasOffer) {\n            if (!this.createDialog(response, 'UAC')) {\n              break;\n            }\n            this.hasAnswer = true;\n            this.mediaHandler.setDescription(\n              response.body,\n              /*\n               * onSuccess\n               * SDP Answer fits with Offer. Media will start\n               */\n              function () {\n                extraHeaders.push('RAck: ' + response.getHeader('rseq') + ' ' + response.getHeader('cseq'));\n                session.dialog.pracked.push(response.getHeader('rseq'));\n\n                session.sendRequest(SIP.C.PRACK, {\n                  extraHeaders: extraHeaders,\n                  receiveResponse: function() {}\n                });\n                session.status = C.STATUS_EARLY_MEDIA;\n                session.mute();\n                session.emit('progress', response);\n                /*\n                if (session.status === C.STATUS_EARLY_MEDIA) {\n                  localMedia = session.mediaHandler.localMedia;\n                  if (localMedia.getAudioTracks().length > 0) {\n                    localMedia.getAudioTracks()[0].enabled = false;\n                  }\n                  if (localMedia.getVideoTracks().length > 0) {\n                    localMedia.getVideoTracks()[0].enabled = false;\n                  }\n                }*/\n              },\n              /*\n               * onFailure\n               * SDP Answer does not fit the Offer. Accept the call and Terminate.\n               */\n              function(e) {\n                session.logger.warn(e);\n                session.acceptAndTerminate(response, 488, 'Not Acceptable Here');\n                session.failed(response, SIP.C.causes.BAD_MEDIA_DESCRIPTION);\n              }\n            );\n          } else {\n            this.earlyDialogs[id].pracked.push(response.getHeader('rseq'));\n            this.earlyDialogs[id].mediaHandler.setDescription(\n              response.body,\n              function onSuccess() {\n                session.earlyDialogs[id].mediaHandler.getDescription(\n                  function onSuccess(sdp) {\n                    extraHeaders.push('Content-Type: application/sdp');\n                    extraHeaders.push('RAck: ' + response.getHeader('rseq') + ' ' + response.getHeader('cseq'));\n                    session.earlyDialogs[id].sendRequest(session, SIP.C.PRACK, {\n                      extraHeaders: extraHeaders,\n                      body: sdp\n                    });\n                    session.status = C.STATUS_EARLY_MEDIA;\n                    session.emit('progress', response);\n                  },\n                  function onFailure() {\n                    session.earlyDialogs[id].pracked.push(response.getHeader('rseq'));\n                    if (session.status === C.STATUS_TERMINATED) {\n                      return;\n                    }\n                    // TODO - fail out on error\n                    // session.failed(gum error);\n                    session.failed(null, SIP.C.causes.WEBRTC_ERROR);\n                  },\n                  session.mediaHint\n                );\n              },\n              function onFailure(e) {\n                session.earlyDialogs[id].pracked.splice(session.earlyDialogs[id].pracked.indexOf(response.getHeader('rseq')), 1);\n                // Could not set remote description\n                session.logger.warn('invalid SDP');\n                session.logger.warn(e);\n              }\n            );\n          }\n        } else {\n          this.emit('progress', response);\n        }\n        break;\n      case /^2[0-9]{2}$/.test(response.status_code):\n        var cseq = this.request.cseq + ' ' + this.request.method;\n        if (cseq !== response.getHeader('cseq')) {\n          break;\n        }\n\n        if (this.status === C.STATUS_EARLY_MEDIA && this.dialog) {\n          this.status = C.STATUS_CONFIRMED;\n          this.unmute();\n          /*localMedia = this.mediaHandler.localMedia;\n          if (localMedia.getAudioTracks().length > 0) {\n            localMedia.getAudioTracks()[0].enabled = true;\n          }\n          if (localMedia.getVideoTracks().length > 0) {\n            localMedia.getVideoTracks()[0].enabled = true;\n          }*/\n          options = {};\n          if (this.renderbody) {\n            extraHeaders.push('Content-Type: ' + this.rendertype);\n            options.extraHeaders = extraHeaders;\n            options.body = this.renderbody;\n          }\n          options.cseq = response.cseq;\n          this.sendRequest(SIP.C.ACK, options);\n          this.accepted(response);\n          break;\n        }\n        // Do nothing if this.dialog is already confirmed\n        if (this.dialog) {\n          break;\n        }\n\n        SIP.Hacks.Firefox.cannotHandleExtraWhitespace(response);\n        SIP.Hacks.AllBrowsers.maskDtls(response);\n\n        // This is an invite without sdp\n        if (!this.hasOffer) {\n          if (this.earlyDialogs[id] && this.earlyDialogs[id].mediaHandler.localMedia) {\n            //REVISIT\n            this.hasOffer = true;\n            this.hasAnswer = true;\n            this.mediaHandler = this.earlyDialogs[id].mediaHandler;\n            if (!this.createDialog(response, 'UAC')) {\n              break;\n            }\n            this.status = C.STATUS_CONFIRMED;\n            this.sendRequest(SIP.C.ACK, {cseq:response.cseq});\n\n            this.unmute();\n            /*\n            localMedia = session.mediaHandler.localMedia;\n            if (localMedia.getAudioTracks().length > 0) {\n              localMedia.getAudioTracks()[0].enabled = true;\n            }\n            if (localMedia.getVideoTracks().length > 0) {\n              localMedia.getVideoTracks()[0].enabled = true;\n            }*/\n            this.accepted(response);\n          } else {\n            if(!response.body) {\n              this.acceptAndTerminate(response, 400, 'Missing session description');\n              this.failed(response, SIP.C.causes.BAD_MEDIA_DESCRIPTION);\n              break;\n            }\n            if (!this.createDialog(response, 'UAC')) {\n              break;\n            }\n            this.hasOffer = true;\n            this.mediaHandler.setDescription(\n              response.body,\n              function onSuccess() {\n                session.mediaHandler.getDescription(\n                  function onSuccess(sdp) {\n                    //var localMedia;\n                    if(session.isCanceled || session.status === C.STATUS_TERMINATED) {\n                      return;\n                    }\n\n                    sdp = SIP.Hacks.Firefox.hasMissingCLineInSDP(sdp);\n\n                    session.status = C.STATUS_CONFIRMED;\n                    session.hasAnswer = true;\n\n                    session.unmute();\n                    /*localMedia = session.mediaHandler.localMedia;\n                    if (localMedia.getAudioTracks().length > 0) {\n                      localMedia.getAudioTracks()[0].enabled = true;\n                    }\n                    if (localMedia.getVideoTracks().length > 0) {\n                      localMedia.getVideoTracks()[0].enabled = true;\n                    }*/\n                    session.sendRequest(SIP.C.ACK,{\n                      body: sdp,\n                      extraHeaders:['Content-Type: application/sdp'],\n                      cseq:response.cseq\n                    });\n                    session.accepted(response);\n                  },\n                  function onFailure() {\n                    // TODO do something here\n                    session.logger.warn(\"there was a problem\");\n                  },\n                  session.mediaHint\n                );\n              },\n              function onFailure(e) {\n                session.logger.warn('invalid SDP');\n                session.logger.warn(e);\n                response.reply(488);\n              }\n            );\n          }\n        } else if (this.hasAnswer){\n          if (this.renderbody) {\n            extraHeaders.push('Content-Type: ' + session.rendertype);\n            options.extraHeaders = extraHeaders;\n            options.body = this.renderbody;\n          }\n          this.sendRequest(SIP.C.ACK, options);\n        } else {\n          if(!response.body) {\n            this.acceptAndTerminate(response, 400, 'Missing session description');\n            this.failed(response, SIP.C.causes.BAD_MEDIA_DESCRIPTION);\n            break;\n          }\n          if (!this.createDialog(response, 'UAC')) {\n            break;\n          }\n          this.hasAnswer = true;\n          this.mediaHandler.setDescription(\n            response.body,\n            /*\n             * onSuccess\n             * SDP Answer fits with Offer. Media will start\n             */\n            function() {\n              var options = {};//,localMedia;\n              session.status = C.STATUS_CONFIRMED;\n              session.unmute();\n              /*localMedia = session.mediaHandler.localMedia;\n              if (localMedia.getAudioTracks().length > 0) {\n                localMedia.getAudioTracks()[0].enabled = true;\n              }\n              if (localMedia.getVideoTracks().length > 0) {\n                localMedia.getVideoTracks()[0].enabled = true;\n              }*/\n              if (session.renderbody) {\n                extraHeaders.push('Content-Type: ' + session.rendertype);\n                options.extraHeaders = extraHeaders;\n                options.body = session.renderbody;\n              }\n              options.cseq = response.cseq;\n              session.sendRequest(SIP.C.ACK, options);\n              session.accepted(response);\n            },\n            /*\n             * onFailure\n             * SDP Answer does not fit the Offer. Accept the call and Terminate.\n             */\n            function(e) {\n              session.logger.warn(e);\n              session.acceptAndTerminate(response, 488, 'Not Acceptable Here');\n              session.failed(response, SIP.C.causes.BAD_MEDIA_DESCRIPTION);\n            }\n          );\n        }\n        break;\n      default:\n        cause = SIP.Utils.sipErrorCause(response.status_code);\n        this.failed(response, cause);\n        this.rejected(response, cause);\n    }\n  },\n\n  cancel: function(options) {\n    options = options || {};\n\n    var\n    statusCode = options.status_code,\n    reasonPhrase = options.reasonPhrase,\n    cancel_reason;\n\n    // Check Session Status\n    if (this.status === C.STATUS_TERMINATED) {\n      throw new SIP.Exceptions.InvalidStateError(this.status);\n    }\n\n    this.logger.log('canceling RTCSession');\n\n    if (statusCode && (statusCode < 200 || statusCode >= 700)) {\n      throw new TypeError('Invalid status_code: '+ statusCode);\n    } else if (statusCode) {\n      reasonPhrase = reasonPhrase || SIP.C.REASON_PHRASE[statusCode] || '';\n      cancel_reason = 'SIP ;cause=' + statusCode + ' ;text=\"' + reasonPhrase + '\"';\n    }\n\n    // Check Session Status\n    if (this.status === C.STATUS_NULL ||\n        (this.status === C.STATUS_INVITE_SENT && !this.received_100)) {\n      this.isCanceled = true;\n      this.cancelReason = cancel_reason;\n    } else if (this.status === C.STATUS_INVITE_SENT ||\n               this.status === C.STATUS_1XX_RECEIVED ||\n               this.status === C.STATUS_EARLY_MEDIA) {\n      this.request.cancel(cancel_reason);\n    }\n\n    return this.canceled();\n  },\n\n  terminate: function(options) {\n    if (this.status === C.STATUS_TERMINATED) {\n      return this;\n    }\n\n    if (this.status === C.STATUS_WAITING_FOR_ACK || this.status === C.STATUS_CONFIRMED) {\n      this.bye(options);\n    } else {\n      this.cancel(options);\n    }\n\n    return this.terminated();\n  },\n\n  receiveRequest: function(request) {\n    // ICC RECEIVE REQUEST\n\n    // Reject CANCELs\n    if (request.method === SIP.C.CANCEL) {\n      // TODO; make this a switch when it gets added\n    }\n\n    if (request.method === SIP.C.ACK && this.status === C.STATUS_WAITING_FOR_ACK) {\n      SIP.Timers.clearTimeout(this.timers.ackTimer);\n      SIP.Timers.clearTimeout(this.timers.invite2xxTimer);\n      this.status = C.STATUS_CONFIRMED;\n      this.unmute();\n\n      this.accepted();\n    }\n\n    return Session.prototype.receiveRequest.apply(this, [request]);\n  }\n};\n\nSIP.InviteClientContext = InviteClientContext;\n\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/sip.js/src/Session.js\n ** module id = 25\n ** module chunks = 0\n **/","\n/**\n * @fileoverview SIP Subscriber (SIP-Specific Event Notifications RFC6665)\n */\n\n/**\n * @augments SIP\n * @class Class creating a SIP Subscription.\n */\nmodule.exports = function (SIP) {\nSIP.Subscription = function (ua, target, event, options) {\n  var events;\n\n  options = options || {};\n  options.extraHeaders = (options.extraHeaders || []).slice();\n\n  events = ['notify'];\n  this.id = null;\n  this.state = 'init';\n\n  if (!event) {\n    throw new TypeError('Event necessary to create a subscription.');\n  } else {\n    //TODO: check for valid events here probably make a list in SIP.C; or leave it up to app to check?\n    //The check may need to/should probably occur on the other side,\n    this.event = event;\n  }\n\n  if(typeof options.expires !== 'number'){\n    ua.logger.warn('expires must be a number. Using default of 3600.');\n    this.expires = 3600;\n  } else {\n    this.expires = options.expires;\n  }\n\n  options.extraHeaders.push('Event: ' + this.event);\n  options.extraHeaders.push('Expires: ' + this.expires);\n\n  if (options.body) {\n    this.body = options.body;\n  }\n\n  this.contact = ua.contact.toString();\n\n  options.extraHeaders.push('Contact: '+ this.contact);\n  options.extraHeaders.push('Allow: '+ SIP.Utils.getAllowedMethods(ua));\n\n  SIP.Utils.augment(this, SIP.ClientContext, [ua, SIP.C.SUBSCRIBE, target, options]);\n\n  this.logger = ua.getLogger('sip.subscription');\n\n  this.dialog = null;\n  this.timers = {N: null, sub_duration: null};\n  this.errorCodes  = [404,405,410,416,480,481,482,483,484,485,489,501,604];\n\n  this.initMoreEvents(events);\n};\n\nSIP.Subscription.prototype = {\n  subscribe: function() {\n    var sub = this;\n\n    SIP.Timers.clearTimeout(this.timers.sub_duration);\n    SIP.Timers.clearTimeout(this.timers.N);\n    this.timers.N = SIP.Timers.setTimeout(sub.timer_fire.bind(sub), SIP.Timers.TIMER_N);\n\n    this.send();\n\n    this.state = 'notify_wait';\n\n    return this;\n  },\n\n  receiveResponse: function(response) {\n    var expires, sub = this,\n        cause = SIP.C.REASON_PHRASE[response.status_code] || '';\n\n    if (this.errorCodes.indexOf(response.status_code) !== -1) {\n      this.failed(response, null);\n    } else if (/^2[0-9]{2}$/.test(response.status_code)){\n      expires = response.getHeader('Expires');\n      SIP.Timers.clearTimeout(this.timers.N);\n\n      if (this.createConfirmedDialog(response,'UAC')) {\n        this.id = this.dialog.id.toString();\n        this.ua.subscriptions[this.id] = this;\n        this.emit('accepted', response, cause);\n        // UPDATE ROUTE SET TO BE BACKWARDS COMPATIBLE?\n      }\n\n      if (expires && expires <= this.expires) {\n        this.timers.sub_duration = SIP.Timers.setTimeout(sub.subscribe.bind(sub), expires * 1000);\n      } else {\n        if (!expires) {\n          this.logger.warn('Expires header missing in a 200-class response to SUBSCRIBE');\n          this.failed(response, SIP.C.EXPIRES_HEADER_MISSING);\n        } else {\n          this.logger.warn('Expires header in a 200-class response to SUBSCRIBE with a higher value than the one in the request');\n          this.failed(response, SIP.C.INVALID_EXPIRES_HEADER);\n        }\n      }\n    } //Used to just ignore provisional responses; now ignores everything except errorCodes and 2xx\n  },\n\n  unsubscribe: function() {\n    var extraHeaders = [], sub = this;\n\n    this.state = 'terminated';\n\n    extraHeaders.push('Event: ' + this.event);\n    extraHeaders.push('Expires: 0');\n\n    extraHeaders.push('Contact: '+ this.contact);\n    extraHeaders.push('Allow: '+ SIP.Utils.getAllowedMethods(this.ua));\n\n    this.request = new SIP.OutgoingRequest(this.method, this.request.to.uri.toString(), this.ua, null, extraHeaders);\n\n    //MAYBE, may want to see state\n    this.receiveResponse = function(){};\n\n    SIP.Timers.clearTimeout(this.timers.sub_duration);\n    SIP.Timers.clearTimeout(this.timers.N);\n    this.timers.N = SIP.Timers.setTimeout(sub.timer_fire.bind(sub), SIP.Timers.TIMER_N);\n\n    this.send();\n  },\n\n  /**\n  * @private\n  */\n  timer_fire: function(){\n    if (this.state === 'terminated') {\n      this.close();\n    } else if (this.state === 'pending' || this.state === 'notify_wait') {\n      this.state = 'terminated';\n      this.close();\n    } else {\n      this.subscribe();\n    }\n  },\n\n  /**\n  * @private\n  */\n  close: function() {\n    if(this.state !== 'terminated') {\n      this.unsubscribe();\n    }\n\n    this.terminateDialog();\n    SIP.Timers.clearTimeout(this.timers.N);\n    SIP.Timers.clearTimeout(this.timers.sub_duration);\n\n    delete this.ua.subscriptions[this.id];\n  },\n\n  /**\n  * @private\n  */\n  createConfirmedDialog: function(message, type) {\n    var dialog;\n\n    this.terminateDialog();\n    dialog = new SIP.Dialog(this, message, type);\n\n    if(!dialog.error) {\n      this.dialog = dialog;\n      return true;\n    }\n    // Dialog not created due to an error\n    else {\n      return false;\n    }\n  },\n\n  /**\n  * @private\n  */\n  terminateDialog: function() {\n    if(this.dialog) {\n      delete this.ua.subscriptions[this.id];\n      this.dialog.terminate();\n      delete this.dialog;\n    }\n  },\n\n  /**\n  * @private\n  */\n  receiveRequest: function(request) {\n    var sub_state, sub = this;\n\n    function setExpiresTimeout() {\n      if (sub_state.expires) {\n        sub_state.expires = Math.min(sub.expires,\n                                     Math.max(sub_state.expires, 0));\n        sub.timers.sub_duration = SIP.Timers.setTimeout(sub.subscribe.bind(sub),\n                                                    sub_state.expires * 1000);\n      }\n    }\n\n    if (!this.matchEvent(request)) { //checks event and subscription_state headers\n      request.reply(489);\n      return;\n    }\n\n    sub_state = request.parseHeader('Subscription-State');\n\n    request.reply(200, SIP.C.REASON_200);\n\n    SIP.Timers.clearTimeout(this.timers.N);\n    SIP.Timers.clearTimeout(this.timers.sub_duration);\n\n    this.emit('notify', {request: request});\n\n    switch (sub_state.state) {\n      case 'active':\n        this.state = 'active';\n        setExpiresTimeout();\n        break;\n      case 'pending':\n        if (this.state === 'notify_wait') {\n          setExpiresTimeout();\n        }\n        this.state = 'pending';\n        break;\n      case 'terminated':\n        if (sub_state.reason) {\n          this.logger.log('terminating subscription with reason '+ sub_state.reason);\n          switch (sub_state.reason) {\n            case 'deactivated':\n            case 'timeout':\n              this.subscribe();\n              return;\n            case 'probation':\n            case 'giveup':\n              if(sub_state.params && sub_state.params['retry-after']) {\n                this.timers.sub_duration = SIP.Timers.setTimeout(sub.subscribe.bind(sub), sub_state.params['retry-after']);\n              } else {\n                this.subscribe();\n              }\n              return;\n            case 'rejected':\n            case 'noresource':\n            case 'invariant':\n              break;\n          }\n        }\n        this.close();\n        break;\n    }\n  },\n\n  failed: function(response, cause) {\n    this.close();\n    return this.emit('failed', response, cause);\n  },\n\n  /**\n  * @private\n  */\n  matchEvent: function(request) {\n    var event;\n\n    // Check mandatory header Event\n    if (!request.hasHeader('Event')) {\n      this.logger.warn('missing Event header');\n      return false;\n    }\n    // Check mandatory header Subscription-State\n    if (!request.hasHeader('Subscription-State')) {\n      this.logger.warn('missing Subscription-State header');\n      return false;\n    }\n\n    // Check whether the event in NOTIFY matches the event in SUBSCRIBE\n    event = request.parseHeader('event').event;\n\n    if (this.event !== event) {\n      this.logger.warn('event match failed');\n      request.reply(481, 'Event Match Failed');\n      return false;\n    } else {\n      return true;\n    }\n  }\n};\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/sip.js/src/Subscription.js\n ** module id = 26\n ** module chunks = 0\n **/","/**\n * @fileoverview MediaHandler\n */\n\n/* MediaHandler\n * @class PeerConnection helper Class.\n * @param {SIP.Session} session\n * @param {Object} [options]\n * @param {SIP.WebRTC.MediaStreamManager} [options.mediaStreamManager]\n *        The MediaStreamManager to acquire/release streams from/to.\n *        If not provided, a default MediaStreamManager will be used.\n */\nmodule.exports = function (SIP) {\n\nvar MediaHandler = function(session, options) {\n  var events = [\n    'userMediaRequest',\n    'userMedia',\n    'userMediaFailed',\n    'iceGathering',\n    'iceCandidate',\n    'iceComplete',\n    'iceFailed',\n    'getDescription',\n    'setDescription',\n    'dataChannel',\n    'addStream'\n  ];\n  options = options || {};\n\n  this.logger = session.ua.getLogger('sip.invitecontext.mediahandler', session.id);\n  this.session = session;\n  this.localMedia = null;\n  this.ready = true;\n  this.mediaStreamManager = options.mediaStreamManager || new SIP.WebRTC.MediaStreamManager(this.logger);\n  this.audioMuted = false;\n  this.videoMuted = false;\n\n  // old init() from here on\n  var idx, length, server,\n    self = this,\n    servers = [],\n    stunServers = options.stunServers || null,\n    turnServers = options.turnServers || null,\n    config = this.session.ua.configuration;\n  this.RTCConstraints = options.RTCConstraints || {};\n\n  if (!stunServers) {\n    stunServers = config.stunServers;\n  }\n\n  if(!turnServers) {\n    turnServers = config.turnServers;\n  }\n\n  /* Change 'url' to 'urls' whenever this issue is solved:\n   * https://code.google.com/p/webrtc/issues/detail?id=2096\n   */\n  [].concat(stunServers).forEach(function (server) {\n    servers.push({'url': server});\n  });\n\n  length = turnServers.length;\n  for (idx = 0; idx < length; idx++) {\n    server = turnServers[idx];\n    servers.push({\n      'url': server.urls,\n      'username': server.username,\n      'credential': server.password\n    });\n  }\n\n  this.peerConnection = new SIP.WebRTC.RTCPeerConnection({'iceServers': servers}, this.RTCConstraints);\n\n  this.peerConnection.onaddstream = function(e) {\n    self.logger.log('stream added: '+ e.stream.id);\n    self.render();\n    self.emit('addStream', e);\n  };\n\n  this.peerConnection.onremovestream = function(e) {\n    self.logger.log('stream removed: '+ e.stream.id);\n  };\n\n  this.peerConnection.onicecandidate = function(e) {\n    self.emit('iceCandidate', e);\n    if (e.candidate) {\n      self.logger.log('ICE candidate received: '+ (e.candidate.candidate === null ? null : e.candidate.candidate.trim()));\n    } else if (self.onIceCompleted !== undefined) {\n      self.onIceCompleted(this);\n    } else {\n      self.callOnIceCompleted = true;\n    }\n  };\n\n  this.peerConnection.onicegatheringstatechange = function () {\n    self.logger.log('RTCIceGatheringState changed: ' + this.iceGatheringState);\n    if (this.iceGatheringState === 'gathering') {\n      self.emit('iceGathering', this);\n    }\n    if (this.iceGatheringState === 'complete') {\n      if (self.onIceCompleted !== undefined) {\n        self.onIceCompleted(this);\n      } else {\n        self.callOnIceCompleted = true;\n      }\n    }\n  };\n\n  this.peerConnection.oniceconnectionstatechange = function() {  //need e for commented out case\n    self.logger.log('ICE connection state changed to \"'+ this.iceConnectionState +'\"');\n\n    if (this.iceConnectionState === 'failed') {\n      self.emit('iceFailed', this);\n    }\n\n    //Bria state changes are always connected -> disconnected -> connected on accept, so session gets terminated\n    //normal calls switch from failed to connected in some cases, so checking for failed and terminated\n    /*if (this.iceConnectionState === 'failed') {\n      self.session.terminate({\n        cause: SIP.C.causes.RTP_TIMEOUT,\n        status_code: 200,\n        reason_phrase: SIP.C.causes.RTP_TIMEOUT\n      });\n    } else if (e.currentTarget.iceGatheringState === 'complete' && this.iceConnectionState !== 'closed') {\n      self.onIceCompleted(this);\n    }*/\n  };\n\n  this.peerConnection.onstatechange = function() {\n    self.logger.log('PeerConnection state changed to \"'+ this.readyState +'\"');\n  };\n\n  this.initEvents(events);\n\n  function selfEmit(mh, event) {\n    if (mh.mediaStreamManager.on &&\n        mh.mediaStreamManager.checkEvent &&\n        mh.mediaStreamManager.checkEvent(event)) {\n      mh.mediaStreamManager.on(event, function () {\n        mh.emit.apply(mh, [event].concat(Array.prototype.slice.call(arguments)));\n      });\n    }\n  }\n\n  selfEmit(this, 'userMediaRequest');\n  selfEmit(this, 'userMedia');\n  selfEmit(this, 'userMediaFailed');\n};\n\nMediaHandler.defaultFactory = function defaultFactory (session, options) {\n  return new MediaHandler(session, options);\n};\nMediaHandler.defaultFactory.isSupported = function () {\n  return SIP.WebRTC.isSupported();\n};\n\nMediaHandler.prototype = Object.create(SIP.MediaHandler.prototype, {\n// Functions the session can use\n  isReady: {writable: true, value: function isReady () {\n    return this.ready;\n  }},\n\n  close: {writable: true, value: function close () {\n    this.logger.log('closing PeerConnection');\n    // have to check signalingState since this.close() gets called multiple times\n    // TODO figure out why that happens\n    if(this.peerConnection && this.peerConnection.signalingState !== 'closed') {\n      this.peerConnection.close();\n\n      if(this.localMedia) {\n        this.mediaStreamManager.release(this.localMedia);\n      }\n    }\n  }},\n\n  /**\n   * @param {Function} onSuccess\n   * @param {Function} onFailure\n   * @param {SIP.WebRTC.MediaStream | (getUserMedia constraints)} [mediaHint]\n   *        the MediaStream (or the constraints describing it) to be used for the session\n   */\n  getDescription: {writable: true, value: function getDescription (onSuccess, onFailure, mediaHint) {\n    var self = this;\n    mediaHint = mediaHint || {};\n    if (mediaHint.dataChannel === true) {\n      mediaHint.dataChannel = {};\n    }\n    this.mediaHint = mediaHint;\n\n    /*\n     * 1. acquire stream (skip if MediaStream passed in)\n     * 2. addStream\n     * 3. createOffer/createAnswer\n     * 4. call onSuccess()\n     */\n\n    /* Last functions first, to quiet JSLint */\n    function streamAdditionSucceeded() {\n      if (self.hasOffer('remote')) {\n        self.peerConnection.ondatachannel = function (evt) {\n          self.dataChannel = evt.channel;\n          self.emit('dataChannel', self.dataChannel);\n        };\n      } else if (mediaHint.dataChannel &&\n                 self.peerConnection.createDataChannel) {\n        self.dataChannel = self.peerConnection.createDataChannel(\n          'sipjs',\n          mediaHint.dataChannel\n        );\n        self.emit('dataChannel', self.dataChannel);\n      }\n\n      self.render();\n      self.createOfferOrAnswer(onSuccess, onFailure, self.RTCConstraints);\n    }\n\n    function acquireSucceeded(stream) {\n      self.logger.log('acquired local media stream');\n      self.localMedia = stream;\n      self.session.connecting();\n      self.addStream(\n        stream,\n        streamAdditionSucceeded,\n        onFailure\n      );\n    }\n\n    if (self.localMedia) {\n      self.logger.log('already have local media');\n      streamAdditionSucceeded();\n      return;\n    }\n\n    self.logger.log('acquiring local media');\n    self.mediaStreamManager.acquire(\n      acquireSucceeded,\n      function acquireFailed(err) {\n        self.logger.error('unable to acquire stream');\n        self.logger.error(err);\n        self.session.connecting();\n        onFailure(err);\n      },\n      mediaHint\n    );\n  }},\n\n  /**\n  * Message reception.\n  * @param {String} type\n  * @param {String} sdp\n  * @param {Function} onSuccess\n  * @param {Function} onFailure\n  */\n  setDescription: {writable: true, value: function setDescription (sdp, onSuccess, onFailure) {\n    var rawDescription = {\n      type: this.hasOffer('local') ? 'answer' : 'offer',\n      sdp: sdp\n    };\n\n    this.emit('setDescription', rawDescription);\n\n    var description = new SIP.WebRTC.RTCSessionDescription(rawDescription);\n    this.peerConnection.setRemoteDescription(description, onSuccess, onFailure);\n  }},\n\n// Functions the session can use, but only because it's convenient for the application\n  isMuted: {writable: true, value: function isMuted () {\n    return {\n      audio: this.audioMuted,\n      video: this.videoMuted\n    };\n  }},\n\n  mute: {writable: true, value: function mute (options) {\n    if (this.getLocalStreams().length === 0) {\n      return;\n    }\n\n    options = options || {\n      audio: this.getLocalStreams()[0].getAudioTracks().length > 0,\n      video: this.getLocalStreams()[0].getVideoTracks().length > 0\n    };\n\n    var audioMuted = false,\n        videoMuted = false;\n\n    if (options.audio && !this.audioMuted) {\n      audioMuted = true;\n      this.audioMuted = true;\n      this.toggleMuteAudio(true);\n    }\n\n    if (options.video && !this.videoMuted) {\n      videoMuted = true;\n      this.videoMuted = true;\n      this.toggleMuteVideo(true);\n    }\n\n    //REVISIT\n    if (audioMuted || videoMuted) {\n      return {\n        audio: audioMuted,\n        video: videoMuted\n      };\n      /*this.session.onmute({\n        audio: audioMuted,\n        video: videoMuted\n      });*/\n    }\n  }},\n\n  unmute: {writable: true, value: function unmute (options) {\n    if (this.getLocalStreams().length === 0) {\n      return;\n    }\n\n    options = options || {\n      audio: this.getLocalStreams()[0].getAudioTracks().length > 0,\n      video: this.getLocalStreams()[0].getVideoTracks().length > 0\n    };\n\n    var audioUnMuted = false,\n        videoUnMuted = false;\n\n    if (options.audio && this.audioMuted) {\n      audioUnMuted = true;\n      this.audioMuted = false;\n      this.toggleMuteAudio(false);\n    }\n\n    if (options.video && this.videoMuted) {\n      videoUnMuted = true;\n      this.videoMuted = false;\n      this.toggleMuteVideo(false);\n    }\n\n    //REVISIT\n    if (audioUnMuted || videoUnMuted) {\n      return {\n        audio: audioUnMuted,\n        video: videoUnMuted\n      };\n      /*this.session.onunmute({\n        audio: audioUnMuted,\n        video: videoUnMuted\n      });*/\n    }\n  }},\n\n  hold: {writable: true, value: function hold () {\n    this.toggleMuteAudio(true);\n    this.toggleMuteVideo(true);\n  }},\n\n  unhold: {writable: true, value: function unhold () {\n    if (!this.audioMuted) {\n      this.toggleMuteAudio(false);\n    }\n\n    if (!this.videoMuted) {\n      this.toggleMuteVideo(false);\n    }\n  }},\n\n// Functions the application can use, but not the session\n  getLocalStreams: {writable: true, value: function getLocalStreams () {\n    var pc = this.peerConnection;\n    if (pc && pc.signalingState === 'closed') {\n      this.logger.warn('peerConnection is closed, getLocalStreams returning []');\n      return [];\n    }\n    return (pc.getLocalStreams && pc.getLocalStreams()) ||\n      pc.localStreams || [];\n  }},\n\n  getRemoteStreams: {writable: true, value: function getRemoteStreams () {\n    var pc = this.peerConnection;\n    if (pc && pc.signalingState === 'closed') {\n      this.logger.warn('peerConnection is closed, getRemoteStreams returning []');\n      return [];\n    }\n    return(pc.getRemoteStreams && pc.getRemoteStreams()) ||\n      pc.remoteStreams || [];\n  }},\n\n  render: {writable: true, value: function render (renderHint) {\n    renderHint = renderHint || (this.mediaHint && this.mediaHint.render);\n    if (!renderHint) {\n      return false;\n    }\n    var streamGetters = {\n      local: 'getLocalStreams',\n      remote: 'getRemoteStreams'\n    };\n    Object.keys(streamGetters).forEach(function (loc) {\n      var streamGetter = streamGetters[loc];\n      var streams = this[streamGetter]();\n      if (streams.length) {\n        SIP.WebRTC.MediaStreamManager.render(streams[0], renderHint[loc]);\n      }\n    }.bind(this));\n  }},\n\n// Internal functions\n  hasOffer: {writable: true, value: function hasOffer (where) {\n    var offerState = 'have-' + where + '-offer';\n    return this.peerConnection.signalingState === offerState;\n    // TODO consider signalingStates with 'pranswer'?\n  }},\n\n  createOfferOrAnswer: {writable: true, value: function createOfferOrAnswer (onSuccess, onFailure, constraints) {\n    var self = this;\n    var methodName;\n\n    function readySuccess () {\n      var sdp = self.peerConnection.localDescription.sdp;\n\n      sdp = SIP.Hacks.Chrome.needsExplicitlyInactiveSDP(sdp);\n      sdp = SIP.Hacks.AllBrowsers.unmaskDtls(sdp);\n      sdp = SIP.Hacks.Firefox.hasIncompatibleCLineWithSomeSIPEndpoints(sdp);\n\n      var sdpWrapper = {\n        type: methodName === 'createOffer' ? 'offer' : 'answer',\n        sdp: sdp\n      };\n\n      self.emit('getDescription', sdpWrapper);\n\n      self.ready = true;\n      onSuccess(sdpWrapper.sdp);\n    }\n\n    function onSetLocalDescriptionSuccess() {\n      if (self.peerConnection.iceGatheringState === 'complete' && (self.peerConnection.iceConnectionState === 'connected' || self.peerConnection.iceConnectionState === 'completed')) {\n        readySuccess();\n      } else {\n        self.onIceCompleted = function(pc) {\n          self.logger.log('ICE Gathering Completed');\n          self.onIceCompleted = undefined;\n          self.emit('iceComplete', pc);\n          readySuccess();\n        };\n        if (self.callOnIceCompleted) {\n          self.onIceCompleted();\n        }\n      }\n    }\n\n    function methodFailed (methodName, e) {\n      self.logger.error('peerConnection.' + methodName + ' failed');\n      self.logger.error(e);\n      self.ready = true;\n      onFailure(e);\n    }\n\n    self.ready = false;\n\n    methodName = self.hasOffer('remote') ? 'createAnswer' : 'createOffer';\n\n    self.peerConnection[methodName](\n      function(sessionDescription){\n        self.peerConnection.setLocalDescription(\n          sessionDescription,\n          onSetLocalDescriptionSuccess,\n          methodFailed.bind(null, 'setLocalDescription')\n        );\n      },\n      methodFailed.bind(null, methodName),\n      constraints\n    );\n  }},\n\n  addStream: {writable: true, value: function addStream (stream, onSuccess, onFailure) {\n    try {\n      this.peerConnection.addStream(stream);\n    } catch(e) {\n      this.logger.error('error adding stream');\n      this.logger.error(e);\n      onFailure(e);\n      return;\n    }\n\n    onSuccess();\n  }},\n\n  toggleMuteHelper: {writable: true, value: function toggleMuteHelper (trackGetter, mute) {\n    this.getLocalStreams().forEach(function (stream) {\n      stream[trackGetter]().forEach(function (track) {\n        track.enabled = !mute;\n      });\n    });\n  }},\n\n  toggleMuteAudio: {writable: true, value: function toggleMuteAudio (mute) {\n    this.toggleMuteHelper('getAudioTracks', mute);\n  }},\n\n  toggleMuteVideo: {writable: true, value: function toggleMuteVideo (mute) {\n    this.toggleMuteHelper('getVideoTracks', mute);\n  }}\n});\n\n// Return since it will be assigned to a variable.\nreturn MediaHandler;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/sip.js/src/WebRTC/MediaHandler.js\n ** module id = 27\n ** module chunks = 0\n **/","/**\n * @fileoverview MediaStreamManager\n */\n\n/* MediaStreamManager\n * @class Manages the acquisition and release of MediaStreams.\n * @param {mediaHint} [defaultMediaHint] The mediaHint to use if none is provided to acquire()\n */\nmodule.exports = function (SIP) {\n\n// Default MediaStreamManager provides single-use streams created with getUserMedia\nvar MediaStreamManager = function MediaStreamManager (logger, defaultMediaHint) {\n  if (!SIP.WebRTC.isSupported()) {\n    throw new SIP.Exceptions.NotSupportedError('Media not supported');\n  }\n\n  var events = [\n    'userMediaRequest',\n    'userMedia',\n    'userMediaFailed'\n  ];\n  this.mediaHint = defaultMediaHint || {\n    constraints: {audio: true, video: true}\n  };\n\n  this.logger = logger;\n  this.initEvents(events);\n\n  // map of streams to acquisition manner:\n  // true -> passed in as mediaHint.stream\n  // false -> getUserMedia\n  this.acquisitions = {};\n};\nMediaStreamManager.streamId = function (stream) {\n  return stream.getAudioTracks().concat(stream.getVideoTracks())\n    .map(function trackId (track) {\n      return track.id;\n    })\n    .join('');\n};\n\nMediaStreamManager.render = function render (stream, elements) {\n  if (!elements) {\n    return false;\n  }\n\n  function attachAndPlay (element, stream) {\n    (window.attachMediaStream || attachMediaStream)(element, stream);\n    ensureMediaPlaying(element);\n  }\n\n  function attachMediaStream(element, stream) {\n    if (typeof element.src !== 'undefined') {\n      URL.revokeObjectURL(element.src);\n      element.src = URL.createObjectURL(stream);\n    } else if (typeof (element.srcObject || element.mozSrcObject) !== 'undefined') {\n      element.srcObject = element.mozSrcObject = stream;\n    } else {\n      return false;\n    }\n\n    return true;\n  }\n\n  function ensureMediaPlaying (mediaElement) {\n    var interval = 100;\n    mediaElement.ensurePlayingIntervalId = SIP.Timers.setInterval(function () {\n      if (mediaElement.paused) {\n        mediaElement.play();\n      }\n      else {\n        SIP.Timers.clearInterval(mediaElement.ensurePlayingIntervalId);\n      }\n    }, interval);\n  }\n\n  if (elements.video) {\n    if (elements.audio) {\n      elements.video.volume = 0;\n    }\n    attachAndPlay(elements.video, stream);\n  }\n  if (elements.audio) {\n    attachAndPlay(elements.audio, stream);\n  }\n};\n\nMediaStreamManager.prototype = Object.create(SIP.EventEmitter.prototype, {\n  'acquire': {value: function acquire (onSuccess, onFailure, mediaHint) {\n    mediaHint = Object.keys(mediaHint || {}).length ? mediaHint : this.mediaHint;\n\n    var saveSuccess = function (onSuccess, stream, isHintStream) {\n      var streamId = MediaStreamManager.streamId(stream);\n      this.acquisitions[streamId] = !!isHintStream;\n      onSuccess(stream);\n    }.bind(this, onSuccess);\n\n    if (mediaHint.stream) {\n      saveSuccess(mediaHint.stream, true);\n    } else {\n      // Fallback to audio/video enabled if no mediaHint can be found.\n      var constraints = mediaHint.constraints ||\n        (this.mediaHint && this.mediaHint.constraints) ||\n        {audio: true, video: true};\n\n      /*\n       * Make the call asynchronous, so that ICCs have a chance\n       * to define callbacks to `userMediaRequest`\n       */\n      SIP.Timers.setTimeout(function () {\n        this.emit('userMediaRequest', constraints);\n\n        var emitThenCall = function (eventName, callback) {\n          var callbackArgs = Array.prototype.slice.call(arguments, 2);\n          // Emit with all of the arguments from the real callback.\n          var newArgs = [eventName].concat(callbackArgs);\n\n          this.emit.apply(this, newArgs);\n\n          callback.apply(null, callbackArgs);\n        }.bind(this);\n\n        SIP.WebRTC.getUserMedia(\n          constraints,\n          emitThenCall.bind(this, 'userMedia', saveSuccess),\n          emitThenCall.bind(this, 'userMediaFailed', onFailure)\n        );\n      }.bind(this), 0);\n    }\n  }},\n\n  'release': {value: function release (stream) {\n    var streamId = MediaStreamManager.streamId(stream);\n    if (this.acquisitions[streamId] === false) {\n      stream.stop();\n    }\n    delete this.acquisitions[streamId];\n  }},\n});\n\n// Return since it will be assigned to a variable.\nreturn MediaStreamManager;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/sip.js/src/WebRTC/MediaStreamManager.js\n ** module id = 28\n ** module chunks = 0\n **/","/**\n * @fileoverview WebRTC\n */\n\nmodule.exports = function (Utils, window, MediaHandler, MediaStreamManager) {\nvar WebRTC;\n\nWebRTC = {};\n\nWebRTC.MediaHandler = MediaHandler;\nWebRTC.MediaStreamManager = MediaStreamManager;\n\nvar _isSupported;\n\nWebRTC.isSupported = function () {\n  if (_isSupported !== undefined) {\n    return _isSupported;\n  }\n\n  WebRTC.MediaStream = Utils.getPrefixedProperty(window, 'MediaStream');\n  WebRTC.getUserMedia = Utils.getPrefixedProperty(window.navigator, 'getUserMedia');\n  WebRTC.RTCPeerConnection = Utils.getPrefixedProperty(window, 'RTCPeerConnection');\n  WebRTC.RTCSessionDescription = Utils.getPrefixedProperty(window, 'RTCSessionDescription');\n\n  if (WebRTC.getUserMedia && WebRTC.RTCPeerConnection && WebRTC.RTCSessionDescription) {\n    WebRTC.getUserMedia = WebRTC.getUserMedia.bind(window.navigator);\n    _isSupported = true;\n  }\n  else {\n    _isSupported = false;\n  }\n  return _isSupported;\n};\n\nreturn WebRTC;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/sip.js/src/WebRTC.js\n ** module id = 29\n ** module chunks = 0\n **/","/**\n * @augments SIP\n * @class Class creating a SIP User Agent.\n * @param {function returning SIP.MediaHandler} [configuration.mediaHandlerFactory]\n *        A function will be invoked by each of the UA's Sessions to build the MediaHandler for that Session.\n *        If no (or a falsy) value is provided, each Session will use a default (WebRTC) MediaHandler.\n *\n * @param {Object} [configuration.media] gets passed to SIP.MediaHandler.getDescription as mediaHint\n */\nmodule.exports = function (SIP) {\nvar UA,\n  C = {\n    // UA status codes\n    STATUS_INIT :                0,\n    STATUS_READY:                1,\n    STATUS_USER_CLOSED:          2,\n    STATUS_NOT_READY:            3,\n\n    // UA error codes\n    CONFIGURATION_ERROR:  1,\n    NETWORK_ERROR:        2,\n\n    /* UA events and corresponding SIP Methods.\n     * Dynamically added to 'Allow' header field if the\n     * corresponding event handler is set.\n     */\n    EVENT_METHODS: {\n      'invite': 'INVITE',\n      'message': 'MESSAGE'\n    },\n\n    ALLOWED_METHODS: [\n      'ACK',\n      'CANCEL',\n      'BYE',\n      'OPTIONS',\n      'INFO',\n      'NOTIFY'\n    ],\n\n    ACCEPTED_BODY_TYPES: [\n      'application/sdp',\n      'application/dtmf-relay'\n    ],\n\n    MAX_FORWARDS: 70,\n    TAG_LENGTH: 10\n  };\n\nUA = function(configuration) {\n  var self = this,\n  events = [\n    'connecting',\n    'connected',\n    'disconnected',\n    'newTransaction',\n    'transactionDestroyed',\n    'registered',\n    'unregistered',\n    'registrationFailed',\n    'invite',\n    'newSession',\n    'message'\n  ], i, len;\n\n  // Helper function for forwarding events\n  function selfEmit(type) {\n    //registrationFailed handler is invoked with two arguments. Allow event handlers to be invoked with a variable no. of arguments\n    return self.emit.bind(self, type);\n  }\n\n  for (i = 0, len = C.ALLOWED_METHODS.length; i < len; i++) {\n    events.push(C.ALLOWED_METHODS[i].toLowerCase());\n  }\n\n  // Set Accepted Body Types\n  C.ACCEPTED_BODY_TYPES = C.ACCEPTED_BODY_TYPES.toString();\n\n  this.log = new SIP.LoggerFactory();\n  this.logger = this.getLogger('sip.ua');\n\n  this.cache = {\n    credentials: {}\n  };\n\n  this.configuration = {};\n  this.dialogs = {};\n\n  //User actions outside any session/dialog (MESSAGE)\n  this.applicants = {};\n\n  this.data = {};\n  this.sessions = {};\n  this.subscriptions = {};\n  this.transport = null;\n  this.contact = null;\n  this.status = C.STATUS_INIT;\n  this.error = null;\n  this.transactions = {\n    nist: {},\n    nict: {},\n    ist: {},\n    ict: {}\n  };\n\n  this.transportRecoverAttempts = 0;\n  this.transportRecoveryTimer = null;\n\n  Object.defineProperties(this, {\n    transactionsCount: {\n      get: function() {\n        var type,\n          transactions = ['nist','nict','ist','ict'],\n          count = 0;\n\n        for (type in transactions) {\n          count += Object.keys(this.transactions[transactions[type]]).length;\n        }\n\n        return count;\n      }\n    },\n\n    nictTransactionsCount: {\n      get: function() {\n        return Object.keys(this.transactions['nict']).length;\n      }\n    },\n\n    nistTransactionsCount: {\n      get: function() {\n        return Object.keys(this.transactions['nist']).length;\n      }\n    },\n\n    ictTransactionsCount: {\n      get: function() {\n        return Object.keys(this.transactions['ict']).length;\n      }\n    },\n\n    istTransactionsCount: {\n      get: function() {\n        return Object.keys(this.transactions['ist']).length;\n      }\n    }\n  });\n\n  /**\n   * Load configuration\n   *\n   * @throws {SIP.Exceptions.ConfigurationError}\n   * @throws {TypeError}\n   */\n\n  if(configuration === undefined) {\n    configuration = {};\n  } else if (typeof configuration === 'string' || configuration instanceof String) {\n    configuration = {\n      uri: configuration\n    };\n  }\n\n  // Apply log configuration if present\n  if (configuration.log) {\n    if (configuration.log.hasOwnProperty('builtinEnabled')) {\n      this.log.builtinEnabled = configuration.log.builtinEnabled;\n    }\n\n    if (configuration.log.hasOwnProperty('level')) {\n      this.log.level = configuration.log.level;\n    }\n\n    if (configuration.log.hasOwnProperty('connector')) {\n      this.log.connector = configuration.log.connector;\n    }\n  }\n\n  try {\n    this.loadConfig(configuration);\n    this.initEvents(events);\n  } catch(e) {\n    this.status = C.STATUS_NOT_READY;\n    this.error = C.CONFIGURATION_ERROR;\n    throw e;\n  }\n\n  // Initialize registerContext\n  this.registerContext = new SIP.RegisterContext(this);\n  this.registerContext.on('failed', selfEmit('registrationFailed'));\n  this.registerContext.on('registered', selfEmit('registered'));\n  this.registerContext.on('unregistered', selfEmit('unregistered'));\n\n  if(this.configuration.autostart) {\n    this.start();\n  }\n\n  if (typeof global.addEventListener === 'function') {\n    global.addEventListener('unload', this.stop.bind(this));\n  }\n};\nUA.prototype = new SIP.EventEmitter();\n\n//=================\n//  High Level API\n//=================\n\nUA.prototype.register = function(options) {\n  this.configuration.register = true;\n  this.registerContext.register(options);\n\n  return this;\n};\n\n/**\n * Unregister.\n *\n * @param {Boolean} [all] unregister all user bindings.\n *\n */\nUA.prototype.unregister = function(options) {\n  this.configuration.register = false;\n  this.registerContext.unregister(options);\n\n  return this;\n};\n\nUA.prototype.isRegistered = function() {\n  return this.registerContext.registered;\n};\n\n/**\n * Connection state.\n * @param {Boolean}\n */\nUA.prototype.isConnected = function() {\n  return this.transport ? this.transport.connected : false;\n};\n\n/**\n * Make an outgoing call.\n *\n * @param {String} target\n * @param {Object} views\n * @param {Object} [options.media] gets passed to SIP.MediaHandler.getDescription as mediaHint\n *\n * @throws {TypeError}\n *\n */\nUA.prototype.invite = function(target, options) {\n  options = options || {};\n  options = SIP.Utils.desugarSessionOptions(options);\n  SIP.Utils.optionsOverride(options, 'media', 'mediaConstraints', true, this.logger);\n\n  var context = new SIP.InviteClientContext(this, target, options);\n\n  if (this.isConnected()) {\n    context.invite({media: options.media});\n  } else {\n    this.once('connected', function() {\n      context.invite({media: options.media});\n    });\n  }\n  return context;\n};\n\nUA.prototype.subscribe = function(target, event, options) {\n  var sub = new SIP.Subscription(this, target, event, options);\n\n  if (this.isConnected()) {\n    sub.subscribe();\n  } else {\n    this.once('connected', function() {\n      sub.subscribe();\n    });\n  }\n  return sub;\n};\n\n/**\n * Send a message.\n *\n * @param {String} target\n * @param {String} body\n * @param {Object} [options]\n *\n * @throws {TypeError}\n *\n */\nUA.prototype.message = function(target, body, options) {\n  if (body === undefined) {\n    throw new TypeError('Not enough arguments');\n  }\n\n  options = options || {};\n  options.contentType = options.contentType || 'text/plain';\n  options.body = body;\n\n  var mes = new SIP.ClientContext(this, SIP.C.MESSAGE, target, options);\n\n  if (this.isConnected()) {\n    mes.send();\n  } else {\n    this.once('connected', function() {\n      mes.send();\n    });\n  }\n\n  return mes;\n};\n\nUA.prototype.request = function (method, target, options) {\n  var req = new SIP.ClientContext(this, method, target, options);\n\n  if (this.isConnected()) {\n    req.send();\n  } else {\n    this.once('connected', function() {\n      req.send();\n    });\n  }\n\n  return req;\n};\n\n/**\n * Gracefully close.\n *\n */\nUA.prototype.stop = function() {\n  var session, subscription, applicant,\n    ua = this;\n\n  function transactionsListener() {\n    if (ua.nistTransactionsCount === 0 && ua.nictTransactionsCount === 0) {\n        ua.off('transactionDestroyed', transactionsListener);\n        ua.transport.disconnect();\n    }\n  }\n\n  this.logger.log('user requested closure...');\n\n  if(this.status === C.STATUS_USER_CLOSED) {\n    this.logger.warn('UA already closed');\n    return this;\n  }\n\n  // Clear transportRecoveryTimer\n  SIP.Timers.clearTimeout(this.transportRecoveryTimer);\n\n  // Close registerContext\n  this.logger.log('closing registerContext');\n  this.registerContext.close();\n\n  // Run  _terminate_ on every Session\n  for(session in this.sessions) {\n    this.logger.log('closing session ' + session);\n    this.sessions[session].terminate();\n  }\n\n  //Run _close_ on every Subscription\n  for(subscription in this.subscriptions) {\n    this.logger.log('unsubscribing from subscription ' + subscription);\n    this.subscriptions[subscription].close();\n  }\n\n  // Run  _close_ on every applicant\n  for(applicant in this.applicants) {\n    this.applicants[applicant].close();\n  }\n\n  this.status = C.STATUS_USER_CLOSED;\n\n  /*\n   * If the remaining transactions are all INVITE transactions, there is no need to\n   * wait anymore because every session has already been closed by this method.\n   * - locally originated sessions where terminated (CANCEL or BYE)\n   * - remotely originated sessions where rejected (4XX) or terminated (BYE)\n   * Remaining INVITE transactions belong tho sessions that where answered. This are in\n   * 'accepted' state due to timers 'L' and 'M' defined in [RFC 6026]\n   */\n  if (this.nistTransactionsCount === 0 && this.nictTransactionsCount === 0) {\n    this.transport.disconnect();\n  } else {\n    this.on('transactionDestroyed', transactionsListener);\n  }\n\n  return this;\n};\n\n/**\n * Connect to the WS server if status = STATUS_INIT.\n * Resume UA after being closed.\n *\n */\nUA.prototype.start = function() {\n  var server;\n\n  this.logger.log('user requested startup...');\n  if (this.status === C.STATUS_INIT) {\n    server = this.getNextWsServer();\n    new SIP.Transport(this, server);\n  } else if(this.status === C.STATUS_USER_CLOSED) {\n    this.logger.log('resuming');\n    this.status = C.STATUS_READY;\n    this.transport.connect();\n  } else if (this.status === C.STATUS_READY) {\n    this.logger.log('UA is in READY status, not resuming');\n  } else {\n    this.logger.error('Connection is down. Auto-Recovery system is trying to connect');\n  }\n\n  return this;\n};\n\n/**\n * Normalize a string into a valid SIP request URI\n *\n * @param {String} target\n *\n * @returns {SIP.URI|undefined}\n */\nUA.prototype.normalizeTarget = function(target) {\n  return SIP.Utils.normalizeTarget(target, this.configuration.hostportParams);\n};\n\n\n//===============================\n//  Private (For internal use)\n//===============================\n\nUA.prototype.saveCredentials = function(credentials) {\n  this.cache.credentials[credentials.realm] = this.cache.credentials[credentials.realm] || {};\n  this.cache.credentials[credentials.realm][credentials.uri] = credentials;\n\n  return this;\n};\n\nUA.prototype.getCredentials = function(request) {\n  var realm, credentials;\n\n  realm = request.ruri.host;\n\n  if (this.cache.credentials[realm] && this.cache.credentials[realm][request.ruri]) {\n    credentials = this.cache.credentials[realm][request.ruri];\n    credentials.method = request.method;\n  }\n\n  return credentials;\n};\n\nUA.prototype.getLogger = function(category, label) {\n  return this.log.getLogger(category, label);\n};\n\n\n//==============================\n// Event Handlers\n//==============================\n\n/**\n * Transport Close event\n * @private\n * @event\n * @param {SIP.Transport} transport.\n */\nUA.prototype.onTransportClosed = function(transport) {\n  // Run _onTransportError_ callback on every client transaction using _transport_\n  var type, idx, length,\n    client_transactions = ['nict', 'ict', 'nist', 'ist'];\n\n  transport.server.status = SIP.Transport.C.STATUS_DISCONNECTED;\n  this.logger.log('connection state set to '+ SIP.Transport.C.STATUS_DISCONNECTED);\n\n  length = client_transactions.length;\n  for (type = 0; type < length; type++) {\n    for(idx in this.transactions[client_transactions[type]]) {\n      this.transactions[client_transactions[type]][idx].onTransportError();\n    }\n  }\n\n  // Close sessions if GRUU is not being used\n  if (!this.contact.pub_gruu) {\n    this.closeSessionsOnTransportError();\n  }\n\n};\n\n/**\n * Unrecoverable transport event.\n * Connection reattempt logic has been done and didn't success.\n * @private\n * @event\n * @param {SIP.Transport} transport.\n */\nUA.prototype.onTransportError = function(transport) {\n  var server;\n\n  this.logger.log('transport ' + transport.server.ws_uri + ' failed | connection state set to '+ SIP.Transport.C.STATUS_ERROR);\n\n  // Close sessions.\n  //Mark this transport as 'down'\n  transport.server.status = SIP.Transport.C.STATUS_ERROR;\n\n  this.emit('disconnected', {\n    transport: transport\n  });\n\n  // try the next transport if the UA isn't closed\n  if(this.status === C.STATUS_USER_CLOSED) {\n    return;\n  }\n\n  server = this.getNextWsServer();\n\n  if(server) {\n    new SIP.Transport(this, server);\n  }else {\n    this.closeSessionsOnTransportError();\n    if (!this.error || this.error !== C.NETWORK_ERROR) {\n      this.status = C.STATUS_NOT_READY;\n      this.error = C.NETWORK_ERROR;\n    }\n    // Transport Recovery process\n    this.recoverTransport();\n  }\n};\n\n/**\n * Transport connection event.\n * @private\n * @event\n * @param {SIP.Transport} transport.\n */\nUA.prototype.onTransportConnected = function(transport) {\n  this.transport = transport;\n\n  // Reset transport recovery counter\n  this.transportRecoverAttempts = 0;\n\n  transport.server.status = SIP.Transport.C.STATUS_READY;\n  this.logger.log('connection state set to '+ SIP.Transport.C.STATUS_READY);\n\n  if(this.status === C.STATUS_USER_CLOSED) {\n    return;\n  }\n\n  this.status = C.STATUS_READY;\n  this.error = null;\n\n  if(this.configuration.register) {\n    this.registerContext.onTransportConnected();\n  }\n\n  this.emit('connected', {\n    transport: transport\n  });\n};\n\n\n/**\n * Transport connecting event\n * @private\n * @param {SIP.Transport} transport.\n * #param {Integer} attempts.\n */\n  UA.prototype.onTransportConnecting = function(transport, attempts) {\n    this.emit('connecting', {\n      transport: transport,\n      attempts: attempts\n    });\n  };\n\n\n/**\n * new Transaction\n * @private\n * @param {SIP.Transaction} transaction.\n */\nUA.prototype.newTransaction = function(transaction) {\n  this.transactions[transaction.type][transaction.id] = transaction;\n  this.emit('newTransaction', {transaction: transaction});\n};\n\n\n/**\n * destroy Transaction\n * @private\n * @param {SIP.Transaction} transaction.\n */\nUA.prototype.destroyTransaction = function(transaction) {\n  delete this.transactions[transaction.type][transaction.id];\n  this.emit('transactionDestroyed', {\n    transaction: transaction\n  });\n};\n\n\n//=========================\n// receiveRequest\n//=========================\n\n/**\n * Request reception\n * @private\n * @param {SIP.IncomingRequest} request.\n */\nUA.prototype.receiveRequest = function(request) {\n  var dialog, session, message,\n    method = request.method,\n    transaction,\n    methodLower = request.method.toLowerCase(),\n    self = this;\n\n  function ruriMatches (uri) {\n    return uri && uri.user === request.ruri.user;\n  }\n\n  // Check that request URI points to us\n  if(!(ruriMatches(this.configuration.uri) ||\n       ruriMatches(this.contact.uri) ||\n       ruriMatches(this.contact.pub_gruu) ||\n       ruriMatches(this.contact.temp_gruu))) {\n    this.logger.warn('Request-URI does not point to us');\n    if (request.method !== SIP.C.ACK) {\n      request.reply_sl(404);\n    }\n    return;\n  }\n\n  // Check request URI scheme\n  if(request.ruri.scheme === SIP.C.SIPS) {\n    request.reply_sl(416);\n    return;\n  }\n\n  // Check transaction\n  if(SIP.Transactions.checkTransaction(this, request)) {\n    return;\n  }\n\n  /* RFC3261 12.2.2\n   * Requests that do not change in any way the state of a dialog may be\n   * received within a dialog (for example, an OPTIONS request).\n   * They are processed as if they had been received outside the dialog.\n   */\n  if(method === SIP.C.OPTIONS) {\n    new SIP.Transactions.NonInviteServerTransaction(request, this);\n    request.reply(200, null, [\n      'Allow: '+ SIP.Utils.getAllowedMethods(this),\n      'Accept: '+ C.ACCEPTED_BODY_TYPES\n    ]);\n  } else if (method === SIP.C.MESSAGE) {\n    if (!this.checkListener(methodLower)) {\n      // UA is not listening for this.  Reject immediately.\n      new SIP.Transactions.NonInviteServerTransaction(request, this);\n      request.reply(405, null, ['Allow: '+ SIP.Utils.getAllowedMethods(this)]);\n      return;\n    }\n    message = new SIP.ServerContext(this, request);\n    message.body = request.body;\n    message.content_type = request.getHeader('Content-Type') || 'text/plain';\n\n    request.reply(200, null);\n    this.emit('message', message);\n  } else if (method !== SIP.C.INVITE &&\n             method !== SIP.C.ACK) {\n    // Let those methods pass through to normal processing for now.\n    transaction = new SIP.ServerContext(this, request);\n  }\n\n  // Initial Request\n  if(!request.to_tag) {\n    switch(method) {\n      case SIP.C.INVITE:\n        var isMediaSupported = this.configuration.mediaHandlerFactory.isSupported;\n        if(!isMediaSupported || isMediaSupported()) {\n          session = new SIP.InviteServerContext(this, request)\n            .on('invite', function() {\n              self.emit('invite', this);\n            });\n        } else {\n          this.logger.warn('INVITE received but WebRTC is not supported');\n          request.reply(488);\n        }\n        break;\n      case SIP.C.BYE:\n        // Out of dialog BYE received\n        request.reply(481);\n        break;\n      case SIP.C.CANCEL:\n        session = this.findSession(request);\n        if(session) {\n          session.receiveRequest(request);\n        } else {\n          this.logger.warn('received CANCEL request for a non existent session');\n        }\n        break;\n      case SIP.C.ACK:\n        /* Absorb it.\n         * ACK request without a corresponding Invite Transaction\n         * and without To tag.\n         */\n        break;\n      default:\n        request.reply(405);\n        break;\n    }\n  }\n  // In-dialog request\n  else {\n    dialog = this.findDialog(request);\n\n    if(dialog) {\n      if (method === SIP.C.INVITE) {\n        new SIP.Transactions.InviteServerTransaction(request, this);\n      }\n      dialog.receiveRequest(request);\n    } else if (method === SIP.C.NOTIFY) {\n      session = this.findSession(request);\n      if(session) {\n        session.receiveRequest(request);\n      } else {\n        this.logger.warn('received NOTIFY request for a non existent session');\n        request.reply(481, 'Subscription does not exist');\n      }\n    }\n    /* RFC3261 12.2.2\n     * Request with to tag, but no matching dialog found.\n     * Exception: ACK for an Invite request for which a dialog has not\n     * been created.\n     */\n    else {\n      if(method !== SIP.C.ACK) {\n        request.reply(481);\n      }\n    }\n  }\n};\n\n//=================\n// Utils\n//=================\n\n/**\n * Get the session to which the request belongs to, if any.\n * @private\n * @param {SIP.IncomingRequest} request.\n * @returns {SIP.OutgoingSession|SIP.IncomingSession|null}\n */\nUA.prototype.findSession = function(request) {\n  return this.sessions[request.call_id + request.from_tag] ||\n          this.sessions[request.call_id + request.to_tag] ||\n          null;\n};\n\n/**\n * Get the dialog to which the request belongs to, if any.\n * @private\n * @param {SIP.IncomingRequest}\n * @returns {SIP.Dialog|null}\n */\nUA.prototype.findDialog = function(request) {\n  return this.dialogs[request.call_id + request.from_tag + request.to_tag] ||\n          this.dialogs[request.call_id + request.to_tag + request.from_tag] ||\n          null;\n};\n\n/**\n * Retrieve the next server to which connect.\n * @private\n * @returns {Object} ws_server\n */\nUA.prototype.getNextWsServer = function() {\n  // Order servers by weight\n  var idx, length, ws_server,\n    candidates = [];\n\n  length = this.configuration.wsServers.length;\n  for (idx = 0; idx < length; idx++) {\n    ws_server = this.configuration.wsServers[idx];\n\n    if (ws_server.status === SIP.Transport.C.STATUS_ERROR) {\n      continue;\n    } else if (candidates.length === 0) {\n      candidates.push(ws_server);\n    } else if (ws_server.weight > candidates[0].weight) {\n      candidates = [ws_server];\n    } else if (ws_server.weight === candidates[0].weight) {\n      candidates.push(ws_server);\n    }\n  }\n\n  idx = Math.floor(Math.random() * candidates.length);\n\n  return candidates[idx];\n};\n\n/**\n * Close all sessions on transport error.\n * @private\n */\nUA.prototype.closeSessionsOnTransportError = function() {\n  var idx;\n\n  // Run _transportError_ for every Session\n  for(idx in this.sessions) {\n    this.sessions[idx].onTransportError();\n  }\n  // Call registerContext _onTransportClosed_\n  this.registerContext.onTransportClosed();\n};\n\nUA.prototype.recoverTransport = function(ua) {\n  var idx, length, k, nextRetry, count, server;\n\n  ua = ua || this;\n  count = ua.transportRecoverAttempts;\n\n  length = ua.configuration.wsServers.length;\n  for (idx = 0; idx < length; idx++) {\n    ua.configuration.wsServers[idx].status = 0;\n  }\n\n  server = ua.getNextWsServer();\n\n  k = Math.floor((Math.random() * Math.pow(2,count)) +1);\n  nextRetry = k * ua.configuration.connectionRecoveryMinInterval;\n\n  if (nextRetry > ua.configuration.connectionRecoveryMaxInterval) {\n    this.logger.log('time for next connection attempt exceeds connectionRecoveryMaxInterval, resetting counter');\n    nextRetry = ua.configuration.connectionRecoveryMinInterval;\n    count = 0;\n  }\n\n  this.logger.log('next connection attempt in '+ nextRetry +' seconds');\n\n  this.transportRecoveryTimer = SIP.Timers.setTimeout(\n    function(){\n      ua.transportRecoverAttempts = count + 1;\n      new SIP.Transport(ua, server);\n    }, nextRetry * 1000);\n};\n\n/**\n * Configuration load.\n * @private\n * returns {Boolean}\n */\nUA.prototype.loadConfig = function(configuration) {\n  // Settings and default values\n  var parameter, value, checked_value, hostportParams, registrarServer,\n    settings = {\n      /* Host address\n      * Value to be set in Via sent_by and host part of Contact FQDN\n      */\n      viaHost: SIP.Utils.createRandomToken(12) + '.invalid',\n\n      uri: new SIP.URI('sip', 'anonymous.' + SIP.Utils.createRandomToken(6), 'anonymous.invalid', null, null),\n      wsServers: [{\n        scheme: 'WSS',\n        sip_uri: '<sip:edge.sip.onsip.com;transport=ws;lr>',\n        status: 0,\n        weight: 0,\n        ws_uri: 'wss://edge.sip.onsip.com'\n      }],\n\n      // Password\n      password: null,\n\n      // Registration parameters\n      registerExpires: 600,\n      register: true,\n      registrarServer: null,\n\n      // Transport related parameters\n      wsServerMaxReconnection: 3,\n      wsServerReconnectionTimeout: 4,\n\n      connectionRecoveryMinInterval: 2,\n      connectionRecoveryMaxInterval: 30,\n\n      usePreloadedRoute: false,\n\n      //string to be inserted into User-Agent request header\n      userAgentString: SIP.C.USER_AGENT,\n\n      // Session parameters\n      noAnswerTimeout: 60,\n      stunServers: ['stun:stun.l.google.com:19302'],\n      turnServers: [],\n\n      // Logging parameters\n      traceSip: false,\n\n      // Hacks\n      hackViaTcp: false,\n      hackIpInContact: false,\n      hackWssInTransport: false,\n\n      //autostarting\n      autostart: true,\n\n      //Reliable Provisional Responses\n      rel100: SIP.C.supported.UNSUPPORTED,\n\n      mediaHandlerFactory: SIP.WebRTC.MediaHandler.defaultFactory\n    };\n\n  // Pre-Configuration\n  function aliasUnderscored (parameter, logger) {\n    var underscored = parameter.replace(/([a-z][A-Z])/g, function (m) {\n      return m[0] + '_' + m[1].toLowerCase();\n    });\n\n    if (parameter === underscored) {\n      return;\n    }\n\n    var hasParameter = configuration.hasOwnProperty(parameter);\n    if (configuration.hasOwnProperty(underscored)) {\n      logger.warn(underscored + ' is deprecated, please use ' + parameter);\n      if (hasParameter) {\n        logger.warn(parameter + ' overriding ' + underscored);\n      }\n    }\n\n    configuration[parameter] = hasParameter ? configuration[parameter] : configuration[underscored];\n  }\n\n  // Check Mandatory parameters\n  for(parameter in UA.configuration_check.mandatory) {\n    aliasUnderscored(parameter, this.logger);\n    if(!configuration.hasOwnProperty(parameter)) {\n      throw new SIP.Exceptions.ConfigurationError(parameter);\n    } else {\n      value = configuration[parameter];\n      checked_value = UA.configuration_check.mandatory[parameter](value);\n      if (checked_value !== undefined) {\n        settings[parameter] = checked_value;\n      } else {\n        throw new SIP.Exceptions.ConfigurationError(parameter, value);\n      }\n    }\n  }\n\n  SIP.Utils.optionsOverride(configuration, 'rel100', 'reliable', true, this.logger, SIP.C.supported.UNSUPPORTED);\n\n  var emptyArraysAllowed = ['stunServers', 'turnServers'];\n\n  // Check Optional parameters\n  for(parameter in UA.configuration_check.optional) {\n    aliasUnderscored(parameter, this.logger);\n    if(configuration.hasOwnProperty(parameter)) {\n      value = configuration[parameter];\n\n      // If the parameter value is an empty array, but shouldn't be, apply its default value.\n      if (value instanceof Array && value.length === 0 && emptyArraysAllowed.indexOf(parameter) < 0) { continue; }\n\n      // If the parameter value is null, empty string, or undefined then apply its default value.\n      if(value === null || value === \"\" || value === undefined) { continue; }\n      // If it's a number with NaN value then also apply its default value.\n      // NOTE: JS does not allow \"value === NaN\", the following does the work:\n      else if(typeof(value) === 'number' && isNaN(value)) { continue; }\n\n      checked_value = UA.configuration_check.optional[parameter](value);\n      if (checked_value !== undefined) {\n        settings[parameter] = checked_value;\n      } else {\n        throw new SIP.Exceptions.ConfigurationError(parameter, value);\n      }\n    }\n  }\n\n  // Sanity Checks\n\n  // Connection recovery intervals\n  if(settings.connectionRecoveryMaxInterval < settings.connectionRecoveryMinInterval) {\n    throw new SIP.Exceptions.ConfigurationError('connectionRecoveryMaxInterval', settings.connectionRecoveryMaxInterval);\n  }\n\n  // Post Configuration Process\n\n  // Allow passing 0 number as displayName.\n  if (settings.displayName === 0) {\n    settings.displayName = '0';\n  }\n\n  // Instance-id for GRUU\n  if (!settings.instanceId) {\n    settings.instanceId = SIP.Utils.newUUID();\n  }\n\n  // sipjsId instance parameter. Static random tag of length 5\n  settings.sipjsId = SIP.Utils.createRandomToken(5);\n\n  // String containing settings.uri without scheme and user.\n  hostportParams = settings.uri.clone();\n  hostportParams.user = null;\n  settings.hostportParams = hostportParams.toString().replace(/^sip:/i, '');\n\n  /* Check whether authorizationUser is explicitly defined.\n   * Take 'settings.uri.user' value if not.\n   */\n  if (!settings.authorizationUser) {\n    settings.authorizationUser = settings.uri.user;\n  }\n\n  /* If no 'registrarServer' is set use the 'uri' value without user portion. */\n  if (!settings.registrarServer) {\n    registrarServer = settings.uri.clone();\n    registrarServer.user = null;\n    settings.registrarServer = registrarServer;\n  }\n\n  // User noAnswerTimeout\n  settings.noAnswerTimeout = settings.noAnswerTimeout * 1000;\n\n  // Via Host\n  if (settings.hackIpInContact) {\n    settings.viaHost = SIP.Utils.getRandomTestNetIP();\n  }\n\n  this.contact = {\n    pub_gruu: null,\n    temp_gruu: null,\n    uri: new SIP.URI('sip', SIP.Utils.createRandomToken(8), settings.viaHost, null, {transport: ((settings.hackWssInTransport)?'wss':'ws')}),\n    toString: function(options){\n      options = options || {};\n\n      var\n        anonymous = options.anonymous || null,\n        outbound = options.outbound || null,\n        contact = '<';\n\n      if (anonymous) {\n        contact += (this.temp_gruu || ('sip:anonymous@anonymous.invalid;transport='+(settings.hackWssInTransport)?'wss':'ws')).toString();\n      } else {\n        contact += (this.pub_gruu || this.uri).toString();\n      }\n\n      if (outbound) {\n        contact += ';ob';\n      }\n\n      contact += '>';\n\n      return contact;\n    }\n  };\n\n  // media overrides mediaConstraints\n  SIP.Utils.optionsOverride(settings, 'media', 'mediaConstraints', true, this.logger);\n\n  // Fill the value of the configuration_skeleton\n  for(parameter in settings) {\n    UA.configuration_skeleton[parameter].value = settings[parameter];\n  }\n\n  Object.defineProperties(this.configuration, UA.configuration_skeleton);\n\n  // Clean UA.configuration_skeleton\n  for(parameter in settings) {\n    UA.configuration_skeleton[parameter].value = '';\n  }\n\n  this.logger.log('configuration parameters after validation:');\n  for(parameter in settings) {\n    switch(parameter) {\n      case 'uri':\n      case 'registrarServer':\n      case 'mediaHandlerFactory':\n        this.logger.log('· ' + parameter + ': ' + settings[parameter]);\n        break;\n      case 'password':\n        this.logger.log('· ' + parameter + ': ' + 'NOT SHOWN');\n        break;\n      default:\n        this.logger.log('· ' + parameter + ': ' + JSON.stringify(settings[parameter]));\n    }\n  }\n\n  return;\n};\n\n/**\n * Configuration Object skeleton.\n * @private\n */\nUA.configuration_skeleton = (function() {\n  var idx,  parameter,\n    skeleton = {},\n    parameters = [\n      // Internal parameters\n      \"sipjsId\",\n      \"hostportParams\",\n\n      // Optional user configurable parameters\n      \"uri\",\n      \"wsServers\",\n      \"authorizationUser\",\n      \"connectionRecoveryMaxInterval\",\n      \"connectionRecoveryMinInterval\",\n      \"displayName\",\n      \"hackViaTcp\", // false.\n      \"hackIpInContact\", //false\n      \"hackWssInTransport\", //false\n      \"instanceId\",\n      \"noAnswerTimeout\", // 30 seconds.\n      \"password\",\n      \"registerExpires\", // 600 seconds.\n      \"registrarServer\",\n      \"reliable\",\n      \"rel100\",\n      \"userAgentString\", //SIP.C.USER_AGENT\n      \"autostart\",\n      \"stunServers\",\n      \"traceSip\",\n      \"turnServers\",\n      \"usePreloadedRoute\",\n      \"wsServerMaxReconnection\",\n      \"wsServerReconnectionTimeout\",\n      \"mediaHandlerFactory\",\n      \"media\",\n      \"mediaConstraints\",\n\n      // Post-configuration generated parameters\n      \"via_core_value\",\n      \"viaHost\"\n    ];\n\n  for(idx in parameters) {\n    parameter = parameters[idx];\n    skeleton[parameter] = {\n      value: '',\n      writable: false,\n      configurable: false\n    };\n  }\n\n  skeleton['register'] = {\n    value: '',\n    writable: true,\n    configurable: false\n  };\n\n  return skeleton;\n}());\n\n/**\n * Configuration checker.\n * @private\n * @return {Boolean}\n */\nUA.configuration_check = {\n  mandatory: {\n  },\n\n  optional: {\n\n    uri: function(uri) {\n      var parsed;\n\n      if (!(/^sip:/i).test(uri)) {\n        uri = SIP.C.SIP + ':' + uri;\n      }\n      parsed = SIP.URI.parse(uri);\n\n      if(!parsed) {\n        return;\n      } else if(!parsed.user) {\n        return;\n      } else {\n        return parsed;\n      }\n    },\n\n    //Note: this function used to call 'this.logger.error' but calling 'this' with anything here is invalid\n    wsServers: function(wsServers) {\n      var idx, length, url;\n\n      /* Allow defining wsServers parameter as:\n       *  String: \"host\"\n       *  Array of Strings: [\"host1\", \"host2\"]\n       *  Array of Objects: [{ws_uri:\"host1\", weight:1}, {ws_uri:\"host2\", weight:0}]\n       *  Array of Objects and Strings: [{ws_uri:\"host1\"}, \"host2\"]\n       */\n      if (typeof wsServers === 'string') {\n        wsServers = [{ws_uri: wsServers}];\n      } else if (wsServers instanceof Array) {\n        length = wsServers.length;\n        for (idx = 0; idx < length; idx++) {\n          if (typeof wsServers[idx] === 'string'){\n            wsServers[idx] = {ws_uri: wsServers[idx]};\n          }\n        }\n      } else {\n        return;\n      }\n\n      if (wsServers.length === 0) {\n        return false;\n      }\n\n      length = wsServers.length;\n      for (idx = 0; idx < length; idx++) {\n        if (!wsServers[idx].ws_uri) {\n          return;\n        }\n        if (wsServers[idx].weight && !Number(wsServers[idx].weight)) {\n          return;\n        }\n\n        url = SIP.Grammar.parse(wsServers[idx].ws_uri, 'absoluteURI');\n\n        if(url === -1) {\n          return;\n        } else if(url.scheme !== 'wss' && url.scheme !== 'ws') {\n          return;\n        } else {\n          wsServers[idx].sip_uri = '<sip:' + url.host + (url.port ? ':' + url.port : '') + ';transport=ws;lr>';\n\n          if (!wsServers[idx].weight) {\n            wsServers[idx].weight = 0;\n          }\n\n          wsServers[idx].status = 0;\n          wsServers[idx].scheme = url.scheme.toUpperCase();\n        }\n      }\n      return wsServers;\n    },\n\n    authorizationUser: function(authorizationUser) {\n      if(SIP.Grammar.parse('\"'+ authorizationUser +'\"', 'quoted_string') === -1) {\n        return;\n      } else {\n        return authorizationUser;\n      }\n    },\n\n    connectionRecoveryMaxInterval: function(connectionRecoveryMaxInterval) {\n      var value;\n      if(SIP.Utils.isDecimal(connectionRecoveryMaxInterval)) {\n        value = Number(connectionRecoveryMaxInterval);\n        if(value > 0) {\n          return value;\n        }\n      }\n    },\n\n    connectionRecoveryMinInterval: function(connectionRecoveryMinInterval) {\n      var value;\n      if(SIP.Utils.isDecimal(connectionRecoveryMinInterval)) {\n        value = Number(connectionRecoveryMinInterval);\n        if(value > 0) {\n          return value;\n        }\n      }\n    },\n\n    displayName: function(displayName) {\n      if(SIP.Grammar.parse('\"' + displayName + '\"', 'displayName') === -1) {\n        return;\n      } else {\n        return displayName;\n      }\n    },\n\n    hackViaTcp: function(hackViaTcp) {\n      if (typeof hackViaTcp === 'boolean') {\n        return hackViaTcp;\n      }\n    },\n\n    hackIpInContact: function(hackIpInContact) {\n      if (typeof hackIpInContact === 'boolean') {\n        return hackIpInContact;\n      }\n    },\n\n    hackWssInTransport: function(hackWssInTransport) {\n      if (typeof hackWssInTransport === 'boolean') {\n        return hackWssInTransport;\n      }\n    },\n\n    instanceId: function(instanceId) {\n      if(typeof instanceId !== 'string') {\n        return;\n      }\n\n      if ((/^uuid:/i.test(instanceId))) {\n        instanceId = instanceId.substr(5);\n      }\n\n      if(SIP.Grammar.parse(instanceId, 'uuid') === -1) {\n        return;\n      } else {\n        return instanceId;\n      }\n    },\n\n    noAnswerTimeout: function(noAnswerTimeout) {\n      var value;\n      if (SIP.Utils.isDecimal(noAnswerTimeout)) {\n        value = Number(noAnswerTimeout);\n        if (value > 0) {\n          return value;\n        }\n      }\n    },\n\n    password: function(password) {\n      return String(password);\n    },\n\n    rel100: function(rel100) {\n      if(rel100 === SIP.C.supported.REQUIRED) {\n        return SIP.C.supported.REQUIRED;\n      } else if (rel100 === SIP.C.supported.SUPPORTED) {\n        return SIP.C.supported.SUPPORTED;\n      } else  {\n        return SIP.C.supported.UNSUPPORTED;\n      }\n    },\n\n    register: function(register) {\n      if (typeof register === 'boolean') {\n        return register;\n      }\n    },\n\n    registerExpires: function(registerExpires) {\n      var value;\n      if (SIP.Utils.isDecimal(registerExpires)) {\n        value = Number(registerExpires);\n        if (value > 0) {\n          return value;\n        }\n      }\n    },\n\n    registrarServer: function(registrarServer) {\n      var parsed;\n\n      if(typeof registrarServer !== 'string') {\n        return;\n      }\n\n      if (!/^sip:/i.test(registrarServer)) {\n        registrarServer = SIP.C.SIP + ':' + registrarServer;\n      }\n      parsed = SIP.URI.parse(registrarServer);\n\n      if(!parsed) {\n        return;\n      } else if(parsed.user) {\n        return;\n      } else {\n        return parsed;\n      }\n    },\n\n    stunServers: function(stunServers) {\n      var idx, length, stun_server;\n\n      if (typeof stunServers === 'string') {\n        stunServers = [stunServers];\n      } else if (!(stunServers instanceof Array)) {\n        return;\n      }\n\n      length = stunServers.length;\n      for (idx = 0; idx < length; idx++) {\n        stun_server = stunServers[idx];\n        if (!(/^stuns?:/.test(stun_server))) {\n          stun_server = 'stun:' + stun_server;\n        }\n\n        if(SIP.Grammar.parse(stun_server, 'stun_URI') === -1) {\n          return;\n        } else {\n          stunServers[idx] = stun_server;\n        }\n      }\n      return stunServers;\n    },\n\n    traceSip: function(traceSip) {\n      if (typeof traceSip === 'boolean') {\n        return traceSip;\n      }\n    },\n\n    turnServers: function(turnServers) {\n      var idx, length, turn_server, url;\n\n      if (turnServers instanceof Array) {\n        // Do nothing\n      } else {\n        turnServers = [turnServers];\n      }\n\n      length = turnServers.length;\n      for (idx = 0; idx < length; idx++) {\n        turn_server = turnServers[idx];\n        //Backwards compatibility: Allow defining the turn_server url with the 'server' property.\n        if (turn_server.server) {\n          turn_server.urls = [turn_server.server];\n        }\n\n        if (!turn_server.urls || !turn_server.username || !turn_server.password) {\n          return;\n        }\n\n        if (!(turn_server.urls instanceof Array)) {\n          turn_server.urls = [turn_server.urls];\n        }\n\n        length = turn_server.urls.length;\n        for (idx = 0; idx < length; idx++) {\n          url = turn_server.urls[idx];\n\n          if (!(/^turns?:/.test(url))) {\n            url = 'turn:' + url;\n          }\n\n          if(SIP.Grammar.parse(url, 'turn_URI') === -1) {\n            return;\n          }\n        }\n      }\n      return turnServers;\n    },\n\n    userAgentString: function(userAgentString) {\n      if (typeof userAgentString === 'string') {\n        return userAgentString;\n      }\n    },\n\n    usePreloadedRoute: function(usePreloadedRoute) {\n      if (typeof usePreloadedRoute === 'boolean') {\n        return usePreloadedRoute;\n      }\n    },\n\n    wsServerMaxReconnection: function(wsServerMaxReconnection) {\n      var value;\n      if (SIP.Utils.isDecimal(wsServerMaxReconnection)) {\n        value = Number(wsServerMaxReconnection);\n        if (value > 0) {\n          return value;\n        }\n      }\n    },\n\n    wsServerReconnectionTimeout: function(wsServerReconnectionTimeout) {\n      var value;\n      if (SIP.Utils.isDecimal(wsServerReconnectionTimeout)) {\n        value = Number(wsServerReconnectionTimeout);\n        if (value > 0) {\n          return value;\n        }\n      }\n    },\n\n    autostart: function(autostart) {\n      if (typeof autostart === 'boolean') {\n        return autostart;\n      }\n    },\n\n    mediaHandlerFactory: function(mediaHandlerFactory) {\n      if (mediaHandlerFactory instanceof Function) {\n        return mediaHandlerFactory;\n      }\n    }\n  }\n};\n\nUA.C = C;\nSIP.UA = UA;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/sip.js/src/UA.js\n ** module id = 30\n ** module chunks = 0\n **/","/**\n * @fileoverview Hacks - This file contains all of the things we\n * wish we didn't have to do, just for interop.  It is similar to\n * Utils, which provides actually useful and relevant functions for\n * a SIP library. Methods in this file are grouped by vendor, so\n * as to most easily track when particular hacks may not be necessary anymore.\n */\n\nmodule.exports = function (SIP) {\nvar Hacks = {\n  AllBrowsers: {\n    maskDtls: function (message) {\n      if (message.body) {\n        message.body = message.body.replace(/ UDP\\/TLS\\/RTP\\/SAVP/gmi, \" RTP/SAVP\");\n      }\n    },\n    unmaskDtls: function (sdp) {\n      /**\n       * Chrome does not handle DTLS correctly (Canaray does, but not production)\n       * keeping Chrome as SDES until DTLS is fixed (comment out 'is_opera' condition)\n       *\n       * UPDATE: May 21, 2014\n       * Chrome 35 now properly defaults to DTLS.  Only Opera remains using SDES\n       *\n       * UPDATE: 2014-09-24\n       * Opera now supports DTLS by default as well.\n       *\n       **/\n      return sdp.replace(/ RTP\\/SAVP/gmi, \" UDP/TLS/RTP/SAVP\");\n    }\n  },\n  Firefox: {\n    /* Condition to detect if hacks are applicable */\n    isFirefox: function () {\n      return window.mozRTCPeerConnection !== undefined;\n    },\n\n    cannotHandleExtraWhitespace: function (message) {\n      if (this.isFirefox() && message.body) {\n        message.body = message.body.replace(/ \\r\\n/g, \"\\r\\n\");\n      }\n    },\n\n    hasMissingCLineInSDP: function (sdp) {\n      /*\n       * This is a Firefox hack to insert valid sdp when getDescription is\n       * called with the constraint offerToReceiveVideo = false.\n       * We search for either a c-line at the top of the sdp above all\n       * m-lines. If that does not exist then we search for a c-line\n       * beneath each m-line. If it is missing a c-line, we insert\n       * a fake c-line with the ip address 0.0.0.0. This is then valid\n       * sdp and no media will be sent for that m-line.\n       *\n       * Valid SDP is:\n       * m=\n       * i=\n       * c=\n       */\n      var insertAt, mlines;\n      if (sdp.indexOf('c=') > sdp.indexOf('m=')) {\n\n        // Find all m= lines\n        mlines = sdp.match(/m=.*\\r\\n.*/g);\n        for (var i=0; i<mlines.length; i++) {\n\n          // If it has an i= line, check if the next line is the c= line\n          if (mlines[i].toString().search(/i=.*/) >= 0) {\n            insertAt = sdp.indexOf(mlines[i].toString())+mlines[i].toString().length;\n            if (sdp.substr(insertAt,2)!=='c=') {\n              sdp = sdp.substr(0,insertAt) + '\\r\\nc=IN IP4 0.0.0.0' + sdp.substr(insertAt);\n            }\n\n          // else add the C line if it's missing\n          } else if (mlines[i].toString().search(/c=.*/) < 0) {\n            insertAt = sdp.indexOf(mlines[i].toString().match(/.*/))+mlines[i].toString().match(/.*/).toString().length;\n            sdp = sdp.substr(0,insertAt) + '\\r\\nc=IN IP4 0.0.0.0' + sdp.substr(insertAt);\n          }\n        }\n      }\n      return sdp;\n    },\n\n    hasIncompatibleCLineWithSomeSIPEndpoints: function(sdp) {\n      /*\n       * Firefox appears to be following https://tools.ietf.org/html/rfc5245#section-9.1.1.1\n       * and using a c line IP address of 0.0.0.0. This is completely valid, however it is\n       * causing some endpoints (such as FreeSWITCH) to interpret the SDP as being on hold\n       * https://freeswitch.org/jira/browse/FS-6955. To get around this issue we pull the\n       * replace the c line with 1.1.1.1 which SIP clients do not interpret as hold.\n       * This makes the other endpoint believe that the call is not on hold and audio flows\n       * because ICE determines the media pathway (not the c line).\n       */\n      return sdp.replace(/(0\\.0\\.0\\.0)/gmi, SIP.Utils.getRandomTestNetIP());\n    }\n  },\n\n  Chrome: {\n    needsExplicitlyInactiveSDP: function (sdp) {\n      var sub, index;\n\n      if (Hacks.Firefox.isFirefox()) { // Fix this in Firefox before sending\n        index = sdp.indexOf('m=video 0');\n        if (index !== -1) {\n          sub = sdp.substr(index);\n          sub = sub.replace(/\\r\\nc=IN IP4.*\\r\\n$/,\n                            '\\r\\nc=IN IP4 0.0.0.0\\r\\na=inactive\\r\\n');\n          return sdp.substr(0, index) + sub;\n        }\n      }\n      return sdp;\n    },\n\n    getsConfusedAboutGUM: function (session) {\n      if (session.mediaHandler) {\n        session.mediaHandler.close();\n      }\n    }\n  }\n};\n\nreturn Hacks;\n};\n\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/sip.js/src/Hacks.js\n ** module id = 31\n ** module chunks = 0\n **/","/**\n * @fileoverview Incoming SIP Message Sanity Check\n */\n\n/**\n * SIP message sanity check.\n * @augments SIP\n * @function\n * @param {SIP.IncomingMessage} message\n * @param {SIP.UA} ua\n * @param {SIP.Transport} transport\n * @returns {Boolean}\n */\nmodule.exports = function (SIP) {\nvar sanityCheck,\n logger,\n message, ua, transport,\n requests = [],\n responses = [],\n all = [];\n\n/*\n * Sanity Check for incoming Messages\n *\n * Requests:\n *  - _rfc3261_8_2_2_1_ Receive a Request with a non supported URI scheme\n *  - _rfc3261_16_3_4_ Receive a Request already sent by us\n *   Does not look at via sent-by but at sipjsId, which is inserted as\n *   a prefix in all initial requests generated by the ua\n *  - _rfc3261_18_3_request_ Body Content-Length\n *  - _rfc3261_8_2_2_2_ Merged Requests\n *\n * Responses:\n *  - _rfc3261_8_1_3_3_ Multiple Via headers\n *  - _rfc3261_18_1_2_ sent-by mismatch\n *  - _rfc3261_18_3_response_ Body Content-Length\n *\n * All:\n *  - Minimum headers in a SIP message\n */\n\n// Sanity Check functions for requests\nfunction rfc3261_8_2_2_1() {\n  if(!message.ruri || message.ruri.scheme !== 'sip') {\n    reply(416);\n    return false;\n  }\n}\n\nfunction rfc3261_16_3_4() {\n  if(!message.to_tag) {\n    if(message.call_id.substr(0, 5) === ua.configuration.sipjsId) {\n      reply(482);\n      return false;\n    }\n  }\n}\n\nfunction rfc3261_18_3_request() {\n  var len = SIP.Utils.str_utf8_length(message.body),\n  contentLength = message.getHeader('content-length');\n\n  if(len < contentLength) {\n    reply(400);\n    return false;\n  }\n}\n\nfunction rfc3261_8_2_2_2() {\n  var tr, idx,\n    fromTag = message.from_tag,\n    call_id = message.call_id,\n    cseq = message.cseq;\n\n  if(!message.to_tag) {\n    if(message.method === SIP.C.INVITE) {\n      tr = ua.transactions.ist[message.via_branch];\n      if(tr) {\n        return;\n      } else {\n        for(idx in ua.transactions.ist) {\n          tr = ua.transactions.ist[idx];\n          if(tr.request.from_tag === fromTag && tr.request.call_id === call_id && tr.request.cseq === cseq) {\n            reply(482);\n            return false;\n          }\n        }\n      }\n    } else {\n      tr = ua.transactions.nist[message.via_branch];\n      if(tr) {\n        return;\n      } else {\n        for(idx in ua.transactions.nist) {\n          tr = ua.transactions.nist[idx];\n          if(tr.request.from_tag === fromTag && tr.request.call_id === call_id && tr.request.cseq === cseq) {\n            reply(482);\n            return false;\n          }\n        }\n      }\n    }\n  }\n}\n\n// Sanity Check functions for responses\nfunction rfc3261_8_1_3_3() {\n  if(message.getHeaders('via').length > 1) {\n    logger.warn('More than one Via header field present in the response. Dropping the response');\n    return false;\n  }\n}\n\nfunction rfc3261_18_1_2() {\n  var viaHost = ua.configuration.viaHost;\n  if(message.via.host !== viaHost || message.via.port !== undefined) {\n    logger.warn('Via sent-by in the response does not match UA Via host value. Dropping the response');\n    return false;\n  }\n}\n\nfunction rfc3261_18_3_response() {\n  var\n    len = SIP.Utils.str_utf8_length(message.body),\n    contentLength = message.getHeader('content-length');\n\n    if(len < contentLength) {\n      logger.warn('Message body length is lower than the value in Content-Length header field. Dropping the response');\n      return false;\n    }\n}\n\n// Sanity Check functions for requests and responses\nfunction minimumHeaders() {\n  var\n    mandatoryHeaders = ['from', 'to', 'call_id', 'cseq', 'via'],\n    idx = mandatoryHeaders.length;\n\n  while(idx--) {\n    if(!message.hasHeader(mandatoryHeaders[idx])) {\n      logger.warn('Missing mandatory header field : '+ mandatoryHeaders[idx] +'. Dropping the response');\n      return false;\n    }\n  }\n}\n\n// Reply\nfunction reply(status_code) {\n  var to,\n    response = \"SIP/2.0 \" + status_code + \" \" + SIP.C.REASON_PHRASE[status_code] + \"\\r\\n\",\n    vias = message.getHeaders('via'),\n    length = vias.length,\n    idx = 0;\n\n  for(idx; idx < length; idx++) {\n    response += \"Via: \" + vias[idx] + \"\\r\\n\";\n  }\n\n  to = message.getHeader('To');\n\n  if(!message.to_tag) {\n    to += ';tag=' + SIP.Utils.newTag();\n  }\n\n  response += \"To: \" + to + \"\\r\\n\";\n  response += \"From: \" + message.getHeader('From') + \"\\r\\n\";\n  response += \"Call-ID: \" + message.call_id + \"\\r\\n\";\n  response += \"CSeq: \" + message.cseq + \" \" + message.method + \"\\r\\n\";\n  response += \"\\r\\n\";\n\n  transport.send(response);\n}\n\nrequests.push(rfc3261_8_2_2_1);\nrequests.push(rfc3261_16_3_4);\nrequests.push(rfc3261_18_3_request);\nrequests.push(rfc3261_8_2_2_2);\n\nresponses.push(rfc3261_8_1_3_3);\nresponses.push(rfc3261_18_1_2);\nresponses.push(rfc3261_18_3_response);\n\nall.push(minimumHeaders);\n\nsanityCheck = function(m, u, t) {\n  var len, pass;\n\n  message = m;\n  ua = u;\n  transport = t;\n\n  logger = ua.getLogger('sip.sanitycheck');\n\n  len = all.length;\n  while(len--) {\n    pass = all[len](message);\n    if(pass === false) {\n      return false;\n    }\n  }\n\n  if(message instanceof SIP.IncomingRequest) {\n    len = requests.length;\n    while(len--) {\n      pass = requests[len](message);\n      if(pass === false) {\n        return false;\n      }\n    }\n  }\n\n  else if(message instanceof SIP.IncomingResponse) {\n    len = responses.length;\n    while(len--) {\n      pass = responses[len](message);\n      if(pass === false) {\n        return false;\n      }\n    }\n  }\n\n  //Everything is OK\n  return true;\n};\n\nSIP.sanityCheck = sanityCheck;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/sip.js/src/SanityCheck.js\n ** module id = 32\n ** module chunks = 0\n **/","\n/**\n * @fileoverview SIP Digest Authentication\n */\n\n/**\n * SIP Digest Authentication.\n * @augments SIP.\n * @function Digest Authentication\n * @param {SIP.UA} ua\n */\nmodule.exports = function (Utils) {\nvar DigestAuthentication;\n\nDigestAuthentication = function(ua) {\n  this.logger = ua.getLogger('sipjs.digestauthentication');\n  this.username = ua.configuration.authorizationUser;\n  this.password = ua.configuration.password;\n  this.cnonce = null;\n  this.nc = 0;\n  this.ncHex = '00000000';\n  this.response = null;\n};\n\n\n/**\n* Performs Digest authentication given a SIP request and the challenge\n* received in a response to that request.\n* Returns true if credentials were successfully generated, false otherwise.\n*\n* @param {SIP.OutgoingRequest} request\n* @param {Object} challenge\n*/\nDigestAuthentication.prototype.authenticate = function(request, challenge) {\n  // Inspect and validate the challenge.\n\n  this.algorithm = challenge.algorithm;\n  this.realm = challenge.realm;\n  this.nonce = challenge.nonce;\n  this.opaque = challenge.opaque;\n  this.stale = challenge.stale;\n\n  if (this.algorithm) {\n    if (this.algorithm !== 'MD5') {\n      this.logger.warn('challenge with Digest algorithm different than \"MD5\", authentication aborted');\n      return false;\n    }\n  } else {\n    this.algorithm = 'MD5';\n  }\n\n  if (! this.realm) {\n    this.logger.warn('challenge without Digest realm, authentication aborted');\n    return false;\n  }\n\n  if (! this.nonce) {\n    this.logger.warn('challenge without Digest nonce, authentication aborted');\n    return false;\n  }\n\n  // 'qop' can contain a list of values (Array). Let's choose just one.\n  if (challenge.qop) {\n    if (challenge.qop.indexOf('auth') > -1) {\n      this.qop = 'auth';\n    } else if (challenge.qop.indexOf('auth-int') > -1) {\n      this.qop = 'auth-int';\n    } else {\n      // Otherwise 'qop' is present but does not contain 'auth' or 'auth-int', so abort here.\n      this.logger.warn('challenge without Digest qop different than \"auth\" or \"auth-int\", authentication aborted');\n      return false;\n    }\n  } else {\n    this.qop = null;\n  }\n\n  // Fill other attributes.\n\n  this.method = request.method;\n  this.uri = request.ruri;\n  this.cnonce = Utils.createRandomToken(12);\n  this.nc += 1;\n  this.updateNcHex();\n\n  // nc-value = 8LHEX. Max value = 'FFFFFFFF'.\n  if (this.nc === 4294967296) {\n    this.nc = 1;\n    this.ncHex = '00000001';\n  }\n\n  // Calculate the Digest \"response\" value.\n  this.calculateResponse();\n\n  return true;\n};\n\n\n/**\n* Generate Digest 'response' value.\n* @private\n*/\nDigestAuthentication.prototype.calculateResponse = function() {\n  var ha1, ha2;\n\n  // HA1 = MD5(A1) = MD5(username:realm:password)\n  ha1 = Utils.calculateMD5(this.username + \":\" + this.realm + \":\" + this.password);\n\n  if (this.qop === 'auth') {\n    // HA2 = MD5(A2) = MD5(method:digestURI)\n    ha2 = Utils.calculateMD5(this.method + \":\" + this.uri);\n    // response = MD5(HA1:nonce:nonceCount:credentialsNonce:qop:HA2)\n    this.response = Utils.calculateMD5(ha1 + \":\" + this.nonce + \":\" + this.ncHex + \":\" + this.cnonce + \":auth:\" + ha2);\n\n  } else if (this.qop === 'auth-int') {\n    // HA2 = MD5(A2) = MD5(method:digestURI:MD5(entityBody))\n    ha2 = Utils.calculateMD5(this.method + \":\" + this.uri + \":\" + Utils.calculateMD5(this.body ? this.body : \"\"));\n    // response = MD5(HA1:nonce:nonceCount:credentialsNonce:qop:HA2)\n    this.response = Utils.calculateMD5(ha1 + \":\" + this.nonce + \":\" + this.ncHex + \":\" + this.cnonce + \":auth-int:\" + ha2);\n\n  } else if (this.qop === null) {\n    // HA2 = MD5(A2) = MD5(method:digestURI)\n    ha2 = Utils.calculateMD5(this.method + \":\" + this.uri);\n    // response = MD5(HA1:nonce:HA2)\n    this.response = Utils.calculateMD5(ha1 + \":\" + this.nonce + \":\" + ha2);\n  }\n};\n\n\n/**\n* Return the Proxy-Authorization or WWW-Authorization header value.\n*/\nDigestAuthentication.prototype.toString = function() {\n  var auth_params = [];\n\n  if (! this.response) {\n    throw new Error('response field does not exist, cannot generate Authorization header');\n  }\n\n  auth_params.push('algorithm=' + this.algorithm);\n  auth_params.push('username=\"' + this.username + '\"');\n  auth_params.push('realm=\"' + this.realm + '\"');\n  auth_params.push('nonce=\"' + this.nonce + '\"');\n  auth_params.push('uri=\"' + this.uri + '\"');\n  auth_params.push('response=\"' + this.response + '\"');\n  if (this.opaque) {\n    auth_params.push('opaque=\"' + this.opaque + '\"');\n  }\n  if (this.qop) {\n    auth_params.push('qop=' + this.qop);\n    auth_params.push('cnonce=\"' + this.cnonce + '\"');\n    auth_params.push('nc=' + this.ncHex);\n  }\n\n  return 'Digest ' + auth_params.join(', ');\n};\n\n\n/**\n* Generate the 'nc' value as required by Digest in this.ncHex by reading this.nc.\n* @private\n*/\nDigestAuthentication.prototype.updateNcHex = function() {\n  var hex = Number(this.nc).toString(16);\n  this.ncHex = '00000000'.substr(0, 8-hex.length) + hex;\n};\n\nreturn DigestAuthentication;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/sip.js/src/DigestAuthentication.js\n ** module id = 33\n ** module chunks = 0\n **/","/* jshint ignore:start */\nmodule.exports = function(SIP) {\n  /*\n   * Generated by PEG.js 0.8.0.\n   *\n   * http://pegjs.majda.cz/\n   */\n\n  function peg$subclass(child, parent) {\n    function ctor() { this.constructor = child; }\n    ctor.prototype = parent.prototype;\n    child.prototype = new ctor();\n  }\n\n  function SyntaxError(message, expected, found, offset, line, column) {\n    this.message  = message;\n    this.expected = expected;\n    this.found    = found;\n    this.offset   = offset;\n    this.line     = line;\n    this.column   = column;\n\n    this.name     = \"SyntaxError\";\n  }\n\n  peg$subclass(SyntaxError, Error);\n\n  function parse(input) {\n    var options = arguments.length > 1 ? arguments[1] : {},\n\n        peg$FAILED = {},\n\n        peg$startRuleIndices = { Contact: 118, Name_Addr_Header: 155, Record_Route: 175, Request_Response: 81, SIP_URI: 45, Subscription_State: 182, Via: 190, absoluteURI: 84, Call_ID: 117, Content_Disposition: 129, Content_Length: 134, Content_Type: 135, CSeq: 145, displayName: 121, Event: 148, From: 150, host: 52, Max_Forwards: 153, Proxy_Authenticate: 156, quoted_string: 40, Refer_To: 177, stun_URI: 209, To: 188, turn_URI: 216, uuid: 219, WWW_Authenticate: 205, challenge: 157 },\n        peg$startRuleIndex   = 118,\n\n        peg$consts = [\n          \"\\r\\n\",\n          { type: \"literal\", value: \"\\r\\n\", description: \"\\\"\\\\r\\\\n\\\"\" },\n          /^[0-9]/,\n          { type: \"class\", value: \"[0-9]\", description: \"[0-9]\" },\n          /^[a-zA-Z]/,\n          { type: \"class\", value: \"[a-zA-Z]\", description: \"[a-zA-Z]\" },\n          /^[0-9a-fA-F]/,\n          { type: \"class\", value: \"[0-9a-fA-F]\", description: \"[0-9a-fA-F]\" },\n          /^[\\0-\\xFF]/,\n          { type: \"class\", value: \"[\\\\0-\\\\xFF]\", description: \"[\\\\0-\\\\xFF]\" },\n          /^[\"]/,\n          { type: \"class\", value: \"[\\\"]\", description: \"[\\\"]\" },\n          \" \",\n          { type: \"literal\", value: \" \", description: \"\\\" \\\"\" },\n          \"\\t\",\n          { type: \"literal\", value: \"\\t\", description: \"\\\"\\\\t\\\"\" },\n          /^[a-zA-Z0-9]/,\n          { type: \"class\", value: \"[a-zA-Z0-9]\", description: \"[a-zA-Z0-9]\" },\n          \";\",\n          { type: \"literal\", value: \";\", description: \"\\\";\\\"\" },\n          \"/\",\n          { type: \"literal\", value: \"/\", description: \"\\\"/\\\"\" },\n          \"?\",\n          { type: \"literal\", value: \"?\", description: \"\\\"?\\\"\" },\n          \":\",\n          { type: \"literal\", value: \":\", description: \"\\\":\\\"\" },\n          \"@\",\n          { type: \"literal\", value: \"@\", description: \"\\\"@\\\"\" },\n          \"&\",\n          { type: \"literal\", value: \"&\", description: \"\\\"&\\\"\" },\n          \"=\",\n          { type: \"literal\", value: \"=\", description: \"\\\"=\\\"\" },\n          \"+\",\n          { type: \"literal\", value: \"+\", description: \"\\\"+\\\"\" },\n          \"$\",\n          { type: \"literal\", value: \"$\", description: \"\\\"$\\\"\" },\n          \",\",\n          { type: \"literal\", value: \",\", description: \"\\\",\\\"\" },\n          \"-\",\n          { type: \"literal\", value: \"-\", description: \"\\\"-\\\"\" },\n          \"_\",\n          { type: \"literal\", value: \"_\", description: \"\\\"_\\\"\" },\n          \".\",\n          { type: \"literal\", value: \".\", description: \"\\\".\\\"\" },\n          \"!\",\n          { type: \"literal\", value: \"!\", description: \"\\\"!\\\"\" },\n          \"~\",\n          { type: \"literal\", value: \"~\", description: \"\\\"~\\\"\" },\n          \"*\",\n          { type: \"literal\", value: \"*\", description: \"\\\"*\\\"\" },\n          \"'\",\n          { type: \"literal\", value: \"'\", description: \"\\\"'\\\"\" },\n          \"(\",\n          { type: \"literal\", value: \"(\", description: \"\\\"(\\\"\" },\n          \")\",\n          { type: \"literal\", value: \")\", description: \"\\\")\\\"\" },\n          peg$FAILED,\n          \"%\",\n          { type: \"literal\", value: \"%\", description: \"\\\"%\\\"\" },\n          function(escaped) {return escaped.join(''); },\n          null,\n          [],\n          function() {return \" \"; },\n          function() {return ':'; },\n          function() {\n                              return text(); },\n          /^[!-~]/,\n          { type: \"class\", value: \"[!-~]\", description: \"[!-~]\" },\n          /^[\\x80-\\uFFFF]/,\n          { type: \"class\", value: \"[\\\\x80-\\\\uFFFF]\", description: \"[\\\\x80-\\\\uFFFF]\" },\n          /^[\\x80-\\xBF]/,\n          { type: \"class\", value: \"[\\\\x80-\\\\xBF]\", description: \"[\\\\x80-\\\\xBF]\" },\n          /^[a-f]/,\n          { type: \"class\", value: \"[a-f]\", description: \"[a-f]\" },\n          \"`\",\n          { type: \"literal\", value: \"`\", description: \"\\\"`\\\"\" },\n          function() {\n                            return text(); },\n          \"<\",\n          { type: \"literal\", value: \"<\", description: \"\\\"<\\\"\" },\n          \">\",\n          { type: \"literal\", value: \">\", description: \"\\\">\\\"\" },\n          \"\\\\\",\n          { type: \"literal\", value: \"\\\\\", description: \"\\\"\\\\\\\\\\\"\" },\n          \"[\",\n          { type: \"literal\", value: \"[\", description: \"\\\"[\\\"\" },\n          \"]\",\n          { type: \"literal\", value: \"]\", description: \"\\\"]\\\"\" },\n          \"{\",\n          { type: \"literal\", value: \"{\", description: \"\\\"{\\\"\" },\n          \"}\",\n          { type: \"literal\", value: \"}\", description: \"\\\"}\\\"\" },\n          function() {return \"*\"; },\n          function() {return \"/\"; },\n          function() {return \"=\"; },\n          function() {return \"(\"; },\n          function() {return \")\"; },\n          function() {return \">\"; },\n          function() {return \"<\"; },\n          function() {return \",\"; },\n          function() {return \";\"; },\n          function() {return \":\"; },\n          function() {return \"\\\"\"; },\n          /^[!-']/,\n          { type: \"class\", value: \"[!-']\", description: \"[!-']\" },\n          /^[*-[]/,\n          { type: \"class\", value: \"[*-[]\", description: \"[*-[]\" },\n          /^[\\]-~]/,\n          { type: \"class\", value: \"[\\\\]-~]\", description: \"[\\\\]-~]\" },\n          function(contents) {\n                                  return contents; },\n          /^[#-[]/,\n          { type: \"class\", value: \"[#-[]\", description: \"[#-[]\" },\n          /^[\\0-\\t]/,\n          { type: \"class\", value: \"[\\\\0-\\\\t]\", description: \"[\\\\0-\\\\t]\" },\n          /^[\\x0B-\\f]/,\n          { type: \"class\", value: \"[\\\\x0B-\\\\f]\", description: \"[\\\\x0B-\\\\f]\" },\n          /^[\\x0E-]/,\n          { type: \"class\", value: \"[\\\\x0E-]\", description: \"[\\\\x0E-]\" },\n          function() {\n                                  data.uri = new SIP.URI(data.scheme, data.user, data.host, data.port);\n                                  delete data.scheme;\n                                  delete data.user;\n                                  delete data.host;\n                                  delete data.host_type;\n                                  delete data.port;\n                                },\n          function() {\n                                  data.uri = new SIP.URI(data.scheme, data.user, data.host, data.port, data.uri_params, data.uri_headers);\n                                  delete data.scheme;\n                                  delete data.user;\n                                  delete data.host;\n                                  delete data.host_type;\n                                  delete data.port;\n                                  delete data.uri_params;\n\n                                  if (options.startRule === 'SIP_URI') { data = data.uri;}\n                                },\n          \"sips\",\n          { type: \"literal\", value: \"sips\", description: \"\\\"sips\\\"\" },\n          \"sip\",\n          { type: \"literal\", value: \"sip\", description: \"\\\"sip\\\"\" },\n          function(uri_scheme) {\n                              data.scheme = uri_scheme.toLowerCase(); },\n          function() {\n                              data.user = decodeURIComponent(text().slice(0, -1));},\n          function() {\n                              data.password = text(); },\n          function() {\n                              data.host = text().toLowerCase();\n                              return data.host; },\n          function() {\n                            data.host_type = 'domain';\n                            return text(); },\n          /^[a-zA-Z0-9_\\-]/,\n          { type: \"class\", value: \"[a-zA-Z0-9_\\\\-]\", description: \"[a-zA-Z0-9_\\\\-]\" },\n          /^[a-zA-Z0-9\\-]/,\n          { type: \"class\", value: \"[a-zA-Z0-9\\\\-]\", description: \"[a-zA-Z0-9\\\\-]\" },\n          function() {\n                              data.host_type = 'IPv6';\n                              return text(); },\n          \"::\",\n          { type: \"literal\", value: \"::\", description: \"\\\"::\\\"\" },\n          function() {\n                            data.host_type = 'IPv6';\n                            return text(); },\n          function() {\n                              data.host_type = 'IPv4';\n                              return text(); },\n          \"25\",\n          { type: \"literal\", value: \"25\", description: \"\\\"25\\\"\" },\n          /^[0-5]/,\n          { type: \"class\", value: \"[0-5]\", description: \"[0-5]\" },\n          \"2\",\n          { type: \"literal\", value: \"2\", description: \"\\\"2\\\"\" },\n          /^[0-4]/,\n          { type: \"class\", value: \"[0-4]\", description: \"[0-4]\" },\n          \"1\",\n          { type: \"literal\", value: \"1\", description: \"\\\"1\\\"\" },\n          /^[1-9]/,\n          { type: \"class\", value: \"[1-9]\", description: \"[1-9]\" },\n          function(port) {\n                              port = parseInt(port.join(''));\n                              data.port = port;\n                              return port; },\n          \"transport=\",\n          { type: \"literal\", value: \"transport=\", description: \"\\\"transport=\\\"\" },\n          \"udp\",\n          { type: \"literal\", value: \"udp\", description: \"\\\"udp\\\"\" },\n          \"tcp\",\n          { type: \"literal\", value: \"tcp\", description: \"\\\"tcp\\\"\" },\n          \"sctp\",\n          { type: \"literal\", value: \"sctp\", description: \"\\\"sctp\\\"\" },\n          \"tls\",\n          { type: \"literal\", value: \"tls\", description: \"\\\"tls\\\"\" },\n          function(transport) {\n                                if(!data.uri_params) data.uri_params={};\n                                data.uri_params['transport'] = transport.toLowerCase(); },\n          \"user=\",\n          { type: \"literal\", value: \"user=\", description: \"\\\"user=\\\"\" },\n          \"phone\",\n          { type: \"literal\", value: \"phone\", description: \"\\\"phone\\\"\" },\n          \"ip\",\n          { type: \"literal\", value: \"ip\", description: \"\\\"ip\\\"\" },\n          function(user) {\n                                if(!data.uri_params) data.uri_params={};\n                                data.uri_params['user'] = user.toLowerCase(); },\n          \"method=\",\n          { type: \"literal\", value: \"method=\", description: \"\\\"method=\\\"\" },\n          function(method) {\n                                if(!data.uri_params) data.uri_params={};\n                                data.uri_params['method'] = method; },\n          \"ttl=\",\n          { type: \"literal\", value: \"ttl=\", description: \"\\\"ttl=\\\"\" },\n          function(ttl) {\n                                if(!data.params) data.params={};\n                                data.params['ttl'] = ttl; },\n          \"maddr=\",\n          { type: \"literal\", value: \"maddr=\", description: \"\\\"maddr=\\\"\" },\n          function(maddr) {\n                                if(!data.uri_params) data.uri_params={};\n                                data.uri_params['maddr'] = maddr; },\n          \"lr\",\n          { type: \"literal\", value: \"lr\", description: \"\\\"lr\\\"\" },\n          function() {\n                                if(!data.uri_params) data.uri_params={};\n                                data.uri_params['lr'] = undefined; },\n          function(param, value) {\n                                if(!data.uri_params) data.uri_params = {};\n                                if (value === null){\n                                  value = undefined;\n                                }\n                                else {\n                                  value = value[1];\n                                }\n                                data.uri_params[param.toLowerCase()] = value && value.toLowerCase();},\n          function(pname) {return pname.join(''); },\n          function(pvalue) {return pvalue.join(''); },\n          function(hname, hvalue) {\n                                hname = hname.join('').toLowerCase();\n                                hvalue = hvalue.join('');\n                                if(!data.uri_headers) data.uri_headers = {};\n                                if (!data.uri_headers[hname]) {\n                                  data.uri_headers[hname] = [hvalue];\n                                } else {\n                                  data.uri_headers[hname].push(hvalue);\n                                }},\n          function() {\n                                // lots of tests fail if this isn't guarded...\n                                if (options.startRule === 'Refer_To') {\n                                  data.uri = new SIP.URI(data.scheme, data.user, data.host, data.port, data.uri_params, data.uri_headers);\n                                  delete data.scheme;\n                                  delete data.user;\n                                  delete data.host;\n                                  delete data.host_type;\n                                  delete data.port;\n                                  delete data.uri_params;\n                                }\n                              },\n          \"//\",\n          { type: \"literal\", value: \"//\", description: \"\\\"//\\\"\" },\n          function() {\n                              data.scheme= text(); },\n          { type: \"literal\", value: \"SIP\", description: \"\\\"SIP\\\"\" },\n          function() {\n                              data.sip_version = text(); },\n          \"INVITE\",\n          { type: \"literal\", value: \"INVITE\", description: \"\\\"INVITE\\\"\" },\n          \"ACK\",\n          { type: \"literal\", value: \"ACK\", description: \"\\\"ACK\\\"\" },\n          \"VXACH\",\n          { type: \"literal\", value: \"VXACH\", description: \"\\\"VXACH\\\"\" },\n          \"OPTIONS\",\n          { type: \"literal\", value: \"OPTIONS\", description: \"\\\"OPTIONS\\\"\" },\n          \"BYE\",\n          { type: \"literal\", value: \"BYE\", description: \"\\\"BYE\\\"\" },\n          \"CANCEL\",\n          { type: \"literal\", value: \"CANCEL\", description: \"\\\"CANCEL\\\"\" },\n          \"REGISTER\",\n          { type: \"literal\", value: \"REGISTER\", description: \"\\\"REGISTER\\\"\" },\n          \"SUBSCRIBE\",\n          { type: \"literal\", value: \"SUBSCRIBE\", description: \"\\\"SUBSCRIBE\\\"\" },\n          \"NOTIFY\",\n          { type: \"literal\", value: \"NOTIFY\", description: \"\\\"NOTIFY\\\"\" },\n          \"REFER\",\n          { type: \"literal\", value: \"REFER\", description: \"\\\"REFER\\\"\" },\n          function() {\n\n                              data.method = text();\n                              return data.method; },\n          function(status_code) {\n                            data.status_code = parseInt(status_code.join('')); },\n          function() {\n                            data.reason_phrase = text(); },\n          function() {\n                        data = text(); },\n          function() {\n                                  var idx, length;\n                                  length = data.multi_header.length;\n                                  for (idx = 0; idx < length; idx++) {\n                                    if (data.multi_header[idx].parsed === null) {\n                                      data = null;\n                                      break;\n                                    }\n                                  }\n                                  if (data !== null) {\n                                    data = data.multi_header;\n                                  } else {\n                                    data = -1;\n                                  }},\n          function() {\n                                  var header;\n                                  if(!data.multi_header) data.multi_header = [];\n                                  try {\n                                    header = new SIP.NameAddrHeader(data.uri, data.displayName, data.params);\n                                    delete data.uri;\n                                    delete data.displayName;\n                                    delete data.params;\n                                  } catch(e) {\n                                    header = null;\n                                  }\n                                  data.multi_header.push( { 'position': peg$currPos,\n                                                            'offset': offset(),\n                                                            'parsed': header\n                                                          });},\n          function(displayName) {\n                                  displayName = text().trim();\n                                  if (displayName[0] === '\\\"') {\n                                    displayName = displayName.substring(1, displayName.length-1);\n                                  }\n                                  data.displayName = displayName; },\n          \"q\",\n          { type: \"literal\", value: \"q\", description: \"\\\"q\\\"\" },\n          function(q) {\n                                  if(!data.params) data.params = {};\n                                  data.params['q'] = q; },\n          \"expires\",\n          { type: \"literal\", value: \"expires\", description: \"\\\"expires\\\"\" },\n          function(expires) {\n                                  if(!data.params) data.params = {};\n                                  data.params['expires'] = expires; },\n          function(delta_seconds) {\n                                  return parseInt(delta_seconds.join('')); },\n          \"0\",\n          { type: \"literal\", value: \"0\", description: \"\\\"0\\\"\" },\n          function() {\n                                  return parseFloat(text()); },\n          function(param, value) {\n                                  if(!data.params) data.params = {};\n                                  if (value === null){\n                                    value = undefined;\n                                  }\n                                  else {\n                                    value = value[1];\n                                  }\n                                  data.params[param.toLowerCase()] = value;},\n          \"render\",\n          { type: \"literal\", value: \"render\", description: \"\\\"render\\\"\" },\n          \"session\",\n          { type: \"literal\", value: \"session\", description: \"\\\"session\\\"\" },\n          \"icon\",\n          { type: \"literal\", value: \"icon\", description: \"\\\"icon\\\"\" },\n          \"alert\",\n          { type: \"literal\", value: \"alert\", description: \"\\\"alert\\\"\" },\n          function() {\n                                      if (options.startRule === 'Content_Disposition') {\n                                        data.type = text().toLowerCase();\n                                      }\n                                    },\n          \"handling\",\n          { type: \"literal\", value: \"handling\", description: \"\\\"handling\\\"\" },\n          \"optional\",\n          { type: \"literal\", value: \"optional\", description: \"\\\"optional\\\"\" },\n          \"required\",\n          { type: \"literal\", value: \"required\", description: \"\\\"required\\\"\" },\n          function(length) {\n                                  data = parseInt(length.join('')); },\n          function() {\n                                  data = text(); },\n          \"text\",\n          { type: \"literal\", value: \"text\", description: \"\\\"text\\\"\" },\n          \"image\",\n          { type: \"literal\", value: \"image\", description: \"\\\"image\\\"\" },\n          \"audio\",\n          { type: \"literal\", value: \"audio\", description: \"\\\"audio\\\"\" },\n          \"video\",\n          { type: \"literal\", value: \"video\", description: \"\\\"video\\\"\" },\n          \"application\",\n          { type: \"literal\", value: \"application\", description: \"\\\"application\\\"\" },\n          \"message\",\n          { type: \"literal\", value: \"message\", description: \"\\\"message\\\"\" },\n          \"multipart\",\n          { type: \"literal\", value: \"multipart\", description: \"\\\"multipart\\\"\" },\n          \"x-\",\n          { type: \"literal\", value: \"x-\", description: \"\\\"x-\\\"\" },\n          function(cseq_value) {\n                            data.value=parseInt(cseq_value.join('')); },\n          function(expires) {data = expires; },\n          function(event_type) {\n                                 data.event = event_type.toLowerCase(); },\n          function() {\n                          var tag = data.tag;\n                            data = new SIP.NameAddrHeader(data.uri, data.displayName, data.params);\n                            if (tag) {data.setParam('tag',tag)}\n                          },\n          \"tag\",\n          { type: \"literal\", value: \"tag\", description: \"\\\"tag\\\"\" },\n          function(tag) {data.tag = tag; },\n          function(forwards) {\n                            data = parseInt(forwards.join('')); },\n          function(min_expires) {data = min_expires; },\n          function() {\n                                  data = new SIP.NameAddrHeader(data.uri, data.displayName, data.params);\n                                },\n          \"digest\",\n          { type: \"literal\", value: \"Digest\", description: \"\\\"Digest\\\"\" },\n          \"realm\",\n          { type: \"literal\", value: \"realm\", description: \"\\\"realm\\\"\" },\n          function(realm) { data.realm = realm; },\n          \"domain\",\n          { type: \"literal\", value: \"domain\", description: \"\\\"domain\\\"\" },\n          \"nonce\",\n          { type: \"literal\", value: \"nonce\", description: \"\\\"nonce\\\"\" },\n          function(nonce) { data.nonce=nonce; },\n          \"opaque\",\n          { type: \"literal\", value: \"opaque\", description: \"\\\"opaque\\\"\" },\n          function(opaque) { data.opaque=opaque; },\n          \"stale\",\n          { type: \"literal\", value: \"stale\", description: \"\\\"stale\\\"\" },\n          \"true\",\n          { type: \"literal\", value: \"true\", description: \"\\\"true\\\"\" },\n          function() { data.stale=true; },\n          \"false\",\n          { type: \"literal\", value: \"false\", description: \"\\\"false\\\"\" },\n          function() { data.stale=false; },\n          \"algorithm\",\n          { type: \"literal\", value: \"algorithm\", description: \"\\\"algorithm\\\"\" },\n          \"md5\",\n          { type: \"literal\", value: \"MD5\", description: \"\\\"MD5\\\"\" },\n          \"md5-sess\",\n          { type: \"literal\", value: \"MD5-sess\", description: \"\\\"MD5-sess\\\"\" },\n          function(algorithm) {\n                                data.algorithm=algorithm.toUpperCase(); },\n          \"qop\",\n          { type: \"literal\", value: \"qop\", description: \"\\\"qop\\\"\" },\n          \"auth-int\",\n          { type: \"literal\", value: \"auth-int\", description: \"\\\"auth-int\\\"\" },\n          \"auth\",\n          { type: \"literal\", value: \"auth\", description: \"\\\"auth\\\"\" },\n          function(qop_value) {\n                                  data.qop || (data.qop=[]);\n                                  data.qop.push(qop_value.toLowerCase()); },\n          function(rack_value) {\n                            data.value=parseInt(rack_value.join('')); },\n          function() {\n                            var idx, length;\n                            length = data.multi_header.length;\n                            for (idx = 0; idx < length; idx++) {\n                              if (data.multi_header[idx].parsed === null) {\n                                data = null;\n                                break;\n                              }\n                            }\n                            if (data !== null) {\n                              data = data.multi_header;\n                            } else {\n                              data = -1;\n                            }},\n          function() {\n                            var header;\n                            if(!data.multi_header) data.multi_header = [];\n                            try {\n                              header = new SIP.NameAddrHeader(data.uri, data.displayName, data.params);\n                              delete data.uri;\n                              delete data.displayName;\n                              delete data.params;\n                            } catch(e) {\n                              header = null;\n                            }\n                            data.multi_header.push( { 'position': peg$currPos,\n                                                      'offset': offset(),\n                                                      'parsed': header\n                                                    });},\n          function() {\n                        data = new SIP.NameAddrHeader(data.uri, data.displayName, data.params);\n                      },\n          function(rseq_value) {\n                            data.value=parseInt(rseq_value.join('')); },\n          \"active\",\n          { type: \"literal\", value: \"active\", description: \"\\\"active\\\"\" },\n          \"pending\",\n          { type: \"literal\", value: \"pending\", description: \"\\\"pending\\\"\" },\n          \"terminated\",\n          { type: \"literal\", value: \"terminated\", description: \"\\\"terminated\\\"\" },\n          function() {\n                                  data.state = text(); },\n          \"reason\",\n          { type: \"literal\", value: \"reason\", description: \"\\\"reason\\\"\" },\n          function(reason) {\n                                  if (typeof reason !== 'undefined') data.reason = reason; },\n          function(expires) {\n                                  if (typeof expires !== 'undefined') data.expires = expires; },\n          \"retry_after\",\n          { type: \"literal\", value: \"retry_after\", description: \"\\\"retry_after\\\"\" },\n          function(retry_after) {\n                                  if (typeof retry_after !== 'undefined') data.retry_after = retry_after; },\n          \"deactivated\",\n          { type: \"literal\", value: \"deactivated\", description: \"\\\"deactivated\\\"\" },\n          \"probation\",\n          { type: \"literal\", value: \"probation\", description: \"\\\"probation\\\"\" },\n          \"rejected\",\n          { type: \"literal\", value: \"rejected\", description: \"\\\"rejected\\\"\" },\n          \"timeout\",\n          { type: \"literal\", value: \"timeout\", description: \"\\\"timeout\\\"\" },\n          \"giveup\",\n          { type: \"literal\", value: \"giveup\", description: \"\\\"giveup\\\"\" },\n          \"noresource\",\n          { type: \"literal\", value: \"noresource\", description: \"\\\"noresource\\\"\" },\n          \"invariant\",\n          { type: \"literal\", value: \"invariant\", description: \"\\\"invariant\\\"\" },\n          function() {\n                        var tag = data.tag;\n                          data = new SIP.NameAddrHeader(data.uri, data.displayName, data.params);\n                          if (tag) {data.setParam('tag',tag)}\n                        },\n          \"ttl\",\n          { type: \"literal\", value: \"ttl\", description: \"\\\"ttl\\\"\" },\n          function(via_ttl_value) {\n                                data.ttl = via_ttl_value; },\n          \"maddr\",\n          { type: \"literal\", value: \"maddr\", description: \"\\\"maddr\\\"\" },\n          function(via_maddr) {\n                                data.maddr = via_maddr; },\n          \"received\",\n          { type: \"literal\", value: \"received\", description: \"\\\"received\\\"\" },\n          function(via_received) {\n                                data.received = via_received; },\n          \"branch\",\n          { type: \"literal\", value: \"branch\", description: \"\\\"branch\\\"\" },\n          function(via_branch) {\n                                data.branch = via_branch; },\n          \"rport\",\n          { type: \"literal\", value: \"rport\", description: \"\\\"rport\\\"\" },\n          function() {\n                                if(typeof response_port !== 'undefined')\n                                  data.rport = response_port.join(''); },\n          function(via_protocol) {\n                                data.protocol = via_protocol; },\n          { type: \"literal\", value: \"UDP\", description: \"\\\"UDP\\\"\" },\n          { type: \"literal\", value: \"TCP\", description: \"\\\"TCP\\\"\" },\n          { type: \"literal\", value: \"TLS\", description: \"\\\"TLS\\\"\" },\n          { type: \"literal\", value: \"SCTP\", description: \"\\\"SCTP\\\"\" },\n          function(via_transport) {\n                                data.transport = via_transport; },\n          function() {\n                                data.host = text(); },\n          function(via_sent_by_port) {\n                                data.port = parseInt(via_sent_by_port.join('')); },\n          function(ttl) {\n                                return parseInt(ttl.join('')); },\n          \"stuns\",\n          { type: \"literal\", value: \"stuns\", description: \"\\\"stuns\\\"\" },\n          \"stun\",\n          { type: \"literal\", value: \"stun\", description: \"\\\"stun\\\"\" },\n          function(scheme) {\n                                data.scheme = scheme; },\n          function(host) {\n                                data.host = host; },\n          function() {\n                                return text(); },\n          \"?transport=\",\n          { type: \"literal\", value: \"?transport=\", description: \"\\\"?transport=\\\"\" },\n          \"turns\",\n          { type: \"literal\", value: \"turns\", description: \"\\\"turns\\\"\" },\n          \"turn\",\n          { type: \"literal\", value: \"turn\", description: \"\\\"turn\\\"\" },\n          function() {\n                                data.transport = transport; },\n          function() {\n                            data = text(); }\n        ],\n\n        peg$bytecode = [\n          peg$decode(\". \\\"\\\"2 3!\"),\n          peg$decode(\"0\\\"\\\"\\\"1!3#\"),\n          peg$decode(\"0$\\\"\\\"1!3%\"),\n          peg$decode(\"0&\\\"\\\"1!3'\"),\n          peg$decode(\"7'*# \\\"7(\"),\n          peg$decode(\"0(\\\"\\\"1!3)\"),\n          peg$decode(\"0*\\\"\\\"1!3+\"),\n          peg$decode(\".,\\\"\\\"2,3-\"),\n          peg$decode(\"..\\\"\\\"2.3/\"),\n          peg$decode(\"00\\\"\\\"1!31\"),\n          peg$decode(\".2\\\"\\\"2233*\\x89 \\\".4\\\"\\\"2435*} \\\".6\\\"\\\"2637*q \\\".8\\\"\\\"2839*e \\\".:\\\"\\\"2:3;*Y \\\".<\\\"\\\"2<3=*M \\\".>\\\"\\\"2>3?*A \\\".@\\\"\\\"2@3A*5 \\\".B\\\"\\\"2B3C*) \\\".D\\\"\\\"2D3E\"),\n          peg$decode(\"7)*# \\\"7,\"),\n          peg$decode(\".F\\\"\\\"2F3G*} \\\".H\\\"\\\"2H3I*q \\\".J\\\"\\\"2J3K*e \\\".L\\\"\\\"2L3M*Y \\\".N\\\"\\\"2N3O*M \\\".P\\\"\\\"2P3Q*A \\\".R\\\"\\\"2R3S*5 \\\".T\\\"\\\"2T3U*) \\\".V\\\"\\\"2V3W\"),\n          peg$decode(\"!!.Y\\\"\\\"2Y3Z+7$7#+-%7#+#%'#%$## X$\\\"# X\\\"# X+' 4!6[!! %\"),\n          peg$decode(\"!! ]7$,#&7$\\\"+-$7 +#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\+@$ ]7$+&$,#&7$\\\"\\\"\\\" X+'%4\\\"6^\\\" %$\\\"# X\\\"# X\"),\n          peg$decode(\"7.*# \\\" \\\\\"),\n          peg$decode(\"! ]7'*# \\\"7(,)&7'*# \\\"7(\\\"+A$.8\\\"\\\"2839+1%7/+'%4#6_# %$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"! ]72+&$,#&72\\\"\\\"\\\" X+s$ ]! ]7.,#&7.\\\"+-$72+#%'\\\"%$\\\"# X\\\"# X,@&! ]7.,#&7.\\\"+-$72+#%'\\\"%$\\\"# X\\\"# X\\\"+'%4\\\"6`\\\" %$\\\"# X\\\"# X\"),\n          peg$decode(\"0a\\\"\\\"1!3b*# \\\"73\"),\n          peg$decode(\"0c\\\"\\\"1!3d\"),\n          peg$decode(\"0e\\\"\\\"1!3f\"),\n          peg$decode(\"7!*) \\\"0g\\\"\\\"1!3h\"),\n          peg$decode(\"! ]7)*\\x95 \\\".F\\\"\\\"2F3G*\\x89 \\\".J\\\"\\\"2J3K*} \\\".L\\\"\\\"2L3M*q \\\".Y\\\"\\\"2Y3Z*e \\\".P\\\"\\\"2P3Q*Y \\\".H\\\"\\\"2H3I*M \\\".@\\\"\\\"2@3A*A \\\".i\\\"\\\"2i3j*5 \\\".R\\\"\\\"2R3S*) \\\".N\\\"\\\"2N3O+\\x9E$,\\x9B&7)*\\x95 \\\".F\\\"\\\"2F3G*\\x89 \\\".J\\\"\\\"2J3K*} \\\".L\\\"\\\"2L3M*q \\\".Y\\\"\\\"2Y3Z*e \\\".P\\\"\\\"2P3Q*Y \\\".H\\\"\\\"2H3I*M \\\".@\\\"\\\"2@3A*A \\\".i\\\"\\\"2i3j*5 \\\".R\\\"\\\"2R3S*) \\\".N\\\"\\\"2N3O\\\"\\\"\\\" X+& 4!6k! %\"),\n          peg$decode(\"! ]7)*\\x89 \\\".F\\\"\\\"2F3G*} \\\".L\\\"\\\"2L3M*q \\\".Y\\\"\\\"2Y3Z*e \\\".P\\\"\\\"2P3Q*Y \\\".H\\\"\\\"2H3I*M \\\".@\\\"\\\"2@3A*A \\\".i\\\"\\\"2i3j*5 \\\".R\\\"\\\"2R3S*) \\\".N\\\"\\\"2N3O+\\x92$,\\x8F&7)*\\x89 \\\".F\\\"\\\"2F3G*} \\\".L\\\"\\\"2L3M*q \\\".Y\\\"\\\"2Y3Z*e \\\".P\\\"\\\"2P3Q*Y \\\".H\\\"\\\"2H3I*M \\\".@\\\"\\\"2@3A*A \\\".i\\\"\\\"2i3j*5 \\\".R\\\"\\\"2R3S*) \\\".N\\\"\\\"2N3O\\\"\\\"\\\" X+& 4!6k! %\"),\n          peg$decode(\".T\\\"\\\"2T3U*\\xE3 \\\".V\\\"\\\"2V3W*\\xD7 \\\".l\\\"\\\"2l3m*\\xCB \\\".n\\\"\\\"2n3o*\\xBF \\\".:\\\"\\\"2:3;*\\xB3 \\\".D\\\"\\\"2D3E*\\xA7 \\\".2\\\"\\\"2233*\\x9B \\\".8\\\"\\\"2839*\\x8F \\\".p\\\"\\\"2p3q*\\x83 \\\"7&*} \\\".4\\\"\\\"2435*q \\\".r\\\"\\\"2r3s*e \\\".t\\\"\\\"2t3u*Y \\\".6\\\"\\\"2637*M \\\".>\\\"\\\"2>3?*A \\\".v\\\"\\\"2v3w*5 \\\".x\\\"\\\"2x3y*) \\\"7'*# \\\"7(\"),\n          peg$decode(\"! ]7)*\\u012B \\\".F\\\"\\\"2F3G*\\u011F \\\".J\\\"\\\"2J3K*\\u0113 \\\".L\\\"\\\"2L3M*\\u0107 \\\".Y\\\"\\\"2Y3Z*\\xFB \\\".P\\\"\\\"2P3Q*\\xEF \\\".H\\\"\\\"2H3I*\\xE3 \\\".@\\\"\\\"2@3A*\\xD7 \\\".i\\\"\\\"2i3j*\\xCB \\\".R\\\"\\\"2R3S*\\xBF \\\".N\\\"\\\"2N3O*\\xB3 \\\".T\\\"\\\"2T3U*\\xA7 \\\".V\\\"\\\"2V3W*\\x9B \\\".l\\\"\\\"2l3m*\\x8F \\\".n\\\"\\\"2n3o*\\x83 \\\".8\\\"\\\"2839*w \\\".p\\\"\\\"2p3q*k \\\"7&*e \\\".4\\\"\\\"2435*Y \\\".r\\\"\\\"2r3s*M \\\".t\\\"\\\"2t3u*A \\\".6\\\"\\\"2637*5 \\\".v\\\"\\\"2v3w*) \\\".x\\\"\\\"2x3y+\\u0134$,\\u0131&7)*\\u012B \\\".F\\\"\\\"2F3G*\\u011F \\\".J\\\"\\\"2J3K*\\u0113 \\\".L\\\"\\\"2L3M*\\u0107 \\\".Y\\\"\\\"2Y3Z*\\xFB \\\".P\\\"\\\"2P3Q*\\xEF \\\".H\\\"\\\"2H3I*\\xE3 \\\".@\\\"\\\"2@3A*\\xD7 \\\".i\\\"\\\"2i3j*\\xCB \\\".R\\\"\\\"2R3S*\\xBF \\\".N\\\"\\\"2N3O*\\xB3 \\\".T\\\"\\\"2T3U*\\xA7 \\\".V\\\"\\\"2V3W*\\x9B \\\".l\\\"\\\"2l3m*\\x8F \\\".n\\\"\\\"2n3o*\\x83 \\\".8\\\"\\\"2839*w \\\".p\\\"\\\"2p3q*k \\\"7&*e \\\".4\\\"\\\"2435*Y \\\".r\\\"\\\"2r3s*M \\\".t\\\"\\\"2t3u*A \\\".6\\\"\\\"2637*5 \\\".v\\\"\\\"2v3w*) \\\".x\\\"\\\"2x3y\\\"\\\"\\\" X+& 4!6k! %\"),\n          peg$decode(\"!7/+A$.P\\\"\\\"2P3Q+1%7/+'%4#6z# %$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!7/+A$.4\\\"\\\"2435+1%7/+'%4#6{# %$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!7/+A$.>\\\"\\\"2>3?+1%7/+'%4#6|# %$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!7/+A$.T\\\"\\\"2T3U+1%7/+'%4#6}# %$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!7/+A$.V\\\"\\\"2V3W+1%7/+'%4#6~# %$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!.n\\\"\\\"2n3o+1$7/+'%4\\\"6\\\" %$\\\"# X\\\"# X\"),\n          peg$decode(\"!7/+7$.l\\\"\\\"2l3m+'%4\\\"6\\x80\\\" %$\\\"# X\\\"# X\"),\n          peg$decode(\"!7/+A$.D\\\"\\\"2D3E+1%7/+'%4#6\\x81# %$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!7/+A$.2\\\"\\\"2233+1%7/+'%4#6\\x82# %$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!7/+A$.8\\\"\\\"2839+1%7/+'%4#6\\x83# %$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!7/+1$7&+'%4\\\"6\\x84\\\" %$\\\"# X\\\"# X\"),\n          peg$decode(\"!7&+1$7/+'%4\\\"6\\x84\\\" %$\\\"# X\\\"# X\"),\n          peg$decode(\"!7=+W$ ]7G*) \\\"7K*# \\\"7F,/&7G*) \\\"7K*# \\\"7F\\\"+-%7>+#%'#%$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"0\\x85\\\"\\\"1!3\\x86*A \\\"0\\x87\\\"\\\"1!3\\x88*5 \\\"0\\x89\\\"\\\"1!3\\x8A*) \\\"73*# \\\"7.\"),\n          peg$decode(\"!7/+Y$7&+O% ]7J*# \\\"7K,)&7J*# \\\"7K\\\"+1%7&+'%4$6k$ %$$# X$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!7/+`$7&+V%! ]7J*# \\\"7K,)&7J*# \\\"7K\\\"+! (%+2%7&+(%4$6\\x8B$!!%$$# X$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"7.*G \\\".L\\\"\\\"2L3M*; \\\"0\\x8C\\\"\\\"1!3\\x8D*/ \\\"0\\x89\\\"\\\"1!3\\x8A*# \\\"73\"),\n          peg$decode(\"!.p\\\"\\\"2p3q+K$0\\x8E\\\"\\\"1!3\\x8F*5 \\\"0\\x90\\\"\\\"1!3\\x91*) \\\"0\\x92\\\"\\\"1!3\\x93+#%'\\\"%$\\\"# X\\\"# X\"),\n          peg$decode(\"!7N+Q$.8\\\"\\\"2839+A%7O*# \\\" \\\\+1%7S+'%4$6\\x94$ %$$# X$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!7N+k$.8\\\"\\\"2839+[%7O*# \\\" \\\\+K%7S+A%7_+7%7l*# \\\" \\\\+'%4&6\\x95& %$&# X$%# X$$# X$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!/\\x96\\\"\\\"1$3\\x97*) \\\"/\\x98\\\"\\\"1#3\\x99+' 4!6\\x9A!! %\"),\n          peg$decode(\"!7P+b$!.8\\\"\\\"2839+-$7R+#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\+7%.:\\\"\\\"2:3;+'%4#6\\x9B# %$## X$\\\"# X\\\"# X\"),\n          peg$decode(\" ]7+*) \\\"7-*# \\\"7Q+2$,/&7+*) \\\"7-*# \\\"7Q\\\"\\\"\\\" X\"),\n          peg$decode(\".<\\\"\\\"2<3=*q \\\".>\\\"\\\"2>3?*e \\\".@\\\"\\\"2@3A*Y \\\".B\\\"\\\"2B3C*M \\\".D\\\"\\\"2D3E*A \\\".2\\\"\\\"2233*5 \\\".6\\\"\\\"2637*) \\\".4\\\"\\\"2435\"),\n          peg$decode(\"! ]7+*_ \\\"7-*Y \\\".<\\\"\\\"2<3=*M \\\".>\\\"\\\"2>3?*A \\\".@\\\"\\\"2@3A*5 \\\".B\\\"\\\"2B3C*) \\\".D\\\"\\\"2D3E,e&7+*_ \\\"7-*Y \\\".<\\\"\\\"2<3=*M \\\".>\\\"\\\"2>3?*A \\\".@\\\"\\\"2@3A*5 \\\".B\\\"\\\"2B3C*) \\\".D\\\"\\\"2D3E\\\"+& 4!6\\x9C! %\"),\n          peg$decode(\"!7T+N$!.8\\\"\\\"2839+-$7^+#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\+#%'\\\"%$\\\"# X\\\"# X\"),\n          peg$decode(\"!7U*) \\\"7\\\\*# \\\"7X+& 4!6\\x9D! %\"),\n          peg$decode(\"! ]!7V+3$.J\\\"\\\"2J3K+#%'\\\"%$\\\"# X\\\"# X,>&!7V+3$.J\\\"\\\"2J3K+#%'\\\"%$\\\"# X\\\"# X\\\"+G$7W+=%.J\\\"\\\"2J3K*# \\\" \\\\+'%4#6\\x9E# %$## X$\\\"# X\\\"# X\"),\n          peg$decode(\" ]0\\x9F\\\"\\\"1!3\\xA0+,$,)&0\\x9F\\\"\\\"1!3\\xA0\\\"\\\"\\\" X\"),\n          peg$decode(\"!0$\\\"\\\"1!3%+A$ ]0\\xA1\\\"\\\"1!3\\xA2,)&0\\xA1\\\"\\\"1!3\\xA2\\\"+#%'\\\"%$\\\"# X\\\"# X\"),\n          peg$decode(\"!.r\\\"\\\"2r3s+A$7Y+7%.t\\\"\\\"2t3u+'%4#6\\xA3# %$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!!7Z+\\xBF$.8\\\"\\\"2839+\\xAF%7Z+\\xA5%.8\\\"\\\"2839+\\x95%7Z+\\x8B%.8\\\"\\\"2839+{%7Z+q%.8\\\"\\\"2839+a%7Z+W%.8\\\"\\\"2839+G%7Z+=%.8\\\"\\\"2839+-%7[+#%'-%$-# X$,# X$+# X$*# X$)# X$(# X$'# X$&# X$%# X$$# X$## X$\\\"# X\\\"# X*\\u0838 \\\"!.\\xA4\\\"\\\"2\\xA43\\xA5+\\xAF$7Z+\\xA5%.8\\\"\\\"2839+\\x95%7Z+\\x8B%.8\\\"\\\"2839+{%7Z+q%.8\\\"\\\"2839+a%7Z+W%.8\\\"\\\"2839+G%7Z+=%.8\\\"\\\"2839+-%7[+#%',%$,# X$+# X$*# X$)# X$(# X$'# X$&# X$%# X$$# X$## X$\\\"# X\\\"# X*\\u0795 \\\"!.\\xA4\\\"\\\"2\\xA43\\xA5+\\x95$7Z+\\x8B%.8\\\"\\\"2839+{%7Z+q%.8\\\"\\\"2839+a%7Z+W%.8\\\"\\\"2839+G%7Z+=%.8\\\"\\\"2839+-%7[+#%'*%$*# X$)# X$(# X$'# X$&# X$%# X$$# X$## X$\\\"# X\\\"# X*\\u070C \\\"!.\\xA4\\\"\\\"2\\xA43\\xA5+{$7Z+q%.8\\\"\\\"2839+a%7Z+W%.8\\\"\\\"2839+G%7Z+=%.8\\\"\\\"2839+-%7[+#%'(%$(# X$'# X$&# X$%# X$$# X$## X$\\\"# X\\\"# X*\\u069D \\\"!.\\xA4\\\"\\\"2\\xA43\\xA5+a$7Z+W%.8\\\"\\\"2839+G%7Z+=%.8\\\"\\\"2839+-%7[+#%'&%$&# X$%# X$$# X$## X$\\\"# X\\\"# X*\\u0648 \\\"!.\\xA4\\\"\\\"2\\xA43\\xA5+G$7Z+=%.8\\\"\\\"2839+-%7[+#%'$%$$# X$## X$\\\"# X\\\"# X*\\u060D \\\"!.\\xA4\\\"\\\"2\\xA43\\xA5+-$7[+#%'\\\"%$\\\"# X\\\"# X*\\u05EC \\\"!.\\xA4\\\"\\\"2\\xA43\\xA5+-$7Z+#%'\\\"%$\\\"# X\\\"# X*\\u05CB \\\"!7Z+\\xA5$.\\xA4\\\"\\\"2\\xA43\\xA5+\\x95%7Z+\\x8B%.8\\\"\\\"2839+{%7Z+q%.8\\\"\\\"2839+a%7Z+W%.8\\\"\\\"2839+G%7Z+=%.8\\\"\\\"2839+-%7[+#%'+%$+# X$*# X$)# X$(# X$'# X$&# X$%# X$$# X$## X$\\\"# X\\\"# X*\\u0538 \\\"!7Z+\\xB6$!.8\\\"\\\"2839+-$7Z+#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\+\\x8B%.\\xA4\\\"\\\"2\\xA43\\xA5+{%7Z+q%.8\\\"\\\"2839+a%7Z+W%.8\\\"\\\"2839+G%7Z+=%.8\\\"\\\"2839+-%7[+#%'*%$*# X$)# X$(# X$'# X$&# X$%# X$$# X$## X$\\\"# X\\\"# X*\\u0494 \\\"!7Z+\\xC7$!.8\\\"\\\"2839+-$7Z+#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\+\\x9C%!.8\\\"\\\"2839+-$7Z+#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\+q%.\\xA4\\\"\\\"2\\xA43\\xA5+a%7Z+W%.8\\\"\\\"2839+G%7Z+=%.8\\\"\\\"2839+-%7[+#%')%$)# X$(# X$'# X$&# X$%# X$$# X$## X$\\\"# X\\\"# X*\\u03DF \\\"!7Z+\\xD8$!.8\\\"\\\"2839+-$7Z+#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\+\\xAD%!.8\\\"\\\"2839+-$7Z+#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\+\\x82%!.8\\\"\\\"2839+-$7Z+#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\+W%.\\xA4\\\"\\\"2\\xA43\\xA5+G%7Z+=%.8\\\"\\\"2839+-%7[+#%'(%$(# X$'# X$&# X$%# X$$# X$## X$\\\"# X\\\"# X*\\u0319 \\\"!7Z+\\xE9$!.8\\\"\\\"2839+-$7Z+#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\+\\xBE%!.8\\\"\\\"2839+-$7Z+#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\+\\x93%!.8\\\"\\\"2839+-$7Z+#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\+h%!.8\\\"\\\"2839+-$7Z+#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\+=%.\\xA4\\\"\\\"2\\xA43\\xA5+-%7[+#%''%$'# X$&# X$%# X$$# X$## X$\\\"# X\\\"# X*\\u0242 \\\"!7Z+\\u0114$!.8\\\"\\\"2839+-$7Z+#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\+\\xE9%!.8\\\"\\\"2839+-$7Z+#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\+\\xBE%!.8\\\"\\\"2839+-$7Z+#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\+\\x93%!.8\\\"\\\"2839+-$7Z+#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\+h%!.8\\\"\\\"2839+-$7Z+#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\+=%.\\xA4\\\"\\\"2\\xA43\\xA5+-%7Z+#%'(%$(# X$'# X$&# X$%# X$$# X$## X$\\\"# X\\\"# X*\\u0140 \\\"!7Z+\\u0135$!.8\\\"\\\"2839+-$7Z+#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\+\\u010A%!.8\\\"\\\"2839+-$7Z+#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\+\\xDF%!.8\\\"\\\"2839+-$7Z+#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\+\\xB4%!.8\\\"\\\"2839+-$7Z+#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\+\\x89%!.8\\\"\\\"2839+-$7Z+#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\+^%!.8\\\"\\\"2839+-$7Z+#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\+3%.\\xA4\\\"\\\"2\\xA43\\xA5+#%'(%$(# X$'# X$&# X$%# X$$# X$## X$\\\"# X\\\"# X+& 4!6\\xA6! %\"),\n          peg$decode(\"!7#+S$7#*# \\\" \\\\+C%7#*# \\\" \\\\+3%7#*# \\\" \\\\+#%'$%$$# X$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!7Z+=$.8\\\"\\\"2839+-%7Z+#%'#%$## X$\\\"# X\\\"# X*# \\\"7\\\\\"),\n          peg$decode(\"!7]+u$.J\\\"\\\"2J3K+e%7]+[%.J\\\"\\\"2J3K+K%7]+A%.J\\\"\\\"2J3K+1%7]+'%4'6\\xA7' %$'# X$&# X$%# X$$# X$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!.\\xA8\\\"\\\"2\\xA83\\xA9+3$0\\xAA\\\"\\\"1!3\\xAB+#%'\\\"%$\\\"# X\\\"# X*\\xA0 \\\"!.\\xAC\\\"\\\"2\\xAC3\\xAD+=$0\\xAE\\\"\\\"1!3\\xAF+-%7!+#%'#%$## X$\\\"# X\\\"# X*o \\\"!.\\xB0\\\"\\\"2\\xB03\\xB1+7$7!+-%7!+#%'#%$## X$\\\"# X\\\"# X*D \\\"!0\\xB2\\\"\\\"1!3\\xB3+-$7!+#%'\\\"%$\\\"# X\\\"# X*# \\\"7!\"),\n          peg$decode(\"!!7!*# \\\" \\\\+c$7!*# \\\" \\\\+S%7!*# \\\" \\\\+C%7!*# \\\" \\\\+3%7!*# \\\" \\\\+#%'%%$%# X$$# X$## X$\\\"# X\\\"# X+' 4!6\\xB4!! %\"),\n          peg$decode(\" ]!.2\\\"\\\"2233+-$7`+#%'\\\"%$\\\"# X\\\"# X,>&!.2\\\"\\\"2233+-$7`+#%'\\\"%$\\\"# X\\\"# X\\\"\"),\n          peg$decode(\"7a*A \\\"7b*; \\\"7c*5 \\\"7d*/ \\\"7e*) \\\"7f*# \\\"7g\"),\n          peg$decode(\"!/\\xB5\\\"\\\"1*3\\xB6+b$/\\xB7\\\"\\\"1#3\\xB8*G \\\"/\\xB9\\\"\\\"1#3\\xBA*; \\\"/\\xBB\\\"\\\"1$3\\xBC*/ \\\"/\\xBD\\\"\\\"1#3\\xBE*# \\\"76+(%4\\\"6\\xBF\\\"! %$\\\"# X\\\"# X\"),\n          peg$decode(\"!/\\xC0\\\"\\\"1%3\\xC1+J$/\\xC2\\\"\\\"1%3\\xC3*/ \\\"/\\xC4\\\"\\\"1\\\"3\\xC5*# \\\"76+(%4\\\"6\\xC6\\\"! %$\\\"# X\\\"# X\"),\n          peg$decode(\"!/\\xC7\\\"\\\"1'3\\xC8+2$7\\x8F+(%4\\\"6\\xC9\\\"! %$\\\"# X\\\"# X\"),\n          peg$decode(\"!/\\xCA\\\"\\\"1$3\\xCB+2$7\\xEC+(%4\\\"6\\xCC\\\"! %$\\\"# X\\\"# X\"),\n          peg$decode(\"!/\\xCD\\\"\\\"1&3\\xCE+2$7T+(%4\\\"6\\xCF\\\"! %$\\\"# X\\\"# X\"),\n          peg$decode(\"!/\\xD0\\\"\\\"1\\\"3\\xD1+R$!.>\\\"\\\"2>3?+-$76+#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\+'%4\\\"6\\xD2\\\" %$\\\"# X\\\"# X\"),\n          peg$decode(\"!7h+T$!.>\\\"\\\"2>3?+-$7i+#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\+)%4\\\"6\\xD3\\\"\\\"! %$\\\"# X\\\"# X\"),\n          peg$decode(\"! ]7j+&$,#&7j\\\"\\\"\\\" X+' 4!6\\xD4!! %\"),\n          peg$decode(\"! ]7j+&$,#&7j\\\"\\\"\\\" X+' 4!6\\xD5!! %\"),\n          peg$decode(\"7k*) \\\"7+*# \\\"7-\"),\n          peg$decode(\".r\\\"\\\"2r3s*e \\\".t\\\"\\\"2t3u*Y \\\".4\\\"\\\"2435*M \\\".8\\\"\\\"2839*A \\\".<\\\"\\\"2<3=*5 \\\".@\\\"\\\"2@3A*) \\\".B\\\"\\\"2B3C\"),\n          peg$decode(\"!.6\\\"\\\"2637+u$7m+k% ]!.<\\\"\\\"2<3=+-$7m+#%'\\\"%$\\\"# X\\\"# X,>&!.<\\\"\\\"2<3=+-$7m+#%'\\\"%$\\\"# X\\\"# X\\\"+#%'#%$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!7n+C$.>\\\"\\\"2>3?+3%7o+)%4#6\\xD6#\\\"\\\" %$## X$\\\"# X\\\"# X\"),\n          peg$decode(\" ]7p*) \\\"7+*# \\\"7-+2$,/&7p*) \\\"7+*# \\\"7-\\\"\\\"\\\" X\"),\n          peg$decode(\" ]7p*) \\\"7+*# \\\"7-,/&7p*) \\\"7+*# \\\"7-\\\"\"),\n          peg$decode(\".r\\\"\\\"2r3s*e \\\".t\\\"\\\"2t3u*Y \\\".4\\\"\\\"2435*M \\\".6\\\"\\\"2637*A \\\".8\\\"\\\"2839*5 \\\".@\\\"\\\"2@3A*) \\\".B\\\"\\\"2B3C\"),\n          peg$decode(\"7\\x90*# \\\"7r\"),\n          peg$decode(\"!7\\x8F+K$7'+A%7s+7%7'+-%7\\x84+#%'%%$%# X$$# X$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"7M*# \\\"7t\"),\n          peg$decode(\"!7+G$.8\\\"\\\"2839+7%7u*# \\\"7x+'%4#6\\xD7# %$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!7v*# \\\"7w+N$!.6\\\"\\\"2637+-$7\\x83+#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\+#%'\\\"%$\\\"# X\\\"# X\"),\n          peg$decode(\"!.\\xD8\\\"\\\"2\\xD83\\xD9+=$7\\x80+3%7w*# \\\" \\\\+#%'#%$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!.4\\\"\\\"2435+-$7{+#%'\\\"%$\\\"# X\\\"# X\"),\n          peg$decode(\"!7z+5$ ]7y,#&7y\\\"+#%'\\\"%$\\\"# X\\\"# X\"),\n          peg$decode(\"7**) \\\"7+*# \\\"7-\"),\n          peg$decode(\"7+*\\x8F \\\"7-*\\x89 \\\".2\\\"\\\"2233*} \\\".6\\\"\\\"2637*q \\\".8\\\"\\\"2839*e \\\".:\\\"\\\"2:3;*Y \\\".<\\\"\\\"2<3=*M \\\".>\\\"\\\"2>3?*A \\\".@\\\"\\\"2@3A*5 \\\".B\\\"\\\"2B3C*) \\\".D\\\"\\\"2D3E\"),\n          peg$decode(\"!7|+k$ ]!.4\\\"\\\"2435+-$7|+#%'\\\"%$\\\"# X\\\"# X,>&!.4\\\"\\\"2435+-$7|+#%'\\\"%$\\\"# X\\\"# X\\\"+#%'\\\"%$\\\"# X\\\"# X\"),\n          peg$decode(\"! ]7~,#&7~\\\"+k$ ]!.2\\\"\\\"2233+-$7}+#%'\\\"%$\\\"# X\\\"# X,>&!.2\\\"\\\"2233+-$7}+#%'\\\"%$\\\"# X\\\"# X\\\"+#%'\\\"%$\\\"# X\\\"# X\"),\n          peg$decode(\" ]7~,#&7~\\\"\"),\n          peg$decode(\"7+*w \\\"7-*q \\\".8\\\"\\\"2839*e \\\".:\\\"\\\"2:3;*Y \\\".<\\\"\\\"2<3=*M \\\".>\\\"\\\"2>3?*A \\\".@\\\"\\\"2@3A*5 \\\".B\\\"\\\"2B3C*) \\\".D\\\"\\\"2D3E\"),\n          peg$decode(\"!7\\\"+\\x8D$ ]7\\\"*G \\\"7!*A \\\".@\\\"\\\"2@3A*5 \\\".F\\\"\\\"2F3G*) \\\".J\\\"\\\"2J3K,M&7\\\"*G \\\"7!*A \\\".@\\\"\\\"2@3A*5 \\\".F\\\"\\\"2F3G*) \\\".J\\\"\\\"2J3K\\\"+'%4\\\"6\\xDA\\\" %$\\\"# X\\\"# X\"),\n          peg$decode(\"7\\x81*# \\\"7\\x82\"),\n          peg$decode(\"!!7O+3$.:\\\"\\\"2:3;+#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\+-$7S+#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\\"),\n          peg$decode(\" ]7+*\\x83 \\\"7-*} \\\".B\\\"\\\"2B3C*q \\\".D\\\"\\\"2D3E*e \\\".2\\\"\\\"2233*Y \\\".8\\\"\\\"2839*M \\\".:\\\"\\\"2:3;*A \\\".<\\\"\\\"2<3=*5 \\\".>\\\"\\\"2>3?*) \\\".@\\\"\\\"2@3A+\\x8C$,\\x89&7+*\\x83 \\\"7-*} \\\".B\\\"\\\"2B3C*q \\\".D\\\"\\\"2D3E*e \\\".2\\\"\\\"2233*Y \\\".8\\\"\\\"2839*M \\\".:\\\"\\\"2:3;*A \\\".<\\\"\\\"2<3=*5 \\\".>\\\"\\\"2>3?*) \\\".@\\\"\\\"2@3A\\\"\\\"\\\" X\"),\n          peg$decode(\" ]7y,#&7y\\\"\"),\n          peg$decode(\"!/\\x98\\\"\\\"1#3\\xDB+y$.4\\\"\\\"2435+i% ]7!+&$,#&7!\\\"\\\"\\\" X+P%.J\\\"\\\"2J3K+@% ]7!+&$,#&7!\\\"\\\"\\\" X+'%4%6\\xDC% %$%# X$$# X$## X$\\\"# X\\\"# X\"),\n          peg$decode(\".\\xDD\\\"\\\"2\\xDD3\\xDE\"),\n          peg$decode(\".\\xDF\\\"\\\"2\\xDF3\\xE0\"),\n          peg$decode(\".\\xE1\\\"\\\"2\\xE13\\xE2\"),\n          peg$decode(\".\\xE3\\\"\\\"2\\xE33\\xE4\"),\n          peg$decode(\".\\xE5\\\"\\\"2\\xE53\\xE6\"),\n          peg$decode(\".\\xE7\\\"\\\"2\\xE73\\xE8\"),\n          peg$decode(\".\\xE9\\\"\\\"2\\xE93\\xEA\"),\n          peg$decode(\".\\xEB\\\"\\\"2\\xEB3\\xEC\"),\n          peg$decode(\".\\xED\\\"\\\"2\\xED3\\xEE\"),\n          peg$decode(\".\\xEF\\\"\\\"2\\xEF3\\xF0\"),\n          peg$decode(\"!7\\x85*S \\\"7\\x86*M \\\"7\\x88*G \\\"7\\x89*A \\\"7\\x8A*; \\\"7\\x8B*5 \\\"7\\x8C*/ \\\"7\\x8D*) \\\"7\\x8E*# \\\"76+& 4!6\\xF1! %\"),\n          peg$decode(\"!7\\x84+K$7'+A%7\\x91+7%7'+-%7\\x93+#%'%%$%# X$$# X$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!7\\x92+' 4!6\\xF2!! %\"),\n          peg$decode(\"!7!+7$7!+-%7!+#%'#%$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"! ]7**A \\\"7+*; \\\"7-*5 \\\"73*/ \\\"74*) \\\"7'*# \\\"7(,G&7**A \\\"7+*; \\\"7-*5 \\\"73*/ \\\"74*) \\\"7'*# \\\"7(\\\"+& 4!6\\xF3! %\"),\n          peg$decode(\"!7\\xB5+_$ ]!7A+-$7\\xB5+#%'\\\"%$\\\"# X\\\"# X,8&!7A+-$7\\xB5+#%'\\\"%$\\\"# X\\\"# X\\\"+#%'\\\"%$\\\"# X\\\"# X\"),\n          peg$decode(\"!79+R$!.:\\\"\\\"2:3;+-$79+#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\+'%4\\\"6\\xF4\\\" %$\\\"# X\\\"# X\"),\n          peg$decode(\"!7:*j \\\"!7\\x97+_$ ]!7A+-$7\\x97+#%'\\\"%$\\\"# X\\\"# X,8&!7A+-$7\\x97+#%'\\\"%$\\\"# X\\\"# X\\\"+#%'\\\"%$\\\"# X\\\"# X+& 4!6\\xF5! %\"),\n          peg$decode(\"!7L*# \\\"7\\x98+c$ ]!7B+-$7\\x9A+#%'\\\"%$\\\"# X\\\"# X,8&!7B+-$7\\x9A+#%'\\\"%$\\\"# X\\\"# X\\\"+'%4\\\"6\\xF6\\\" %$\\\"# X\\\"# X\"),\n          peg$decode(\"!7\\x99*# \\\" \\\\+A$7@+7%7M+-%7?+#%'$%$$# X$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!!76+_$ ]!7.+-$76+#%'\\\"%$\\\"# X\\\"# X,8&!7.+-$76+#%'\\\"%$\\\"# X\\\"# X\\\"+#%'\\\"%$\\\"# X\\\"# X*# \\\"7H+' 4!6\\xF7!! %\"),\n          peg$decode(\"7\\x9B*) \\\"7\\x9C*# \\\"7\\x9F\"),\n          peg$decode(\"!/\\xF8\\\"\\\"1!3\\xF9+<$7<+2%7\\x9E+(%4#6\\xFA#! %$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!/\\xFB\\\"\\\"1'3\\xFC+<$7<+2%7\\x9D+(%4#6\\xFD#! %$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"! ]7!+&$,#&7!\\\"\\\"\\\" X+' 4!6\\xFE!! %\"),\n          peg$decode(\"!.\\xFF\\\"\\\"2\\xFF3\\u0100+x$!.J\\\"\\\"2J3K+S$7!*# \\\" \\\\+C%7!*# \\\" \\\\+3%7!*# \\\" \\\\+#%'$%$$# X$## X$\\\"# X\\\"# X*# \\\" \\\\+'%4\\\"6\\u0101\\\" %$\\\"# X\\\"# X\"),\n          peg$decode(\"!76+N$!7<+-$7\\xA0+#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\+)%4\\\"6\\u0102\\\"\\\"! %$\\\"# X\\\"# X\"),\n          peg$decode(\"76*) \\\"7T*# \\\"7H\"),\n          peg$decode(\"!7\\xA2+_$ ]!7B+-$7\\xA3+#%'\\\"%$\\\"# X\\\"# X,8&!7B+-$7\\xA3+#%'\\\"%$\\\"# X\\\"# X\\\"+#%'\\\"%$\\\"# X\\\"# X\"),\n          peg$decode(\"!/\\u0103\\\"\\\"1&3\\u0104*G \\\"/\\u0105\\\"\\\"1'3\\u0106*; \\\"/\\u0107\\\"\\\"1$3\\u0108*/ \\\"/\\u0109\\\"\\\"1%3\\u010A*# \\\"76+& 4!6\\u010B! %\"),\n          peg$decode(\"7\\xA4*# \\\"7\\x9F\"),\n          peg$decode(\"!/\\u010C\\\"\\\"1(3\\u010D+O$7<+E%/\\u010E\\\"\\\"1(3\\u010F*/ \\\"/\\u0110\\\"\\\"1(3\\u0111*# \\\"76+#%'#%$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!76+_$ ]!7A+-$76+#%'\\\"%$\\\"# X\\\"# X,8&!7A+-$76+#%'\\\"%$\\\"# X\\\"# X\\\"+#%'\\\"%$\\\"# X\\\"# X\"),\n          peg$decode(\"! ]7!+&$,#&7!\\\"\\\"\\\" X+' 4!6\\u0112!! %\"),\n          peg$decode(\"!7\\xA8+& 4!6\\u0113! %\"),\n          peg$decode(\"!7\\xA9+s$7;+i%7\\xAE+_% ]!7B+-$7\\xAF+#%'\\\"%$\\\"# X\\\"# X,8&!7B+-$7\\xAF+#%'\\\"%$\\\"# X\\\"# X\\\"+#%'$%$$# X$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"7\\xAA*# \\\"7\\xAB\"),\n          peg$decode(\"/\\u0114\\\"\\\"1$3\\u0115*S \\\"/\\u0116\\\"\\\"1%3\\u0117*G \\\"/\\u0118\\\"\\\"1%3\\u0119*; \\\"/\\u011A\\\"\\\"1%3\\u011B*/ \\\"/\\u011C\\\"\\\"1+3\\u011D*# \\\"7\\xAC\"),\n          peg$decode(\"/\\u011E\\\"\\\"1'3\\u011F*/ \\\"/\\u0120\\\"\\\"1)3\\u0121*# \\\"7\\xAC\"),\n          peg$decode(\"76*# \\\"7\\xAD\"),\n          peg$decode(\"!/\\u0122\\\"\\\"1\\\"3\\u0123+-$76+#%'\\\"%$\\\"# X\\\"# X\"),\n          peg$decode(\"7\\xAC*# \\\"76\"),\n          peg$decode(\"!76+7$7<+-%7\\xB0+#%'#%$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"76*# \\\"7H\"),\n          peg$decode(\"!7\\xB2+7$7.+-%7\\x8F+#%'#%$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"! ]7!+&$,#&7!\\\"\\\"\\\" X+' 4!6\\u0124!! %\"),\n          peg$decode(\"!7\\x9D+' 4!6\\u0125!! %\"),\n          peg$decode(\"!7\\xB5+d$ ]!7B+-$7\\x9F+#%'\\\"%$\\\"# X\\\"# X,8&!7B+-$7\\x9F+#%'\\\"%$\\\"# X\\\"# X\\\"+(%4\\\"6\\u0126\\\"!!%$\\\"# X\\\"# X\"),\n          peg$decode(\"!!77+k$ ]!.J\\\"\\\"2J3K+-$77+#%'\\\"%$\\\"# X\\\"# X,>&!.J\\\"\\\"2J3K+-$77+#%'\\\"%$\\\"# X\\\"# X\\\"+#%'\\\"%$\\\"# X\\\"# X+! (%\"),\n          peg$decode(\"!7L*# \\\"7\\x98+c$ ]!7B+-$7\\xB7+#%'\\\"%$\\\"# X\\\"# X,8&!7B+-$7\\xB7+#%'\\\"%$\\\"# X\\\"# X\\\"+'%4\\\"6\\u0127\\\" %$\\\"# X\\\"# X\"),\n          peg$decode(\"7\\xB8*# \\\"7\\x9F\"),\n          peg$decode(\"!/\\u0128\\\"\\\"1#3\\u0129+<$7<+2%76+(%4#6\\u012A#! %$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"! ]7!+&$,#&7!\\\"\\\"\\\" X+' 4!6\\u012B!! %\"),\n          peg$decode(\"!7\\x9D+' 4!6\\u012C!! %\"),\n          peg$decode(\"! ]7\\x99,#&7\\x99\\\"+\\x81$7@+w%7M+m%7?+c% ]!7B+-$7\\x9F+#%'\\\"%$\\\"# X\\\"# X,8&!7B+-$7\\x9F+#%'\\\"%$\\\"# X\\\"# X\\\"+'%4%6\\u012D% %$%# X$$# X$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"7\\xBD\"),\n          peg$decode(\"!/\\u012E\\\"\\\"1&3\\u012F+s$7.+i%7\\xC0+_% ]!7A+-$7\\xC0+#%'\\\"%$\\\"# X\\\"# X,8&!7A+-$7\\xC0+#%'\\\"%$\\\"# X\\\"# X\\\"+#%'$%$$# X$## X$\\\"# X\\\"# X*# \\\"7\\xBE\"),\n          peg$decode(\"!76+s$7.+i%7\\xBF+_% ]!7A+-$7\\xBF+#%'\\\"%$\\\"# X\\\"# X,8&!7A+-$7\\xBF+#%'\\\"%$\\\"# X\\\"# X\\\"+#%'$%$$# X$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!76+=$7<+3%76*# \\\"7H+#%'#%$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"7\\xC1*G \\\"7\\xC3*A \\\"7\\xC5*; \\\"7\\xC7*5 \\\"7\\xC8*/ \\\"7\\xC9*) \\\"7\\xCA*# \\\"7\\xBF\"),\n          peg$decode(\"!/\\u0130\\\"\\\"1%3\\u0131+7$7<+-%7\\xC2+#%'#%$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!7I+' 4!6\\u0132!! %\"),\n          peg$decode(\"!/\\u0133\\\"\\\"1&3\\u0134+\\xA5$7<+\\x9B%7D+\\x91%7\\xC4+\\x87% ]! ]7'+&$,#&7'\\\"\\\"\\\" X+-$7\\xC4+#%'\\\"%$\\\"# X\\\"# X,G&! ]7'+&$,#&7'\\\"\\\"\\\" X+-$7\\xC4+#%'\\\"%$\\\"# X\\\"# X\\\"+-%7E+#%'&%$&# X$%# X$$# X$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"7t*# \\\"7w\"),\n          peg$decode(\"!/\\u0135\\\"\\\"1%3\\u0136+7$7<+-%7\\xC6+#%'#%$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!7I+' 4!6\\u0137!! %\"),\n          peg$decode(\"!/\\u0138\\\"\\\"1&3\\u0139+<$7<+2%7I+(%4#6\\u013A#! %$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!/\\u013B\\\"\\\"1%3\\u013C+_$7<+U%!/\\u013D\\\"\\\"1$3\\u013E+& 4!6\\u013F! %*4 \\\"!/\\u0140\\\"\\\"1%3\\u0141+& 4!6\\u0142! %+#%'#%$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!/\\u0143\\\"\\\"1)3\\u0144+T$7<+J%/\\u0145\\\"\\\"1#3\\u0146*/ \\\"/\\u0147\\\"\\\"1(3\\u0148*# \\\"76+(%4#6\\u0149#! %$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!/\\u014A\\\"\\\"1#3\\u014B+\\x9E$7<+\\x94%7D+\\x8A%!7\\xCB+k$ ]!.D\\\"\\\"2D3E+-$7\\xCB+#%'\\\"%$\\\"# X\\\"# X,>&!.D\\\"\\\"2D3E+-$7\\xCB+#%'\\\"%$\\\"# X\\\"# X\\\"+#%'\\\"%$\\\"# X\\\"# X+-%7E+#%'%%$%# X$$# X$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!/\\u014C\\\"\\\"1(3\\u014D*/ \\\"/\\u014E\\\"\\\"1$3\\u014F*# \\\"76+' 4!6\\u0150!! %\"),\n          peg$decode(\"!76+_$ ]!7A+-$76+#%'\\\"%$\\\"# X\\\"# X,8&!7A+-$76+#%'\\\"%$\\\"# X\\\"# X\\\"+#%'\\\"%$\\\"# X\\\"# X\"),\n          peg$decode(\"!7\\xCE+K$7.+A%7\\xCE+7%7.+-%7\\x8F+#%'%%$%# X$$# X$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"! ]7!+&$,#&7!\\\"\\\"\\\" X+' 4!6\\u0151!! %\"),\n          peg$decode(\"!7\\xD0+c$ ]!7A+-$7\\xD0+#%'\\\"%$\\\"# X\\\"# X,8&!7A+-$7\\xD0+#%'\\\"%$\\\"# X\\\"# X\\\"+'%4\\\"6\\u0152\\\" %$\\\"# X\\\"# X\"),\n          peg$decode(\"!7\\x98+c$ ]!7B+-$7\\x9F+#%'\\\"%$\\\"# X\\\"# X,8&!7B+-$7\\x9F+#%'\\\"%$\\\"# X\\\"# X\\\"+'%4\\\"6\\u0153\\\" %$\\\"# X\\\"# X\"),\n          peg$decode(\"!7L*) \\\"7\\x98*# \\\"7t+c$ ]!7B+-$7\\x9F+#%'\\\"%$\\\"# X\\\"# X,8&!7B+-$7\\x9F+#%'\\\"%$\\\"# X\\\"# X\\\"+'%4\\\"6\\u0154\\\" %$\\\"# X\\\"# X\"),\n          peg$decode(\"!76+_$ ]!7A+-$76+#%'\\\"%$\\\"# X\\\"# X,8&!7A+-$76+#%'\\\"%$\\\"# X\\\"# X\\\"+#%'\\\"%$\\\"# X\\\"# X\"),\n          peg$decode(\"!7\\xD4+_$ ]!7A+-$7\\xD4+#%'\\\"%$\\\"# X\\\"# X,8&!7A+-$7\\xD4+#%'\\\"%$\\\"# X\\\"# X\\\"+#%'\\\"%$\\\"# X\\\"# X\"),\n          peg$decode(\"!7\\x98+_$ ]!7B+-$7\\x9F+#%'\\\"%$\\\"# X\\\"# X,8&!7B+-$7\\x9F+#%'\\\"%$\\\"# X\\\"# X\\\"+#%'\\\"%$\\\"# X\\\"# X\"),\n          peg$decode(\"! ]7!+&$,#&7!\\\"\\\"\\\" X+' 4!6\\u0155!! %\"),\n          peg$decode(\"!7\\xD7+_$ ]!7B+-$7\\xD8+#%'\\\"%$\\\"# X\\\"# X,8&!7B+-$7\\xD8+#%'\\\"%$\\\"# X\\\"# X\\\"+#%'\\\"%$\\\"# X\\\"# X\"),\n          peg$decode(\"!/\\u0156\\\"\\\"1&3\\u0157*; \\\"/\\u0158\\\"\\\"1'3\\u0159*/ \\\"/\\u015A\\\"\\\"1*3\\u015B*# \\\"76+& 4!6\\u015C! %\"),\n          peg$decode(\"!/\\u015D\\\"\\\"1&3\\u015E+<$7<+2%7\\xD9+(%4#6\\u015F#! %$## X$\\\"# X\\\"# X*\\x83 \\\"!/\\xFB\\\"\\\"1'3\\xFC+<$7<+2%7\\x9D+(%4#6\\u0160#! %$## X$\\\"# X\\\"# X*S \\\"!/\\u0161\\\"\\\"1+3\\u0162+<$7<+2%7\\x9D+(%4#6\\u0163#! %$## X$\\\"# X\\\"# X*# \\\"7\\x9F\"),\n          peg$decode(\"/\\u0164\\\"\\\"1+3\\u0165*k \\\"/\\u0166\\\"\\\"1)3\\u0167*_ \\\"/\\u0168\\\"\\\"1(3\\u0169*S \\\"/\\u016A\\\"\\\"1'3\\u016B*G \\\"/\\u016C\\\"\\\"1&3\\u016D*; \\\"/\\u016E\\\"\\\"1*3\\u016F*/ \\\"/\\u0170\\\"\\\"1)3\\u0171*# \\\"76\"),\n          peg$decode(\"71*# \\\" \\\\\"),\n          peg$decode(\"!76+_$ ]!7A+-$76+#%'\\\"%$\\\"# X\\\"# X,8&!7A+-$76+#%'\\\"%$\\\"# X\\\"# X\\\"+#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\\"),\n          peg$decode(\"!7L*# \\\"7\\x98+c$ ]!7B+-$7\\xDD+#%'\\\"%$\\\"# X\\\"# X,8&!7B+-$7\\xDD+#%'\\\"%$\\\"# X\\\"# X\\\"+'%4\\\"6\\u0172\\\" %$\\\"# X\\\"# X\"),\n          peg$decode(\"7\\xB8*# \\\"7\\x9F\"),\n          peg$decode(\"!7\\xDF+_$ ]!7A+-$7\\xDF+#%'\\\"%$\\\"# X\\\"# X,8&!7A+-$7\\xDF+#%'\\\"%$\\\"# X\\\"# X\\\"+#%'\\\"%$\\\"# X\\\"# X\"),\n          peg$decode(\"!7\\xE6+s$7.+i%7\\xE9+_% ]!7B+-$7\\xE0+#%'\\\"%$\\\"# X\\\"# X,8&!7B+-$7\\xE0+#%'\\\"%$\\\"# X\\\"# X\\\"+#%'$%$$# X$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"7\\xE1*; \\\"7\\xE2*5 \\\"7\\xE3*/ \\\"7\\xE4*) \\\"7\\xE5*# \\\"7\\x9F\"),\n          peg$decode(\"!/\\u0173\\\"\\\"1#3\\u0174+<$7<+2%7\\xEC+(%4#6\\u0175#! %$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!/\\u0176\\\"\\\"1%3\\u0177+<$7<+2%7T+(%4#6\\u0178#! %$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!/\\u0179\\\"\\\"1(3\\u017A+B$7<+8%7\\\\*# \\\"7Y+(%4#6\\u017B#! %$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!/\\u017C\\\"\\\"1&3\\u017D+<$7<+2%76+(%4#6\\u017E#! %$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!/\\u017F\\\"\\\"1%3\\u0180+T$!7<+5$ ]7!,#&7!\\\"+#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\+'%4\\\"6\\u0181\\\" %$\\\"# X\\\"# X\"),\n          peg$decode(\"!7\\xE7+K$7;+A%76+7%7;+-%7\\xE8+#%'%%$%# X$$# X$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!/\\x98\\\"\\\"1#3\\xDB*# \\\"76+' 4!6\\u0182!! %\"),\n          peg$decode(\"!/\\xB7\\\"\\\"1#3\\u0183*G \\\"/\\xB9\\\"\\\"1#3\\u0184*; \\\"/\\xBD\\\"\\\"1#3\\u0185*/ \\\"/\\xBB\\\"\\\"1$3\\u0186*# \\\"76+' 4!6\\u0187!! %\"),\n          peg$decode(\"!7\\xEA+H$!7C+-$7\\xEB+#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\+#%'\\\"%$\\\"# X\\\"# X\"),\n          peg$decode(\"!7U*) \\\"7\\\\*# \\\"7X+& 4!6\\u0188! %\"),\n          peg$decode(\"!!7!*# \\\" \\\\+c$7!*# \\\" \\\\+S%7!*# \\\" \\\\+C%7!*# \\\" \\\\+3%7!*# \\\" \\\\+#%'%%$%# X$$# X$## X$\\\"# X\\\"# X+' 4!6\\u0189!! %\"),\n          peg$decode(\"!!7!+C$7!*# \\\" \\\\+3%7!*# \\\" \\\\+#%'#%$## X$\\\"# X\\\"# X+' 4!6\\u018A!! %\"),\n          peg$decode(\"7\\xBD\"),\n          peg$decode(\"!76+7$70+-%7\\xEF+#%'#%$## X$\\\"# X\\\"# X\"),\n          peg$decode(\" ]72*) \\\"74*# \\\"7.,/&72*) \\\"74*# \\\"7.\\\"\"),\n          peg$decode(\" ]7%,#&7%\\\"\"),\n          peg$decode(\"!7\\xF2+=$.8\\\"\\\"2839+-%7\\xF3+#%'#%$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!/\\u018B\\\"\\\"1%3\\u018C*) \\\"/\\u018D\\\"\\\"1$3\\u018E+' 4!6\\u018F!! %\"),\n          peg$decode(\"!7\\xF4+N$!.8\\\"\\\"2839+-$7^+#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\+#%'\\\"%$\\\"# X\\\"# X\"),\n          peg$decode(\"!7\\\\*) \\\"7X*# \\\"7\\x82+' 4!6\\u0190!! %\"),\n          peg$decode(\"! ]7\\xF6*) \\\"7-*# \\\"7\\xF7,/&7\\xF6*) \\\"7-*# \\\"7\\xF7\\\"+& 4!6\\u0191! %\"),\n          peg$decode(\"7\\\"*S \\\"7!*M \\\".F\\\"\\\"2F3G*A \\\".J\\\"\\\"2J3K*5 \\\".H\\\"\\\"2H3I*) \\\".N\\\"\\\"2N3O\"),\n          peg$decode(\".L\\\"\\\"2L3M*\\x95 \\\".B\\\"\\\"2B3C*\\x89 \\\".<\\\"\\\"2<3=*} \\\".R\\\"\\\"2R3S*q \\\".T\\\"\\\"2T3U*e \\\".V\\\"\\\"2V3W*Y \\\".P\\\"\\\"2P3Q*M \\\".@\\\"\\\"2@3A*A \\\".D\\\"\\\"2D3E*5 \\\".2\\\"\\\"2233*) \\\".>\\\"\\\"2>3?\"),\n          peg$decode(\"!7\\xF9+h$.8\\\"\\\"2839+X%7\\xF3+N%!.\\u0192\\\"\\\"2\\u01923\\u0193+-$7\\xE8+#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\+#%'$%$$# X$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!/\\u0194\\\"\\\"1%3\\u0195*) \\\"/\\u0196\\\"\\\"1$3\\u0197+' 4!6\\u018F!! %\"),\n          peg$decode(\"!7\\xE8+Q$/\\xB7\\\"\\\"1#3\\xB8*7 \\\"/\\xB9\\\"\\\"1#3\\xBA*+ \\\" ]7+,#&7+\\\"+'%4\\\"6\\u0198\\\" %$\\\"# X\\\"# X\"),\n          peg$decode(\"!7\\xFD+\\x8F$.F\\\"\\\"2F3G+%7\\xFC+u%.F\\\"\\\"2F3G+e%7\\xFC+[%.F\\\"\\\"2F3G+K%7\\xFC+A%.F\\\"\\\"2F3G+1%7\\xFE+'%4)6\\u0199) %$)# X$(# X$'# X$&# X$%# X$$# X$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!7#+A$7#+7%7#+-%7#+#%'$%$$# X$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!7\\xFC+-$7\\xFC+#%'\\\"%$\\\"# X\\\"# X\"),\n          peg$decode(\"!7\\xFC+7$7\\xFC+-%7\\xFC+#%'#%$## X$\\\"# X\\\"# X\")\n        ],\n\n        peg$currPos          = 0,\n        peg$reportedPos      = 0,\n        peg$cachedPos        = 0,\n        peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },\n        peg$maxFailPos       = 0,\n        peg$maxFailExpected  = [],\n        peg$silentFails      = 0,\n\n        peg$result;\n\n    if (\"startRule\" in options) {\n      if (!(options.startRule in peg$startRuleIndices)) {\n        throw new Error(\"Can't start parsing from rule \\\"\" + options.startRule + \"\\\".\");\n      }\n\n      peg$startRuleIndex = peg$startRuleIndices[options.startRule];\n    }\n\n    function text() {\n      return input.substring(peg$reportedPos, peg$currPos);\n    }\n\n    function offset() {\n      return peg$reportedPos;\n    }\n\n    function line() {\n      return peg$computePosDetails(peg$reportedPos).line;\n    }\n\n    function column() {\n      return peg$computePosDetails(peg$reportedPos).column;\n    }\n\n    function expected(description) {\n      throw peg$buildException(\n        null,\n        [{ type: \"other\", description: description }],\n        peg$reportedPos\n      );\n    }\n\n    function error(message) {\n      throw peg$buildException(message, null, peg$reportedPos);\n    }\n\n    function peg$computePosDetails(pos) {\n      function advance(details, startPos, endPos) {\n        var p, ch;\n\n        for (p = startPos; p < endPos; p++) {\n          ch = input.charAt(p);\n          if (ch === \"\\n\") {\n            if (!details.seenCR) { details.line++; }\n            details.column = 1;\n            details.seenCR = false;\n          } else if (ch === \"\\r\" || ch === \"\\u2028\" || ch === \"\\u2029\") {\n            details.line++;\n            details.column = 1;\n            details.seenCR = true;\n          } else {\n            details.column++;\n            details.seenCR = false;\n          }\n        }\n      }\n\n      if (peg$cachedPos !== pos) {\n        if (peg$cachedPos > pos) {\n          peg$cachedPos = 0;\n          peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };\n        }\n        advance(peg$cachedPosDetails, peg$cachedPos, pos);\n        peg$cachedPos = pos;\n      }\n\n      return peg$cachedPosDetails;\n    }\n\n    function peg$fail(expected) {\n      if (peg$currPos < peg$maxFailPos) { return; }\n\n      if (peg$currPos > peg$maxFailPos) {\n        peg$maxFailPos = peg$currPos;\n        peg$maxFailExpected = [];\n      }\n\n      peg$maxFailExpected.push(expected);\n    }\n\n    function peg$buildException(message, expected, pos) {\n      function cleanupExpected(expected) {\n        var i = 1;\n\n        expected.sort(function(a, b) {\n          if (a.description < b.description) {\n            return -1;\n          } else if (a.description > b.description) {\n            return 1;\n          } else {\n            return 0;\n          }\n        });\n\n        while (i < expected.length) {\n          if (expected[i - 1] === expected[i]) {\n            expected.splice(i, 1);\n          } else {\n            i++;\n          }\n        }\n      }\n\n      function buildMessage(expected, found) {\n        function stringEscape(s) {\n          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }\n\n          return s\n            .replace(/\\\\/g,   '\\\\\\\\')\n            .replace(/\"/g,    '\\\\\"')\n            .replace(/\\x08/g, '\\\\b')\n            .replace(/\\t/g,   '\\\\t')\n            .replace(/\\n/g,   '\\\\n')\n            .replace(/\\f/g,   '\\\\f')\n            .replace(/\\r/g,   '\\\\r')\n            .replace(/[\\x00-\\x07\\x0B\\x0E\\x0F]/g, function(ch) { return '\\\\x0' + hex(ch); })\n            .replace(/[\\x10-\\x1F\\x80-\\xFF]/g,    function(ch) { return '\\\\x'  + hex(ch); })\n            .replace(/[\\u0180-\\u0FFF]/g,         function(ch) { return '\\\\u0' + hex(ch); })\n            .replace(/[\\u1080-\\uFFFF]/g,         function(ch) { return '\\\\u'  + hex(ch); });\n        }\n\n        var expectedDescs = new Array(expected.length),\n            expectedDesc, foundDesc, i;\n\n        for (i = 0; i < expected.length; i++) {\n          expectedDescs[i] = expected[i].description;\n        }\n\n        expectedDesc = expected.length > 1\n          ? expectedDescs.slice(0, -1).join(\", \")\n              + \" or \"\n              + expectedDescs[expected.length - 1]\n          : expectedDescs[0];\n\n        foundDesc = found ? \"\\\"\" + stringEscape(found) + \"\\\"\" : \"end of input\";\n\n        return \"Expected \" + expectedDesc + \" but \" + foundDesc + \" found.\";\n      }\n\n      var posDetails = peg$computePosDetails(pos),\n          found      = pos < input.length ? input.charAt(pos) : null;\n\n      if (expected !== null) {\n        cleanupExpected(expected);\n      }\n\n      return new SyntaxError(\n        message !== null ? message : buildMessage(expected, found),\n        expected,\n        found,\n        pos,\n        posDetails.line,\n        posDetails.column\n      );\n    }\n\n    function peg$decode(s) {\n      var bc = new Array(s.length), i;\n\n      for (i = 0; i < s.length; i++) {\n        bc[i] = s.charCodeAt(i) - 32;\n      }\n\n      return bc;\n    }\n\n    function peg$parseRule(index) {\n      var bc    = peg$bytecode[index],\n          ip    = 0,\n          ips   = [],\n          end   = bc.length,\n          ends  = [],\n          stack = [],\n          params, i;\n\n      function protect(object) {\n        return Object.prototype.toString.apply(object) === \"[object Array]\" ? [] : object;\n      }\n\n      while (true) {\n        while (ip < end) {\n          switch (bc[ip]) {\n            case 0:\n              stack.push(protect(peg$consts[bc[ip + 1]]));\n              ip += 2;\n              break;\n\n            case 1:\n              stack.push(peg$currPos);\n              ip++;\n              break;\n\n            case 2:\n              stack.pop();\n              ip++;\n              break;\n\n            case 3:\n              peg$currPos = stack.pop();\n              ip++;\n              break;\n\n            case 4:\n              stack.length -= bc[ip + 1];\n              ip += 2;\n              break;\n\n            case 5:\n              stack.splice(-2, 1);\n              ip++;\n              break;\n\n            case 6:\n              stack[stack.length - 2].push(stack.pop());\n              ip++;\n              break;\n\n            case 7:\n              stack.push(stack.splice(stack.length - bc[ip + 1], bc[ip + 1]));\n              ip += 2;\n              break;\n\n            case 8:\n              stack.pop();\n              stack.push(input.substring(stack[stack.length - 1], peg$currPos));\n              ip++;\n              break;\n\n            case 9:\n              ends.push(end);\n              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);\n\n              if (stack[stack.length - 1]) {\n                end = ip + 3 + bc[ip + 1];\n                ip += 3;\n              } else {\n                end = ip + 3 + bc[ip + 1] + bc[ip + 2];\n                ip += 3 + bc[ip + 1];\n              }\n\n              break;\n\n            case 10:\n              ends.push(end);\n              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);\n\n              if (stack[stack.length - 1] === peg$FAILED) {\n                end = ip + 3 + bc[ip + 1];\n                ip += 3;\n              } else {\n                end = ip + 3 + bc[ip + 1] + bc[ip + 2];\n                ip += 3 + bc[ip + 1];\n              }\n\n              break;\n\n            case 11:\n              ends.push(end);\n              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);\n\n              if (stack[stack.length - 1] !== peg$FAILED) {\n                end = ip + 3 + bc[ip + 1];\n                ip += 3;\n              } else {\n                end = ip + 3 + bc[ip + 1] + bc[ip + 2];\n                ip += 3 + bc[ip + 1];\n              }\n\n              break;\n\n            case 12:\n              if (stack[stack.length - 1] !== peg$FAILED) {\n                ends.push(end);\n                ips.push(ip);\n\n                end = ip + 2 + bc[ip + 1];\n                ip += 2;\n              } else {\n                ip += 2 + bc[ip + 1];\n              }\n\n              break;\n\n            case 13:\n              ends.push(end);\n              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);\n\n              if (input.length > peg$currPos) {\n                end = ip + 3 + bc[ip + 1];\n                ip += 3;\n              } else {\n                end = ip + 3 + bc[ip + 1] + bc[ip + 2];\n                ip += 3 + bc[ip + 1];\n              }\n\n              break;\n\n            case 14:\n              ends.push(end);\n              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);\n\n              if (input.substr(peg$currPos, peg$consts[bc[ip + 1]].length) === peg$consts[bc[ip + 1]]) {\n                end = ip + 4 + bc[ip + 2];\n                ip += 4;\n              } else {\n                end = ip + 4 + bc[ip + 2] + bc[ip + 3];\n                ip += 4 + bc[ip + 2];\n              }\n\n              break;\n\n            case 15:\n              ends.push(end);\n              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);\n\n              if (input.substr(peg$currPos, peg$consts[bc[ip + 1]].length).toLowerCase() === peg$consts[bc[ip + 1]]) {\n                end = ip + 4 + bc[ip + 2];\n                ip += 4;\n              } else {\n                end = ip + 4 + bc[ip + 2] + bc[ip + 3];\n                ip += 4 + bc[ip + 2];\n              }\n\n              break;\n\n            case 16:\n              ends.push(end);\n              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);\n\n              if (peg$consts[bc[ip + 1]].test(input.charAt(peg$currPos))) {\n                end = ip + 4 + bc[ip + 2];\n                ip += 4;\n              } else {\n                end = ip + 4 + bc[ip + 2] + bc[ip + 3];\n                ip += 4 + bc[ip + 2];\n              }\n\n              break;\n\n            case 17:\n              stack.push(input.substr(peg$currPos, bc[ip + 1]));\n              peg$currPos += bc[ip + 1];\n              ip += 2;\n              break;\n\n            case 18:\n              stack.push(peg$consts[bc[ip + 1]]);\n              peg$currPos += peg$consts[bc[ip + 1]].length;\n              ip += 2;\n              break;\n\n            case 19:\n              stack.push(peg$FAILED);\n              if (peg$silentFails === 0) {\n                peg$fail(peg$consts[bc[ip + 1]]);\n              }\n              ip += 2;\n              break;\n\n            case 20:\n              peg$reportedPos = stack[stack.length - 1 - bc[ip + 1]];\n              ip += 2;\n              break;\n\n            case 21:\n              peg$reportedPos = peg$currPos;\n              ip++;\n              break;\n\n            case 22:\n              params = bc.slice(ip + 4, ip + 4 + bc[ip + 3]);\n              for (i = 0; i < bc[ip + 3]; i++) {\n                params[i] = stack[stack.length - 1 - params[i]];\n              }\n\n              stack.splice(\n                stack.length - bc[ip + 2],\n                bc[ip + 2],\n                peg$consts[bc[ip + 1]].apply(null, params)\n              );\n\n              ip += 4 + bc[ip + 3];\n              break;\n\n            case 23:\n              stack.push(peg$parseRule(bc[ip + 1]));\n              ip += 2;\n              break;\n\n            case 24:\n              peg$silentFails++;\n              ip++;\n              break;\n\n            case 25:\n              peg$silentFails--;\n              ip++;\n              break;\n\n            default:\n              throw new Error(\"Invalid opcode: \" + bc[ip] + \".\");\n          }\n        }\n\n        if (ends.length > 0) {\n          end = ends.pop();\n          ip = ips.pop();\n        } else {\n          break;\n        }\n      }\n\n      return stack[0];\n    }\n\n    var data = {};\n\n    peg$result = peg$parseRule(peg$startRuleIndex);\n\n    if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n      return data;\n    } else {\n      if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n        peg$fail({ type: \"end\", description: \"end of input\" });\n      }\n\n      return -1;\n    }\n  }\n\n  return {\n    SyntaxError: SyntaxError,\n    parse:       function (input, startRule) {return parse(input, {startRule: startRule});}\n  };\n};\n/* jshint ignore:end */\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/sip.js/src/Grammar/dist/Grammar.js\n ** module id = 34\n ** module chunks = 0\n **/","var EventEmitter = function() {\n    this.handlers = {};\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nEventEmitter.prototype.emit = function(name /*, args */) {\n    var self = this, args = Array.prototype.slice.call(arguments, 1);\n    if (name in this.handlers) {\n        var list = this.handlers[name];\n        for (var i = 0; i < list.length; i++) {\n            setTimeout(executeListener(list[i]), 0);\n        }\n    }\n    function executeListener(listener) {\n        return function() {\n            listener.apply(self, args);\n        }\n    }\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nEventEmitter.prototype.on = function(name, listener) {\n    if (!Array.isArray(name)) name = [name];\n    for (var i = 0; i < name.length; i++) {\n        this.handlers[name[i]] = this.handlers[name[i]] || [];\n        var list = this.handlers[name[i]];\n        list.push(listener);\n    }\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nEventEmitter.prototype.off = function(name, listener) {\n    this.handlers[name] = this.handlers[name] || [];\n    var index = this.handlers[name].indexOf(listener);\n    if (index !== -1) {\n        this.handlers[name].splice(index, 1);\n    }\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\nEventEmitter.prototype.once = function(name, listener) {\n    var self = this;\n\n    function listenOnce() {\n        listener.apply(this, arguments);\n        self.off(name, listenOnce);\n    }\n\n    self.on(name, listenOnce);\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\n//FIXME Remove Angular-specific\n//monkey patching emit for assuring that $apply is called\nvar __emit = EventEmitter.prototype.emit;\nEventEmitter.prototype.emit = function() {\n    var self = this, args = arguments;\n    setTimeout(function() {\n        __emit.apply(self, args);\n    });\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nmodule.exports = EventEmitter;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/emitter.js\n ** module id = 35\n ** module chunks = 0\n **/","var SIP = require('sip.js');\nvar EventEmitter = require('./emitter');\nvar PhoneLine = require('./phoneLine');\nvar utils = require('./utils');\n\nvar extend = utils.extend;\nvar uuid = utils.uuid;\n\nvar EVENT_NAMES = require('./eventNames');\nvar DomAudio = require('./dom');\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\n/**\n * @param options\n * @constructor\n */\nvar UserAgent = function(options) {\n    this.eventEmitter = new EventEmitter();\n    this.sipConfig = options ? (options.sipConfig || {}) : ({});\n    this.lines = {};\n    this.userAgent = undefined;\n    this.getUserMedia = undefined;\n    this.RTCPeerConnection = undefined;\n    this.RTCSessionDescription = undefined;\n    this.dom = new DomAudio();\n    this.checkConfig();\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nUserAgent.prototype.checkConfig = function() {\n    // set mootools expands to non-enumerables under ES5\n    if (typeof this.sipConfig.wsServers === 'string') {\n        this.sipConfig.wsServers = [\n            {ws_uri: this.sipConfig.wsServers}\n        ];\n    }\n    var key, enums = {enumerable: false};\n    for (key in this.sipConfig.wsServers) this.sipConfig.wsServers.hasOwnProperty(key) || Object.defineProperty(Array.prototype, key, enums);\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nUserAgent.prototype.setSIPConfig = function(config) {\n    var wsServers = config.wsServers,\n        useSecureConnection = (document.location.protocol == 'https:');\n\n    for (var i = 0; i < wsServers.length; i++) {\n        if (\n            (useSecureConnection && /^wss:/.test(wsServers[i]))\n            ||\n            (!useSecureConnection && /^ws:/.test(wsServers[i]))\n        ) {\n            config.wsServers = [wsServers[i]];\n            break;\n        }\n    }\n\n    this.sipConfig = config;\n    this.checkConfig();\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nUserAgent.prototype.__createLine = function(session, type) {\n    var self = this;\n    session.data.id = uuid();\n    self.eventEmitter.emit(EVENT_NAMES.sipRTCSession, session);\n    var line = new PhoneLine({\n        session: session,\n        userAgent: self,\n        instanceId: self.sipConfig.authorizationUser,\n        eventEmitter: self.eventEmitter,\n        type: type\n    });\n    self.__clearInactiveLines();\n    self.lines[session.data.id] = line;\n    window.line = line;\n    return line;\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nUserAgent.prototype.getActiveLines = function() {\n    this.__clearInactiveLines();\n    return this.lines;\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nUserAgent.prototype.getActiveLinesArray = function() {\n    var lines = this.getActiveLines();\n    var arr = [];\n    for (var id in lines) {\n        if (lines.hasOwnProperty(id)) {\n            arr.push(lines[id]);\n        }\n    }\n    return arr;\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nUserAgent.prototype.getIncomingLinesArray = function() {\n    return this.getActiveLinesArray().filter(function(el) {\n        return el.isIncoming();\n    });\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nUserAgent.prototype.__clearInactiveLines = function() {\n    for (var id in this.lines) {\n        if (this.lines.hasOwnProperty(id)) {\n            if (this.lines[id].isClosed()) {\n                delete this.lines[id];\n            }\n        }\n    }\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nvar __disconnectCount = 0;\n\n\nUserAgent.prototype.start = function(options) {\n    var self = this;\n\n    self.stop();\n    if (self.userAgent instanceof SIP.UA) {\n        self.userAgent.loadConfig(self.sipConfig);\n        self.userAgent.traceSip = true;\n    }\n    else {\n        self.userAgent = new SIP.UA(self.sipConfig);\n        self.__registerExtraOptions = options || {};\n        self.userAgent.on('connected', function(e) {\n            __disconnectCount = 0;\n            self.eventEmitter.emit(EVENT_NAMES.sipConnected, e);\n            self.userAgent.register({\n                extraHeaders: options.extraHeaders || []\n            });\n        });\n        self.userAgent.on('disconnected', function(e) {\n            if (++__disconnectCount >= (self.sipConfig.retryCount || 3)) {\n                __disconnectCount = 0;\n                self.stop();\n                self.eventEmitter.emit(EVENT_NAMES.sipConnectionFailed, new Error(\"Unable to connect to the WS server: exceeded number of attempts\"));\n            }\n            self.eventEmitter.emit(EVENT_NAMES.sipDisconnected, e);\n        });\n        self.userAgent.on('registered', function(e) {\n            self.eventEmitter.emit(EVENT_NAMES.sipRegistered, e);\n        });\n        self.userAgent.on('unregistered', function(e) {\n            self.eventEmitter.emit(EVENT_NAMES.sipUnRegistered, e);\n        });\n        self.userAgent.on('registrationFailed', function(e) {\n            self.eventEmitter.emit(EVENT_NAMES.sipRegistrationFailed, e);\n        });\n        //happens when call is incoming\n        self.userAgent.on('invite', function(session) {\n            var newLine;\n\n            if (session && session.request && session.request.hasHeader('replaces')) {\n                var replaces = session.request.getHeader('replaces').split(';'),\n                    callId = replaces[0],\n                    lines = self.getActiveLinesArray(),\n                    foundLine = null;\n                for (var i = 0; i < lines.length; i++) {\n                    if (lines[i].session.request.call_id) {\n                        if (callId === lines[i].session.request.call_id) {\n                            foundLine = lines[i];\n                            break;\n                        }\n                    }\n                }\n\n                if (foundLine) {\n                    var originalSessionId = foundLine.getId();\n                    newLine = self.__createLine(session, PhoneLine.types.incoming);\n                    newLine.answer().then(function() {\n                        self.eventEmitter.emit(EVENT_NAMES.callReplaced, newLine, foundLine);\n                        foundLine.cancel();\n                    });\n                }\n            }\n            else {\n                newLine = self.__createLine(session, PhoneLine.types.incoming);\n                self.eventEmitter.emit(EVENT_NAMES.sipIncomingCall, newLine);\n            }\n        });\n    }\n    //noop on transport connected (this will cause unwanted REGISTER)\n    self.userAgent.registerContext.onTransportConnected = function() {};\n    self.userAgent.start();\n\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nUserAgent.prototype.reregister = function(options, reconnect) {\n    var self = this, reconnect = !!reconnect;\n    options = extend(self.__registerExtraOptions, options);\n    if (!self.userAgent) {\n        self.start(options);\n    }\n    if (!reconnect) {\n        self.userAgent.register(options);\n    }\n    else {\n        if (!self.isConnected()) {\n            self.stop();\n            self.start(options);\n        }\n        else {\n            //This will be treated as abrupt disconnection and SIP.js will try to reconnect the WS\n            self.userAgent.transport.ws.close();\n        }\n    }\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nUserAgent.prototype.stop = function() {\n    if (this.userAgent instanceof SIP.UA) {\n        this.userAgent.stop();\n        this.userAgent = null;\n    }\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nUserAgent.prototype.call = function(number, inviteOptions) {\n    var self = this;\n    var options = {\n        media: {\n            constraints: {audio: true, video: false},\n            render: {\n                local: {\n                    audio: self.dom.localAudio\n                },\n                remote: {\n                    audio: self.dom.remoteAudio\n                }\n            }\n        },\n        RTCConstraints: {\n            \"optional\": [\n                {'DtlsSrtpKeyAgreement': 'true'}\n            ]\n        }\n    };\n    var fromNumber = inviteOptions.fromNumber;\n    var country = inviteOptions.country;\n\n    var headers = [];\n    if (fromNumber) {\n        headers.push('P-Asserted-Identity: sip:' + fromNumber + '@' + this.sipConfig.domain);\n    }\n    if (country) {\n        headers.push('P-rc-country-id: ' + country);\n    }\n    extend(options, {\n        extraHeaders: headers\n    });\n    var session = this.userAgent.invite('' + number, options);\n    var line = self.__createLine(session, PhoneLine.types.outgoing);\n    this.eventEmitter.emit(EVENT_NAMES.outgoingCall, line);\n    return line;\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nUserAgent.prototype.answer = function(line) {\n    return line && line.answer();\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\n\nUserAgent.prototype.hangup = function(line) {\n    if (line) {\n        line.cancel();\n        delete this.lines[line.getId()];\n    }\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nUserAgent.prototype.on = function(eventName, cb) {\n    this.eventEmitter.on(eventName, cb);\n    return this;\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nUserAgent.prototype.isConnected = function() {\n    return !!(this.userAgent && this.userAgent.transport && this.userAgent.transport.connected);\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nUserAgent.prototype.isConnecting = function() {\n    //websocket.readyState === CONNECTING (0)\n    return !this.isConnected() && !!(this.userAgent && this.userAgent.transport && this.userAgent.transport.ws && this.userAgent.transport.ws.readyState === 0);\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nUserAgent.prototype.forceDisconnect = function() {\n    console.warn(this.isConnecting(), this.isConnected())\n    if (this.isConnecting() || this.isConnected()) {\n        this.userAgent.transport.disconnect();\n        this.userAgent.stop();\n        this.userAgent = null;\n    }\n};\n\nmodule.exports = UserAgent;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/userAgent.js\n ** module id = 36\n ** module chunks = 0\n **/","var SIP = require('sip.js');\nvar utils = require('./utils');\nvar EVENT_NAMES = require('./eventNames');\nvar dom = require('./dom');\nvar LOCAL_AUDIO = dom.LOCAL_AUDIO;\nvar REMOTE_AUDIO = dom.REMOTE_AUDIO;\n\nvar delay = utils.delay;\nvar extend = utils.extend;\n\nvar index = 0;\n\n/**\n * @param options\n * @constructor\n */\nvar PhoneLine = function(options) {\n\n    var self = this;\n    this.index = index++;\n\n    this.session = options.session;\n    this.userAgent = options.userAgent;\n    this.eventEmitter = options.eventEmitter;\n    this.instanceId = options.instanceId;\n    this.sessionId = this.session && this.session.id;\n\n    this.onCall = false;\n    this.onRecord = false;\n    this.contact = {};\n    this.muted = false;\n    this.bothMuted = false;\n    this.onHold = false;\n    this.timeCallStarted = null;\n\n    this.accepted = false;\n    this.type = options.type;\n\n    this.responseTimeout = 10000;\n\n    this.controlSender = {\n        messages: {\n            park: {reqid: 1, command: 'callpark'},\n            startRecord: {reqid: 2, command: 'startcallrecord'},\n            stopRecord: {reqid: 3, command: 'stopcallrecord'},\n            flip: {reqid: 3, command: 'callflip', target: ''},\n            monitor: {reqid: 4, command: 'monitor'},\n            barge: {reqid: 5, command: 'barge'},\n            whisper: {reqid: 6, command: 'whisper'},\n            takeover: {reqid: 7, command: 'takeover'}\n        },\n        send: function(command, options) {\n\n            options = options || {};\n            extend(command, options);\n\n            var cseq = null;\n\n            return new Promise(function(resolve, reject){\n                self.session.sendRequest(SIP.C.INFO, {\n                    body: JSON.stringify({\n                        request: command\n                    }),\n                    extraHeaders: [\n                        \"Content-Type: application/json;charset=utf-8\"\n                    ],\n                    receiveResponse: function(response) {\n                        var timeout = null;\n                        if (response.status_code === 200) {\n                            cseq = response.cseq;\n                            function onInfo(request) {\n                                if (response.cseq === cseq) {\n                                    var body = request && request.body || '{}';\n                                    var obj;\n\n                                    try {\n                                        obj = JSON.parse(body);\n                                    }\n                                    catch (e) {\n                                        obj = {};\n                                    }\n\n                                    if (obj.response && obj.response.command === command.command) {\n                                        if (obj.response.result) {\n                                            if (obj.response.result.code == 0) {\n                                                resolve(obj.response.result);\n                                            }\n                                            else {\n                                                reject(obj.response.result);\n                                            }\n                                        }\n                                    }\n                                    timeout && clearTimeout(timeout);\n                                    self.eventEmitter.off('SIP_INFO', onInfo);\n                                    resolve(); //FIXME What to resolve\n                                }\n                            }\n\n                            timeout = setTimeout(function() {\n                                reject(new Error('Timeout: no reply'));\n                                self.eventEmitter.off('SIP_INFO', onInfo);\n                            }, self.responseTimeout);\n                            self.eventEmitter.on('SIP_INFO', onInfo);\n                        }\n                        else {\n                            reject(new Error('The INFO response status code is: ' + response.status_code + ' (waiting for 200)'));\n                        }\n                    }\n                });\n\n            });\n        }\n    };\n\n    /*--------------------------------------------------------------------------------------------------------------------*/\n\n    var __receiveRequest = this.session.receiveRequest;\n    this.session.receiveRequest = function(request) {\n        switch (request.method) {\n            case SIP.C.INFO:\n                self.eventEmitter.emit('SIP_INFO', request);\n                //SIP.js does not support application/json content type, so we monkey override its behaviour in this case\n                if (this.status === SIP.Session.C.STATUS_CONFIRMED || this.status === SIP.Session.C.STATUS_WAITING_FOR_ACK) {\n                    var contentType = request.getHeader('content-type');\n                    if (contentType.match(/^application\\/json/i)) {\n                        request.reply(200);\n                        return this;\n                    }\n                }\n                break;\n            //Refresh invite should not be rejected with 488\n            case SIP.C.INVITE:\n                var session = this;\n                if (session.status === SIP.Session.C.STATUS_CONFIRMED) {\n                    if (request.call_id && session.dialog && session.dialog.id && request.call_id == session.dialog.id.call_id) {\n                        //TODO: check that SDP did not change\n                        session.logger.log('re-INVITE received');\n                        var localSDP = session.mediaHandler.peerConnection.localDescription.sdp;\n                        request.reply(200, null, ['Contact: ' + self.contact], localSDP, function() {\n                            session.status = SIP.Session.C.STATUS_WAITING_FOR_ACK;\n                            session.setInvite2xxTimer(request, localSDP);\n                            session.setACKTimer();\n                        });\n                        return session;\n                    }\n                    //else will be rejected with 488 by SIP.js\n                }\n                break;\n            //We need to analize NOTIFY messages sometimes, so we fire an event\n            case SIP.C.NOTIFY:\n                self.eventEmitter.emit('SIP_NOTIFY', request);\n                break;\n        }\n        return __receiveRequest.apply(self.session, arguments);\n    };\n\n    /*--------------------------------------------------------------------------------------------------------------------*/\n\n    //Fired when ICE is starting to negotiate between the peers.\n    this.session.on('connecting', function(e) {\n        self.eventEmitter.emit(EVENT_NAMES.callConnecting, self, e);\n        setTimeout(function() {\n            if (self.session.mediaHandler.onIceCompleted !== undefined) {\n                self.session.mediaHandler.onIceCompleted(self.session);\n            }\n            else {\n                self.session.mediaHandler.callOnIceCompleted = true;\n            }\n        }, self.userAgent.sipConfig['iceGatheringTimeout'] || 3000);\n    });\n\n    this.__hasEarlyMedia = false;\n\n    /*--------------------------------------------------------------------------------------------------------------------*/\n\n\n    //Monkey patching for handling early media and to delay ACKs\n    var __receiveInviteReponse = this.session.receiveInviteResponse,\n        __waitingForIce = false;\n    this.session.receiveResponse = this.session.receiveInviteResponse = function(response) {\n        var sessionSelf = this, args = arguments;\n        switch (true) {\n            case (/^1[0-9]{2}$/.test(response.status_code)):\n                //Let's not allow the library to send PRACK\n                if (self.hasEarlyMedia()) {\n                    this.emit('progress', response);\n                    return;\n                }\n                break;\n            case /^(2[0-9]{2})|(4\\d{2})$/.test(response.status_code):\n                if (!self.hasEarlyMedia()) break;\n\n                //Let's check the ICE connection state\n                if (self.session.mediaHandler.peerConnection.iceConnectionState === 'completed' && !__waitingForIce) {\n                    __waitingForIce = false;\n                    //if ICE is connected, then let the library to handle the ACK\n                    break;\n                }\n                else {\n                    //If ICE is not connected, then we should send ACK after it has been connected\n                    if (!__waitingForIce) {\n                        self.eventEmitter.once(EVENT_NAMES.ICECompleted, function() {\n                            //let the library handle the ACK after ICE connection is completed\n                            __waitingForIce = false;\n                            __receiveInviteReponse.apply(sessionSelf, args);\n                        });\n\n                        self.eventEmitter.once(EVENT_NAMES.ICEFailed, function() {\n                            //handle the ICE Failed situation\n                            __waitingForIce = false;\n                            self.session.acceptAndTerminate(response, null, 'ICE Connection Failed');\n                        });\n\n                        __waitingForIce = true;\n                    }\n                    return;\n                }\n                break;\n        }\n        return __receiveInviteReponse.apply(sessionSelf, args);\n    };\n\n    /*--------------------------------------------------------------------------------------------------------------------*/\n\n    //Fired each time a provisional (100-199) response is received.\n    this.session.on('progress', function(e) {\n        self.onCall = true;\n\n        //Early media is supported by SIP.js library\n        //But in case it is sent without 100rel support we play it manually\n        //STATUS_EARLY_MEDIA === 11, it will be set by SIP.js if 100rel is supported\n        if (self.session.status !== SIP.Session.C.STATUS_EARLY_MEDIA && e.status_code === 183 && typeof(e.body) === 'string' && e.body.indexOf('\\n') !== -1) {\n            var session = self.session,\n                response = e;\n\n            if (session.hasOffer) {\n                if (!session.createDialog(response, 'UAC')) {\n                    return;\n                }\n                session.hasAnswer = true;\n                session.mediaHandler.setDescription(\n                    response.body,\n                    function() {\n                        session.dialog.pracked.push(response.getHeader('rseq'));\n                        session.status = SIP.Session.C.STATUS_EARLY_MEDIA;\n                        session.mute();\n                        self.__hasEarlyMedia = true;\n                        self.eventEmitter.emit(EVENT_NAMES.callProgress, self, e);\n                    },\n                    function(e) {\n                        session.logger.warn(e);\n                        session.acceptAndTerminate(response, 488, 'Not Acceptable Here');\n                        session.failed(response, SIP.C.causes.BAD_MEDIA_DESCRIPTION);\n                    }\n                );\n            }\n        }\n    });\n\n    /*--------------------------------------------------------------------------------------------------------------------*/\n\n    //Fired each time a successful final (200-299) response is received.\n    this.session.on('accepted', function(e) {\n        if (self.accepted === true) return;\n        self.onCall = true;\n        self.accepted = true;\n        self.timeCallStarted = new Date();\n        self.eventEmitter.emit(EVENT_NAMES.callStarted, self, e);\n    });\n\n\n    /*--------------------------------------------------------------------------------------------------------------------*/\n\n    function onEnd() {\n        self.onCall = false;\n        self.timeCallStarted = null;\n        self.accepted = true;\n    }\n\n    /*--------------------------------------------------------------------------------------------------------------------*/\n    //Fired each time an unsuccessful final (300-699) response is\n    //this will emit failed event\n    this.session.on('rejected', function(e) {\n        onEnd();\n        self.eventEmitter.emit(EVENT_NAMES.callRejected, self, e);\n        //terminated is not called by SIP.js when the call is rejected\n        //self.eventEmitter.emit(EVENT_NAMES.callTerminated, self, e);\n    });\n\n    /*--------------------------------------------------------------------------------------------------------------------*/\n\n    //Fired when the session was canceled by the client\n    this.session.on('cancel', function(e) {\n        onEnd();\n        self.eventEmitter.emit(EVENT_NAMES.callEnded, self, e);\n    });\n\n    /*--------------------------------------------------------------------------------------------------------------------*/\n\n    //Fired when a BYE is sent\n    this.session.on('bye', function(e) {\n        onEnd();\n        self.eventEmitter.emit(EVENT_NAMES.callEnded, self, e);\n    });\n\n    /*--------------------------------------------------------------------------------------------------------------------*/\n\n    //Fired when the request fails, whether due to an unsuccessful final response or due to timeout, transport, or other error\n    this.session.on('failed', function(response, cause) {\n        this.terminated(null, cause);\n        onEnd();\n        self.eventEmitter.emit(EVENT_NAMES.callFailed, self, response, cause);\n        //SIP.js 0.6.x does not call terminated event sometimes, so we call it ourselves\n        if (cause === SIP.C.causes.REQUEST_TIMEOUT) {\n            //this === session\n            if (this.status !== SIP.Session.C.STATUS_CONFIRMED) {\n                this.terminated(null, SIP.C.causes.REQUEST_TIMEOUT);\n            }\n        }\n    });\n\n    /*--------------------------------------------------------------------------------------------------------------------*/\n\n    this.session.on('terminated', function(response, cause) {\n        onEnd();\n        self.eventEmitter.emit(EVENT_NAMES.callTerminated, self, response, cause);\n    });\n\n    /*--------------------------------------------------------------------------------------------------------------------*/\n\n    function terminateCallOnDisconnected(reason) {\n        self.session.terminated(null, reason || SIP.C.causes.CONNECTION_ERROR);\n        onEnd();\n        self.eventEmitter.emit(EVENT_NAMES.callFailed, self, null, 'Connection error');\n    }\n\n    /*--------------------------------------------------------------------------------------------------------------------*/\n//FIXME: Explore if it can be replaced with ref: http://sipjs.com/api/0.7.0/mediaHandler/\n\n    //Monkey patching oniceconnectionstatechange because SIP.js 0.6.x does not have this event\n    var onStateChange = this.session.mediaHandler.peerConnection.oniceconnectionstatechange || function(){},\n        __doubleCompleted = false;\n    this.session.mediaHandler.peerConnection.oniceconnectionstatechange = function() {\n        //this === peerConnection\n        var state = this.iceConnectionState;\n        onStateChange.apply(this, arguments);\n\n        switch (state) {\n            case 'connected':\n                self.eventEmitter.emit(EVENT_NAMES.ICEConnected, self);\n                break;\n            case 'completed':\n                //this may be called twice, see: https://code.google.com/p/chromium/issues/detail?id=371804\n                if (!__doubleCompleted) {\n                    self.eventEmitter.emit(EVENT_NAMES.ICECompleted, self);\n                    __doubleCompleted = true;\n                }\n                break;\n            case 'disconnected':\n                terminateCallOnDisconnected();\n                self.eventEmitter.emit(EVENT_NAMES.ICEDisconnected, self);\n                break;\n            case 'failed':\n                self.eventEmitter.emit(EVENT_NAMES.ICEFailed, self);\n                break;\n        }\n    };\n\n    /*--------------------------------------------------------------------------------------------------------------------*/\n\n    var __ignoreReinviteDuplicates = false;\n\n    //Monkey patching sendReinvite for better Hold handling\n    var __sendReinvite = this.session.sendReinvite;\n    this.session.sendReinvite = function() {\n        __ignoreReinviteDuplicates = false;\n        var res = __sendReinvite.apply(this, arguments);\n        var __reinviteSucceeded = this.reinviteSucceeded,\n            __reinviteFailed = this.reinviteFailed;\n        this.reinviteSucceeded = function() {\n            self.eventEmitter.emit(EVENT_NAMES.callReinviteSucceeded, self);\n            return __reinviteSucceeded.apply(this, []);\n        };\n        this.reinviteFailed = function() {\n            self.eventEmitter.emit(EVENT_NAMES.callReinviteFailed, self);\n            return __reinviteFailed.apply(this, []);\n        };\n        return res;\n    };\n\n    /*--------------------------------------------------------------------------------------------------------------------*/\n\n    //Monkey patching receiveReinviteResponse to ignore duplicates which may break Hold/Unhold\n    var __receiveReinviteResponse = this.session.receiveReinviteResponse;\n    this.session.receiveReinviteResponse = function(response) {\n        switch (true) {\n            case /^2[0-9]{2}$/.test(response.status_code):\n                if (__ignoreReinviteDuplicates) {\n                    this.sendRequest(SIP.C.ACK, {cseq: response.cseq});\n                    return;\n                }\n                __ignoreReinviteDuplicates = true;\n                break;\n        }\n        return __receiveReinviteResponse.apply(this, arguments);\n    };\n\n    /*--------------------------------------------------------------------------------------------------------------------*/\n\n    //defining if the session is incoming or outgoing\n    if (this.type === PhoneLine.types.incoming) {\n        this.contact.name = this.session.request.from.uri.displayName;\n        this.contact.number = this.session.request.from.uri.user;\n\n    } else {\n        if (this.type === PhoneLine.types.outgoing) {\n            this.contact.name = this.session.request.to.uri.displayName;\n            this.contact.number = this.session.request.to.uri.user;\n        }\n    }\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nPhoneLine.types = {\n    incoming: 'incoming',\n    outgoing: 'outgoing'\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nPhoneLine.prototype.getId = function() {\n    return this.session.data.id;\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nPhoneLine.prototype.getSession = function() {\n    return this.session;\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nPhoneLine.prototype.cancel = function() {\n    return new Promise(function(resolve, reject) {\n        var session = this.getSession();\n        session.terminate({statusCode: 486});\n        return null;\n    });\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nPhoneLine.prototype.record = function(val) {\n    var self = this;\n    return new Promise(function(resolve, reject){\n        if (self.onCall) {\n            var message = !!val\n                ? self.controlSender.messages.startRecord\n                : self.controlSender.messages.stopRecord;\n\n            if ((self.onRecord && !val) || (!self.onRecord && val)) {\n                return self.controlSender.send(message)\n                    .then(function(data) {\n                        self.onRecord = !!val;\n                        return data;\n                    });\n            }\n        }\n        else {\n         throw new Error('No line or no active line');\n        }\n    });\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nPhoneLine.prototype.flip = function(target) {\n    var self = this;\n\n    return new Promise(function(resolve, reject){\n        if (!target) return;\n        if (self.onCall) {\n            return self.controlSender.send(self.controlSender.messages.flip, {\n                target: target\n            });\n        }\n        else {\n           throw new Error('No line or no active line');\n        }\n    });\n};\n\nPhoneLine.prototype.park = function() {\n\n    var self = this;\n    return new Promise(function(resolve, reject){\n        if (self.onCall) {\n            return self.controlSender.send(self.controlSender.messages.park);\n        }\n        else\n            throw new Error('No line or no active line');\n    });\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n// Explore ref: http://sipjs.com/api/0.6.0/session/#dtmftone-options\n\n//PhoneLine.prototype.sendDTMF = function(value, duration) {\n//    duration = parseInt(duration) || 1000;\n//    var peer = this.session.mediaHandler.peerConnection;\n//    var stream = this.session.getLocalStreams()[0];\n//    var dtmfSender = peer.createDTMFSender(stream.getAudioTracks()[0]);\n//    if (dtmfSender !== undefined && dtmfSender.canInsertDTMF) {\n//        dtmfSender.insertDTMF(value, duration);\n//    }\n//    return Promise.resolve(null);\n//};\n\nPhoneLine.prototype.sendDTMF = function(value, duration) {\n    var self = this;\n    return new Promise(function(resolve, reject){\n        if(self.onCall) {\n            duration = parseInt(duration) || 1000;\n            var peer = self.session.mediaHandler.peerConnection;\n            var stream = self.session.getLocalStreams()[0];\n            var dtmfSender = peer.createDTMFSender(stream.getAudioTracks()[0]);\n            if (dtmfSender !== undefined && dtmfSender.canInsertDTMF) {\n                dtmfSender.insertDTMF(value, duration);\n            }\n            return null;\n        }\n        else\n            throw new Error('No line or no active line');\n    });\n};\n\n\n\nPhoneLine.prototype.sendInfoDTMF = function(value, duration) {\n    duration = parseInt(duration) || 1000;\n    var session = this.session;\n    session.dtmf(value.toString(), {\n        duration: duration\n    });\n    return Promise.resolve(null);\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nPhoneLine.prototype.blindTransfer = function(target, options) {\n\n    var session = this.session;\n    var self = this;\n    var extraHeaders = [];\n    var originalTarget = target;\n    options = options || {};\n\n    return new Promise(function(resolve, reject){\n        //Blind Transfer is taken from SIP.js source\n\n        // Check Session Status\n        if (session.status !== SIP.Session.C.STATUS_CONFIRMED) {\n            throw new SIP.Exceptions.InvalidStateError(session.status);\n        }\n\n        // normalizeTarget allows instances of SIP.URI to pass through unaltered,\n        // so try to make one ahead of time\n        try {\n            target = SIP.Grammar.parse(target, 'Refer_To').uri || target;\n        } catch (e) {\n            session.logger.debug(\".refer() cannot parse Refer_To from\", target);\n            session.logger.debug(\"...falling through to normalizeTarget()\");\n        }\n\n        // Check target validity\n        target = session.ua.normalizeTarget(target);\n        if (!target) {\n            throw new TypeError('Invalid target: ' + originalTarget);\n        }\n\n        extraHeaders.push('Contact: ' + session.contact);\n        extraHeaders.push('Allow: ' + SIP.Utils.getAllowedMethods(session.ua));\n        extraHeaders.push('Refer-To: ' + target);\n\n        // Send the request\n        session.sendRequest(SIP.C.REFER, {\n            extraHeaders: extraHeaders,\n            body: options.body,\n            receiveResponse: function(response) {\n                var timeout = null;\n                if (response.status_code === 202) {\n                    var callId = response.call_id;\n\n                    function onNotify(request) {\n                        if (request.call_id === callId) {\n                            var body = request && request.body || '';\n                            switch (true) {\n                                case /1[0-9]{2}/.test(body):\n                                    request.reply(200);\n                                    break;\n                                case /2[0-9]{2}/.test(body):\n                                    self.session.terminate();\n                                    clearTimeout(timeout);\n                                    self.eventEmitter.off('SIP_NOTIFY', onNotify);\n                                    resolve();\n                                    break;\n                                default:\n                                    reject(body);\n                                    break;\n                            }\n                        }\n                    }\n\n                    timeout = setTimeout(function() {\n                        reject(new Error('Timeout: no reply'));\n                        self.eventEmitter.off('SIP_NOTIFY', onNotify);\n                    }, self.responseTimeout);\n                    self.eventEmitter.on('SIP_NOTIFY', onNotify);\n                }\n                else {\n                    reject(new Error('The response status code is: ' + response.status_code + ' (waiting for 202)'));\n                }\n            }\n        });\n\n    });\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nPhoneLine.prototype.transfer = function(target, options) {\n    var self = this;\n    return (self.onHold ? Promise.resolve(null) : self.setHold(true)).then(function(){ return delay(300); }).then(function() {\n        return self.blindTransfer(target, options);\n    });\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nPhoneLine.prototype.forward = function(target, options) {\n    var self = this, interval = null;\n    return self.answer().then(function() {\n        return new Promise(function(resolve, reject){\n            interval = setInterval(function() {\n                if (self.session.status === 12) {\n                    clearInterval(interval);\n                    self.setMute(true);\n                    setTimeout(function() {\n                        self.transfer(target, options);\n                        resolve();\n                    }, 700);\n                }\n            }, 50);\n        });\n    });\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n//ref: http://sipjs.com/api/0.6.0/session/#acceptoptions\n//make var option = {}\n\nPhoneLine.prototype.answer = function() {\n    var self = this;\n\n    return new Promise(function(resolve, reject){\n\n        function onAnswered() {\n            resolve();\n            self.eventEmitter.off(EVENT_NAMES.callStarted, onAnswered);\n            self.eventEmitter.off(EVENT_NAMES.callFailed, onFail);\n        }\n\n        function onFail(e) {\n            reject(e);\n            self.eventEmitter.off(EVENT_NAMES.callStarted, onAnswered);\n            self.eventEmitter.off(EVENT_NAMES.callFailed, onFail);\n        }\n\n        self.eventEmitter.on(EVENT_NAMES.callStarted, onAnswered);\n        self.eventEmitter.on(EVENT_NAMES.callFailed, onFail);\n\n        console.warn('emitting callProgress');\n        self.eventEmitter.emit(EVENT_NAMES.callProgress, self);\n\n        self.session.accept({\n            media: {\n                constraints: {audio: true, video: false},\n                render: {\n                    local: {\n                        audio: LOCAL_AUDIO\n                    },\n                    remote: {\n                        audio: REMOTE_AUDIO\n                    }\n                }\n            }\n        });\n\n    });\n\n};\n\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\n//FIXME: Use SIPJS mute() and unmute() ref: http://sipjs.com/api/0.7.0/session/#muteoptions\n\nPhoneLine.prototype.setMute = function(val) {\n    var self = this;\n    return new Promise(function(resolve, reject) {\n        self.muted = !!val;\n        if (self.onCall) {\n            setStreamMute(self.session.getLocalStreams()[0], self.muted);\n            val ? self.eventEmitter.emit(EVENT_NAMES.callMute, self) : self.eventEmitter.emit(EVENT_NAMES.callUnmute, self);\n        }\n        else\n            throw new Error('No line or no active line');\n    });\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\n//FIXME: Use SIPJS mute() and unmute() ref: http://sipjs.com/api/0.7.0/session/#muteoptions\n\nfunction setStreamMute(stream, val) {\n    var tracks = stream.getAudioTracks();\n    for (var i = 0; i < tracks.length; i++) {\n        tracks[i].enabled = !val;\n    }\n}\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\n////FIXME: Use SIPJS mute() and unmute() ref: http://sipjs.com/api/0.7.0/session/#muteoptions\n\nPhoneLine.prototype.setMuteBoth = function(val) {\n    var self = this;\n    return new Promise(function(resolve, reject) {\n        self.bothMuted = !!val;\n        self.muted = !!val;\n        if (self.onCall) {\n            setStreamMute(self.session.getLocalStreams()[0], self.bothMuted);\n            setStreamMute(self.session.getRemoteStreams()[0], self.bothMuted);\n            val ? self.eventEmitter.emit(EVENT_NAMES.callMute, self) : self.eventEmitter.emit(EVENT_NAMES.callUnmute, self);\n        }\n        else\n            throw new Error('No line or no active line');\n    });\n\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\n//FIXME: Explore send() ref: http://sipjs.com/api/0.7.0/transport/#sendmsg\n\n/* This is a direct and very tightly coupled code. Please, try to avoid using this method if possible */\nPhoneLine.prototype.sendRequest = function(method, body, options) {\n    var self = this;\n    options = options || {};\n\n    if (!this.session.dialog) return;\n\n    var request = new SIP.OutgoingRequest(\n        method,\n        self.session.dialog.remote_target,\n        self.session.ua,\n        {\n            cseq: options.cseq || (self.session.dialog.local_seqnum += 1),\n            call_id: self.session.dialog.id.call_id,\n            from_uri: self.session.dialog.local_uri,\n            from_tag: self.session.dialog.id.local_tag,\n            to_uri: self.session.dialog.remote_uri,\n            to_tag: self.session.dialog.id.remote_tag,\n            route_set: self.session.dialog.route_set,\n            statusCode: options.statusCode,\n            reasonPhrase: options.reasonPhrase\n        },\n        options.extraHeaders || [],\n        body || undefined\n    );\n\n    new SIP.RequestSender({\n        request: request,\n        onRequestTimeout: function() {\n            self.session.onRequestTimeout();\n        },\n        onTransportError: function() {\n            self.session.onTransportError();\n        },\n        receiveResponse: options.receiveResponse || function(response) {\n        }\n    }, self.session.ua).send();\n};\n\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\n//FIXME: should be replaced with __hold()\n//This can be removed\n//Legacy hold uses direct in-dialog messages to trick SIP.js, try to avoid using this method if possible\nPhoneLine.prototype.__legacyHold = function(val) {\n    var self = this;\n    self.onHold = !!val;\n    return new Promise(function(resolve, reject){\n        if (self.onCall && self.session.dialog) {\n            var body = self.session.mediaHandler.peerConnection.localDescription.sdp;\n            if (self.onHold) {\n                //body = body.replace(/c=IN IP4 \\d+\\.\\d+.\\d+.\\d+/, \"c=IN IP4 0.0.0.0\");\n                body = body.replace(/a=sendrecv/, \"a=sendonly\");\n                self.session.mediaHandler.hold();\n                self.session.onhold('local');\n            }\n            else {\n                self.session.mediaHandler.unhold();\n                self.session.onunhold('local');\n            }\n\n            self.sendRequest(SIP.C.INVITE, body, {\n                extraHeaders: [\n                    \"Content-Type: application/sdp\",\n                    \"Contact: \" + self.session.contact\n                ],\n                receiveResponse: function(response) {\n                    switch (true) {\n                        case /^1[0-9]{2}$/.test(response.status_code):\n                            break;\n                        case /^2[0-9]{2}$/.test(response.status_code):\n                            resolve();\n                            self.sendRequest(SIP.C.ACK, null, {\n                                cseq: response.cseq\n                            });\n                            break;\n                        default:\n                            reject('Status code is: ' + response.status_code);\n                            self.onHold = !self.onHold;\n                            break;\n                    }\n                }\n            });\n        }\n        else {\n            throw new Error('No line or no active line');\n        }\n    });\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\n\nPhoneLine.prototype.__hold = function(val) {\n    var self = this;\n    return new Promise(function(resolve, reject){\n        function onSucceeded() {\n            resolve();\n            self.eventEmitter.off(EVENT_NAMES.callReinviteFailed, onFailed);\n        }\n\n        function onFailed(e) {\n            reject(e);\n            self.eventEmitter.off(EVENT_NAMES.callReinviteSucceeded, onSucceeded);\n        }\n\n        self.eventEmitter.once(EVENT_NAMES.callReinviteSucceeded, onSucceeded);\n        self.eventEmitter.once(EVENT_NAMES.callReinviteFailed, onFailed);\n\n        val ? self.session.hold() : self.session.unhold();\n    });\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nPhoneLine.prototype.setHold = function(val) {\n    var self = this;\n\n    return new Promise(function(resolve, reject){\n        self.onHold = !!val;\n        if (self.onCall) {\n            promise = self.__hold(val).then(function() {\n                val ? self.eventEmitter.emit(EVENT_NAMES.callHold, self) : self.eventEmitter.emit(EVENT_NAMES.callUnhold, self);\n            }, function(e) {\n                self.onHold = !self.onHold;\n            });\n        }\n        else\n            throw new Error('No line or no active line');\n    });\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nPhoneLine.prototype.isOnHold = function() {\n    return this.onHold;\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nPhoneLine.prototype.isOnMute = function() {\n    return this.muted || this.bothMuted;\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nPhoneLine.prototype.isOnRecord = function() {\n    return this.onRecord;\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nPhoneLine.prototype.getContact = function() {\n    return this.contact;\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nPhoneLine.prototype.getCallDuration = function() {\n    if (this.timeCallStarted) {\n        return (new Date()).getTime() - this.timeCallStarted.getTime();\n    }\n    else {\n        return 0;\n    }\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nPhoneLine.prototype.isIncoming = function() {\n    return this.session.mediaHandler.peerConnection.signalingState !== \"closed\"\n        && !this.session.startTime;\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nPhoneLine.prototype.isClosed = function() {\n    return this.session.status === SIP.Session.C.STATUS_CANCELED || this.session.status === SIP.Session.C.STATUS_TERMINATED;\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nPhoneLine.prototype.hasEarlyMedia = function() {\n    return this.__hasEarlyMedia;\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nmodule.exports = PhoneLine;\n\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/phoneLine.js\n ** module id = 37\n ** module chunks = 0\n **/","module.exports = {\n\n    delay: function delay(ms) {\n        return new Promise(function(resolve, reject) {\n            setTimeout(resolve, ms);\n        });\n    },\n\n    defer: function defer() {\n        var deferred = {};\n        deferred.promise = new Promise(function(resolve, reject) {\n            deferred.resolve = resolve;\n            deferred.reject = reject;\n        });\n        return deferred;\n    },\n\n    extend: function extend(dst, src) {\n        src = src || {};\n        dst = dst || {};\n        Object.keys(src).forEach(function(k) {\n            dst[k] = src[k];\n        });\n        return dst;\n    },\n\n    copy: function(src){\n        return this.extend({}, src);\n    },\n\n    uuid: function uuid() {\n        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n            var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);\n            return v.toString(16);\n        });\n    }\n\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/utils.js\n ** module id = 38\n ** module chunks = 0\n **/","module.exports = {\n    'message': 'message',\n    'sipConnecting': 'sipConnecting',\n    'sipConnected': 'sipConnected',\n    'sipDisconnected': 'sipDisconnected',\n    'sipRegistered': 'sipRegistered',\n    'sipUnRegistered': 'sipUnregistered',\n    'sipRegistrationFailed': 'sipRegistrationFailed',\n    'incomingCall': 'incomingCall',                     //when incoming call is received\n    'sipIncomingCall': 'sipIncomingCall',               //same as incomingCall\n    'outgoingCall': 'outgoingCall',                     //when the outbound call is initiated\n    'callConnecting': 'callConnecting',                 //when ICE gathering is started\n    'callProgress': 'callProgress',                     //when 1xx provisional message is received (outbound only) or call is accepted, but ACK is still not sent (inbound only)\n    'callStarted': 'callStarted',                       //when ACK is sent\n    'callRejected': 'callRejected',                     //when the call is rejected by its party\n    'callEnded': 'callEnded',                           //when the call had ended without errors (BYE)\n    'callTerminated': 'callTerminated',                 //when the media is terminated, UNSTABLE in SIP.js 0.6.x\n    'callFailed': 'callFailed',                         //when the call is failed because of many different reasons (connection issues, 4xx errors, etc.)\n    'callHold': 'callHold',                             //when the call is put on hold\n    'callUnhold': 'callUnhold',                         //when the call is unholded\n    'callMute': 'callMute',                             //when the call is muted\n    'callUnmute': 'callUnmute',                         //when the call is unmuted\n    'callReplaced': 'callReplaced',                     //when the call has been replaced by an incoming invite\n    'sipRTCSession': 'sipRTCSession',\n    'sipConnectionFailed': 'sipConnectionFailed',\n    'ICEConnected': 'ICEConnected',\n    'ICECompleted': 'ICECompleted',\n    'ICEFailed': 'ICEFailed',\n    'ICEChecking': 'ICEChecking',\n    'ICEClosed': 'ICEClosed',\n    'ICEDisconnected': 'ICEDisconnected',\n    'callReinviteSucceeded': 'callReinviteSucceeded',\n    'callReinviteFailed': 'callReinviteFailed'\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/eventNames.js\n ** module id = 39\n ** module chunks = 0\n **/","var uuid = require('./utils').uuid;\n\nfunction DomAudio(){\n\n    /*\n     * We create audio containers here\n     * Sorry for DOM manipulations inside a service, but it is for the good :)\n     */\n    var LOCAL_AUDIO = document.createElement('video'),\n        REMOTE_AUDIO = document.createElement('video'),\n        LOCAL_AUDIO_ID = 'local_' + uuid(),\n        REMOTE_AUDIO_ID = 'remote_' + uuid();\n\n    LOCAL_AUDIO.setAttribute('id', LOCAL_AUDIO_ID);\n    LOCAL_AUDIO.setAttribute('autoplay', 'true');\n    LOCAL_AUDIO.setAttribute('hidden', 'true');\n    LOCAL_AUDIO.setAttribute('muted', '');\n\n    REMOTE_AUDIO.setAttribute('id', REMOTE_AUDIO_ID);\n    REMOTE_AUDIO.setAttribute('autoplay', 'true');\n    REMOTE_AUDIO.setAttribute('hidden', 'true');\n\n    document.body.appendChild(LOCAL_AUDIO);\n    document.body.appendChild(REMOTE_AUDIO);\n\n    LOCAL_AUDIO.volume = 0;\n\n    this.localAudio = LOCAL_AUDIO;\n    this.remoteAudio = REMOTE_AUDIO;\n    this.localAudioId = LOCAL_AUDIO_ID;\n    this.remoteAudioId = REMOTE_AUDIO_ID;\n\n}\n\nmodule.exports = DomAudio;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/dom.js\n ** module id = 40\n ** module chunks = 0\n **/","'use strict';\n\nvar audio = require('./audio');\n\n/**\n * @param {WebPhone} rcSIPUA\n * @param options\n * @constructor\n */\nfunction AudioHelper(rcSIPUA, options) {\n\n    var self = this;\n\n    options = options || {};\n\n    this._rcSIPUA = rcSIPUA;\n    this._incoming = options.incoming || 'audio/incoming.ogg';\n    this._outgoing = options.outgoing || 'audio/outgoing.ogg';\n    this._audio = {};\n\n    rcSIPUA.on(rcSIPUA.events.incomingCall, function() {\n        self.playIncoming(true);\n    });\n\n    rcSIPUA.on(rcSIPUA.events.outgoingCall, function() {\n        self.playOutgoing(true);\n    });\n\n    rcSIPUA.on(rcSIPUA.events.callProgress, function(session) {\n        if (session.hasEarlyMedia()) {\n            self.playOutgoing(false);\n        }\n    });\n\n    rcSIPUA.on([rcSIPUA.events.callStarted, rcSIPUA.events.callRejected, rcSIPUA.events.callEnded, rcSIPUA.events.callFailed], function() {\n        self.playIncoming(false);\n        self.playOutgoing(false);\n    });\n\n}\n\nAudioHelper.prototype._playSound = function(url, val, volume) {\n\n    if (!this._audio[url]) {\n        if (val) {\n            volume !== undefined && (audio.volume = volume);\n            this._audio[url] = audio.play(url, {loop: true});\n        }\n    } else {\n        if (val) {\n            this._audio[url].reset();\n        }\n        else {\n            this._audio[url].stop();\n        }\n    }\n\n};\n\nAudioHelper.prototype.playIncoming = function(val) {\n    this._playSound(this._incoming, val, 0.5);\n};\n\nAudioHelper.prototype.playOutgoing = function(val) {\n    this._playSound(this._outgoing, val, 1);\n};\n\nmodule.exports = AudioHelper;\n\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/audioHelper.js\n ** module id = 41\n ** module chunks = 0\n **/","var error = console.error;\nvar EventEmitter = require('./emitter');\n\nmodule.exports = {\n\n    play: function(url, options) {\n\n        var emitter = new EventEmitter();\n\n        var audio = new Audio();\n\n        audio.volume = 1;\n\n        audio.addEventListener(\"timeupdate\", function(event) {\n            emitter.emit('progress', {\n                duration: audio.duration,\n                progress: audio.currentTime / audio.duration\n            });\n        });\n\n        audio.addEventListener(\"seeked\", function(event) {\n            emitter.emit('progress', {\n                    duration: audio.duration,\n                    progress: audio.currentTime / audio.duration\n            });\n        });\n        audio.addEventListener(\"ended\", function(event) {\n            emitter.emit('ended');\n        });\n        audio.addEventListener(\"pause\", function(event) {\n            emitter.emit('progress', {\n                    duration: audio.duration,\n                    paused: true,\n                    progress: audio.currentTime / audio.duration\n            });\n        });\n        audio.addEventListener(\"play\", function(event) {\n            emitter.emit('progress', {\n                    duration: audio.duration,\n                    resumed: true,\n                    progress: audio.currentTime / audio.duration\n            });\n        });\n        audio.addEventListener(\"error\", function() {\n            console.log(\"error\", audio.error); //FIXME\n            emitter.emit('error', audio.error);\n        });\n\n        emitter.stop = audio.pause.bind(audio);\n        emitter.pause = audio.pause.bind(audio);\n        emitter.resume = audio.play.bind(audio);\n        emitter.reset = function() {\n            audio.currentTime = 0;\n            audio.play();\n        };\n\n        emitter.duration = function() {\n            return Math.ceil(audio.duration);\n        };\n\n        audio.src = url;\n        audio.load(url);\n\n        if (options) { //FIXME angular.isObject\n            for (var prop in options) {\n                if (prop in audio) {\n                    audio[prop] = options[prop];\n                }\n            }\n        }\n\n        audio.play();\n\n        return emitter;\n\n    }\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/audio.js\n ** module id = 42\n ** module chunks = 0\n **/"],"sourceRoot":"/source/"}